/// <reference types="@types/amap-js-api" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { AmapPluginLoaderService } from '../../shared/amap-plugin-loader.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { Getter } from '../../base/interfaces';
import * as ɵngcc0 from '@angular/core';
export declare namespace AMapAutocomplete {
    type DataType = 'all' | 'bus' | 'poi' | 'busline';
    interface Options {
        /**
         * 输入提示时限定POI类型，多个类型用“|”分隔
         */
        type?: string;
        /**
         * 输入提示时限定城市
         */
        city?: string;
        /**
         * 返回的数据类型
         */
        datatype?: DataType;
        /**
         * 是否强制限制在设置的城市内搜索
         */
        citylimit?: boolean;
        /**
         * 指定输入框
         */
        input?: string | HTMLInputElement;
        /**
         * 指定输出面板
         */
        output?: string | HTMLDivElement;
        /**
         * 是否在input位于页面较下方的时候自动将输入面板显示在input上方以避免被遮挡
         */
        outPutDirAuto?: boolean;
    }
    interface Tip {
        /**
         * 名称
         */
        name: string;
        /**
         * 所属区域
         */
        district: string;
        /**
         * 区域编码
         */
        adcode: string;
        /**
         * 地址
         */
        address: string;
        /**
         * 城市
         */
        city: any[];
        /**
         * ID
         */
        id: string;
        /**
         * 坐标经纬度
         */
        location: AMap.LngLat;
        /**
         * 类型编码
         */
        typecode: string;
    }
    interface SearchResult {
        /**
         * 查询状态说明
         */
        info: string;
        /**
         * 输入提示条数
         */
        count: number;
        /**
         * 输入提示列表
         */
        tips: Tip[];
    }
    type SearchStatus = 'complete' | 'error' | 'no_data';
}
export interface AutocompleteSearchResult {
    status: AMapAutocomplete.SearchStatus;
    result: string | AMapAutocomplete.SearchResult;
}
export declare class AmapAutocompleteService implements Getter<any> {
    private plugin;
    private binder;
    private logger;
    private ngZone;
    private ac;
    private ac$;
    constructor(plugin: AmapPluginLoaderService, binder: EventBinderService, logger: LoggerService, ngZone: NgZone);
    /**
     * 获取插件
     */
    get(): Observable<any>;
    /**
     * 侦听事件
     */
    on(event: string): import("@angular/core").EventEmitter<any>;
    /**
     * 创建插件
     */
    create(options: AMapAutocomplete.Options): Observable<any>;
    /**
     * 搜索
     */
    search(address: string): Observable<AutocompleteSearchResult>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AmapAutocompleteService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AmapAutocompleteService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hcC1hdXRvY29tcGxldGUuc2VydmljZS5kLnRzIiwic291cmNlcyI6WyJhbWFwLWF1dG9jb21wbGV0ZS5zZXJ2aWNlLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIkB0eXBlcy9hbWFwLWpzLWFwaVwiIC8+XG5pbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE9ic2VydmFibGUgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IEFtYXBQbHVnaW5Mb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2FtYXAtcGx1Z2luLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEV2ZW50QmluZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9ldmVudC1iaW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xvZ2dlci9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBHZXR0ZXIgfSBmcm9tICcuLi8uLi9iYXNlL2ludGVyZmFjZXMnO1xuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEFNYXBBdXRvY29tcGxldGUge1xuICAgIHR5cGUgRGF0YVR5cGUgPSAnYWxsJyB8ICdidXMnIHwgJ3BvaScgfCAnYnVzbGluZSc7XG4gICAgaW50ZXJmYWNlIE9wdGlvbnMge1xuICAgICAgICAvKipcbiAgICAgICAgICog6L6T5YWl5o+Q56S65pe26ZmQ5a6aUE9J57G75Z6L77yM5aSa5Liq57G75Z6L55So4oCcfOKAneWIhumalFxuICAgICAgICAgKi9cbiAgICAgICAgdHlwZT86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOi+k+WFpeaPkOekuuaXtumZkOWumuWfjuW4glxuICAgICAgICAgKi9cbiAgICAgICAgY2l0eT86IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOi/lOWbnueahOaVsOaNruexu+Wei1xuICAgICAgICAgKi9cbiAgICAgICAgZGF0YXR5cGU/OiBEYXRhVHlwZTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaYr+WQpuW8uuWItumZkOWItuWcqOiuvue9rueahOWfjuW4guWGheaQnOe0olxuICAgICAgICAgKi9cbiAgICAgICAgY2l0eWxpbWl0PzogYm9vbGVhbjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaMh+Wumui+k+WFpeahhlxuICAgICAgICAgKi9cbiAgICAgICAgaW5wdXQ/OiBzdHJpbmcgfCBIVE1MSW5wdXRFbGVtZW50O1xuICAgICAgICAvKipcbiAgICAgICAgICog5oyH5a6a6L6T5Ye66Z2i5p2/XG4gICAgICAgICAqL1xuICAgICAgICBvdXRwdXQ/OiBzdHJpbmcgfCBIVE1MRGl2RWxlbWVudDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaYr+WQpuWcqGlucHV05L2N5LqO6aG16Z2i6L6D5LiL5pa555qE5pe25YCZ6Ieq5Yqo5bCG6L6T5YWl6Z2i5p2/5pi+56S65ZyoaW5wdXTkuIrmlrnku6Xpgb/lhY3ooqvpga7mjKFcbiAgICAgICAgICovXG4gICAgICAgIG91dFB1dERpckF1dG8/OiBib29sZWFuO1xuICAgIH1cbiAgICBpbnRlcmZhY2UgVGlwIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWQjeensFxuICAgICAgICAgKi9cbiAgICAgICAgbmFtZTogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICog5omA5bGe5Yy65Z+fXG4gICAgICAgICAqL1xuICAgICAgICBkaXN0cmljdDogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICog5Yy65Z+f57yW56CBXG4gICAgICAgICAqL1xuICAgICAgICBhZGNvZGU6IHN0cmluZztcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOWcsOWdgFxuICAgICAgICAgKi9cbiAgICAgICAgYWRkcmVzczogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICog5Z+O5biCXG4gICAgICAgICAqL1xuICAgICAgICBjaXR5OiBhbnlbXTtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIElEXG4gICAgICAgICAqL1xuICAgICAgICBpZDogc3RyaW5nO1xuICAgICAgICAvKipcbiAgICAgICAgICog5Z2Q5qCH57uP57qs5bqmXG4gICAgICAgICAqL1xuICAgICAgICBsb2NhdGlvbjogQU1hcC5MbmdMYXQ7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDnsbvlnovnvJbnoIFcbiAgICAgICAgICovXG4gICAgICAgIHR5cGVjb2RlOiBzdHJpbmc7XG4gICAgfVxuICAgIGludGVyZmFjZSBTZWFyY2hSZXN1bHQge1xuICAgICAgICAvKipcbiAgICAgICAgICog5p+l6K+i54q25oCB6K+05piOXG4gICAgICAgICAqL1xuICAgICAgICBpbmZvOiBzdHJpbmc7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDovpPlhaXmj5DnpLrmnaHmlbBcbiAgICAgICAgICovXG4gICAgICAgIGNvdW50OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDovpPlhaXmj5DnpLrliJfooahcbiAgICAgICAgICovXG4gICAgICAgIHRpcHM6IFRpcFtdO1xuICAgIH1cbiAgICB0eXBlIFNlYXJjaFN0YXR1cyA9ICdjb21wbGV0ZScgfCAnZXJyb3InIHwgJ25vX2RhdGEnO1xufVxuZXhwb3J0IGludGVyZmFjZSBBdXRvY29tcGxldGVTZWFyY2hSZXN1bHQge1xuICAgIHN0YXR1czogQU1hcEF1dG9jb21wbGV0ZS5TZWFyY2hTdGF0dXM7XG4gICAgcmVzdWx0OiBzdHJpbmcgfCBBTWFwQXV0b2NvbXBsZXRlLlNlYXJjaFJlc3VsdDtcbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFtYXBBdXRvY29tcGxldGVTZXJ2aWNlIGltcGxlbWVudHMgR2V0dGVyPGFueT4ge1xuICAgIHByaXZhdGUgcGx1Z2luO1xuICAgIHByaXZhdGUgYmluZGVyO1xuICAgIHByaXZhdGUgbG9nZ2VyO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHByaXZhdGUgYWM7XG4gICAgcHJpdmF0ZSBhYyQ7XG4gICAgY29uc3RydWN0b3IocGx1Z2luOiBBbWFwUGx1Z2luTG9hZGVyU2VydmljZSwgYmluZGVyOiBFdmVudEJpbmRlclNlcnZpY2UsIGxvZ2dlcjogTG9nZ2VyU2VydmljZSwgbmdab25lOiBOZ1pvbmUpO1xuICAgIC8qKlxuICAgICAqIOiOt+WPluaPkuS7tlxuICAgICAqL1xuICAgIGdldCgpOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICog5L6m5ZCs5LqL5Lu2XG4gICAgICovXG4gICAgb24oZXZlbnQ6IHN0cmluZyk6IGltcG9ydChcIkBhbmd1bGFyL2NvcmVcIikuRXZlbnRFbWl0dGVyPGFueT47XG4gICAgLyoqXG4gICAgICog5Yib5bu65o+S5Lu2XG4gICAgICovXG4gICAgY3JlYXRlKG9wdGlvbnM6IEFNYXBBdXRvY29tcGxldGUuT3B0aW9ucyk6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiDmkJzntKJcbiAgICAgKi9cbiAgICBzZWFyY2goYWRkcmVzczogc3RyaW5nKTogT2JzZXJ2YWJsZTxBdXRvY29tcGxldGVTZWFyY2hSZXN1bHQ+O1xufVxuIl19