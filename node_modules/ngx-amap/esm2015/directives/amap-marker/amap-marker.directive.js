/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-marker/amap-marker.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, ContentChildren, QueryList, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { AmapMarkerService } from './amap-marker.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { AMapOverlay, OverlayOptions } from '../../base/amap-overlay';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
import { PixelService } from '../../shared/pixel.service';
import { IconService } from '../../shared/icon.service';
import { MarkerLabelService } from '../../shared/marker-label.service';
import { AmapInfoWindowComponent } from '../../components/amap-info-window/amap-info-window.component';
import { AMapService } from '../../shared/amap.service';
/** @type {?} */
const TAG = 'amap-marker';
/** @type {?} */
const ALL_OPTIONS = [
    ...OverlayOptions,
    'position',
    'anchor',
    'offset',
    'icon',
    'content',
    'topWhenClick',
    'raiseOnDrag',
    'visible',
    'zIndex',
    'angle',
    'autoRotation',
    'animation',
    'shadow',
    'title',
    'shape',
    'label',
];
export class AmapMarkerDirective extends AMapOverlay {
    /**
     * @param {?} os
     * @param {?} binder
     * @param {?} amaps
     * @param {?} pixels
     * @param {?} icons
     * @param {?} mlabels
     * @param {?} logger
     * @param {?} ngZone
     */
    constructor(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
        super(os, binder);
        this.os = os;
        this.binder = binder;
        this.amaps = amaps;
        this.pixels = pixels;
        this.icons = icons;
        this.mlabels = mlabels;
        this.logger = logger;
        this.ngZone = ngZone;
        /**
         * 额外: 是否隐藏
         */
        this.hidden = false;
        /**
         * 额外: 是否包含在点聚合中
         */
        this.inCluster = false;
        /**
         * 额外: 点击时是否显示信息窗体
         */
        this.openInfoWindow = true;
        // amap-marker events:
        this.naReady = new EventEmitter();
        // amap info window:
        this.infoWindowComponent = new QueryList();
        this.inited = false;
        /** @type {?} */
        const target = this.os.get();
        this.naMouseOut = this.binder.bindEvent(target, 'mouseout');
        this.naDragStart = this.binder.bindEvent(target, 'dragstart');
        this.naDragging = this.binder.bindEvent(target, 'dragging');
        this.naDragEnd = this.binder.bindEvent(target, 'dragend');
        this.naMoving = this.binder.bindEvent(target, 'moving');
        this.naMoveEnd = this.binder.bindEvent(target, 'moveend');
        this.naMoveAlong = this.binder.bindEvent(target, 'movealong');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.os.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        /** @type {?} */
        const marker = this.get();
        if (!this.inited) {
            // do not draw marker when no poistion defined.
            if (!this.position) {
                return;
            }
            this.amaps.get().subscribe((/**
             * @return {?}
             */
            () => {
                this.logger.d(TAG, 'initializing ...');
                // bind info window events:
                this.subscription = this.binder.bindEvent(marker, 'click').subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (this.openInfoWindow) {
                        this.infoWindowComponent.forEach((/**
                         * @param {?} w
                         * @return {?}
                         */
                        w => w.open()));
                    }
                }));
                /** @type {?} */
                const options = getOptions(this, ALL_OPTIONS);
                if (this.icon) {
                    options.icon = this.icons.create(this.icon);
                }
                if (this.shadow) {
                    options.shadow = this.icons.create(this.shadow);
                }
                if (this.label) {
                    options.label = this.mlabels.create(this.label);
                }
                if (this.offset) {
                    options.offset = this.pixels.create(this.offset);
                }
                this.logger.d(TAG, 'options:', options);
                this.os.create(options, !this.inCluster).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                m => {
                    this.ngZone.run((/**
                     * @return {?}
                     */
                    () => this.naReady.emit(m)));
                    this.logger.d(TAG, 'marker is ready.');
                }));
                this.inited = true;
                this.updateInfoWindow();
                this.updateInfoWindowPosition();
            }));
        }
        else {
            zip(filter.has('icon'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setIcon(this.icons.create(v))));
            zip(filter.has('shadow'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setShadow(this.icons.create(v))));
            zip(filter.has('label'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setLabel(this.mlabels.create(v))));
            zip(filter.has('title'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setTitle(v)));
            zip(filter.has('content'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setContent(v)));
            zip(filter.has('extData'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setExtData(v)));
            zip(filter.has('clickable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setClickable(!!v)));
            zip(filter.has('draggable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setDraggable(!!v)));
            zip(filter.has('visible'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => (v ? m.show() : m.hide())));
            zip(filter.has('cursor'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setCursor(v)));
            zip(filter.has('animation'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setAnimation(v)));
            zip(filter.has('angle'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setAngle(v)));
            zip(filter.has('zIndex'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setzIndex(v)));
            zip(filter.has('shape'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setShape(v)));
            zip(filter.notEmpty('offset'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setOffset(this.pixels.create(v))));
            zip(filter.notEmpty('position'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setPosition(v)));
        }
        zip(filter.has('isTop'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, m]) => m.setTop(!!v)));
        zip(filter.has('hidden'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, m]) => (v ? m.hide() : m.show())));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updateInfoWindow();
        this.infoWindowComponent.changes.subscribe((/**
         * @return {?}
         */
        () => this.updateInfoWindow()));
    }
    /**
     * @private
     * @return {?}
     */
    updateInfoWindow() {
        if (this.infoWindowComponent && this.inited) {
            if (this.infoWindowComponent.length > 1) {
                this.logger.e(TAG, 'Expected no more than 1 info window.');
                return;
            }
            /** @type {?} */
            const marker = this.os.get();
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            component => {
                component.hostMarker = marker;
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateInfoWindowPosition() {
        if (this.infoWindowComponent && this.inited) {
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            component => {
                component.toggleOpen();
            }));
        }
    }
    /**
     * 获取已创建的 AMap.Marker 对象
     * @return {?}
     */
    get() {
        return this.os.get();
    }
}
AmapMarkerDirective.decorators = [
    { type: Directive, args: [{
                selector: 'amap-marker',
                exportAs: 'marker',
                providers: [AmapMarkerService],
            },] }
];
/** @nocollapse */
AmapMarkerDirective.ctorParameters = () => [
    { type: AmapMarkerService },
    { type: EventBinderService },
    { type: AMapService },
    { type: PixelService },
    { type: IconService },
    { type: MarkerLabelService },
    { type: LoggerService },
    { type: NgZone }
];
AmapMarkerDirective.propDecorators = {
    position: [{ type: Input }],
    anchor: [{ type: Input }],
    offset: [{ type: Input }],
    icon: [{ type: Input }],
    content: [{ type: Input }],
    topWhenClick: [{ type: Input }],
    raiseOnDrag: [{ type: Input }],
    visible: [{ type: Input }],
    zIndex: [{ type: Input }],
    angle: [{ type: Input }],
    autoRotation: [{ type: Input }],
    animation: [{ type: Input }],
    shadow: [{ type: Input }],
    title: [{ type: Input }],
    shape: [{ type: Input }],
    label: [{ type: Input }],
    isTop: [{ type: Input }],
    hidden: [{ type: Input }],
    inCluster: [{ type: Input }],
    openInfoWindow: [{ type: Input }],
    naReady: [{ type: Output }],
    naMouseOut: [{ type: Output }],
    naDragStart: [{ type: Output }],
    naDragging: [{ type: Output }],
    naDragEnd: [{ type: Output }],
    naMoving: [{ type: Output }],
    naMoveEnd: [{ type: Output }],
    naMoveAlong: [{ type: Output }],
    infoWindowComponent: [{ type: ContentChildren, args: [AmapInfoWindowComponent,] }]
};
if (false) {
    /**
     * 点标记在地图上显示的位置
     * @type {?}
     */
    AmapMarkerDirective.prototype.position;
    /**
     * 标记锚点
     * @type {?}
     */
    AmapMarkerDirective.prototype.anchor;
    /**
     * 点标记显示位置偏移量
     * @type {?}
     */
    AmapMarkerDirective.prototype.offset;
    /**
     * 需在点标记中显示的图标
     * @type {?}
     */
    AmapMarkerDirective.prototype.icon;
    /**
     * 点标记显示内容
     * @type {?}
     */
    AmapMarkerDirective.prototype.content;
    /**
     * 鼠标点击时marker是否置顶
     * @type {?}
     */
    AmapMarkerDirective.prototype.topWhenClick;
    /**
     * 拖拽点标记时是否开启点标记离开地图的效果
     * @type {?}
     */
    AmapMarkerDirective.prototype.raiseOnDrag;
    /**
     * 点标记是否可见
     * @type {?}
     */
    AmapMarkerDirective.prototype.visible;
    /**
     * 点标记的叠加顺序
     * @type {?}
     */
    AmapMarkerDirective.prototype.zIndex;
    /**
     * 点标记的旋转角度
     * @type {?}
     */
    AmapMarkerDirective.prototype.angle;
    /**
     * 是否自动旋转
     * @type {?}
     */
    AmapMarkerDirective.prototype.autoRotation;
    /**
     * 点标记的动画效果
     * @type {?}
     */
    AmapMarkerDirective.prototype.animation;
    /**
     * 点标记阴影
     * @type {?}
     */
    AmapMarkerDirective.prototype.shadow;
    /**
     * 鼠标滑过点标记时的文字提示
     * @type {?}
     */
    AmapMarkerDirective.prototype.title;
    /**
     * 可点击区域
     * @type {?}
     */
    AmapMarkerDirective.prototype.shape;
    /**
     * 文本标注
     * @type {?}
     */
    AmapMarkerDirective.prototype.label;
    /**
     * 额外: 是否置顶
     * @type {?}
     */
    AmapMarkerDirective.prototype.isTop;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    AmapMarkerDirective.prototype.hidden;
    /**
     * 额外: 是否包含在点聚合中
     * @type {?}
     */
    AmapMarkerDirective.prototype.inCluster;
    /**
     * 额外: 点击时是否显示信息窗体
     * @type {?}
     */
    AmapMarkerDirective.prototype.openInfoWindow;
    /** @type {?} */
    AmapMarkerDirective.prototype.naReady;
    /** @type {?} */
    AmapMarkerDirective.prototype.naMouseOut;
    /** @type {?} */
    AmapMarkerDirective.prototype.naDragStart;
    /** @type {?} */
    AmapMarkerDirective.prototype.naDragging;
    /** @type {?} */
    AmapMarkerDirective.prototype.naDragEnd;
    /** @type {?} */
    AmapMarkerDirective.prototype.naMoving;
    /** @type {?} */
    AmapMarkerDirective.prototype.naMoveEnd;
    /** @type {?} */
    AmapMarkerDirective.prototype.naMoveAlong;
    /** @type {?} */
    AmapMarkerDirective.prototype.infoWindowComponent;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.inited;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.subscription;
    /**
     * @type {?}
     * @protected
     */
    AmapMarkerDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapMarkerDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.pixels;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.icons;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.mlabels;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,