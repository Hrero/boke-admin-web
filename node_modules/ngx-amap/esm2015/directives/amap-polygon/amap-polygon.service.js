/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-polygon/amap-polygon.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ReplaySubject, zip } from 'rxjs';
import { map, switchMapTo } from 'rxjs/operators';
import { AMapService } from '../../shared/amap.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { PluginLoaderService } from '../../shared/plugin-loader.service';
/** @type {?} */
const TAG = 'AmapPolygon';
export class AmapPolygonService {
    /**
     * @param {?} amaps
     * @param {?} logger
     * @param {?} ngZone
     * @param {?} plugins
     */
    constructor(amaps, logger, ngZone, plugins) {
        this.amaps = amaps;
        this.logger = logger;
        this.ngZone = ngZone;
        this.plugins = plugins;
        this.polygon$ = new ReplaySubject(1);
        this.editor$ = new ReplaySubject(1);
    }
    /**
     * 获取折线
     * @return {?}
     */
    get() {
        return this.polygon$.asObservable();
    }
    /**
     * 创建折线 AMap.Polygon
     * @param {?} options 选项
     * @return {?}
     */
    create(options) {
        return this.amaps.get().pipe(map((/**
         * @param {?} m
         * @return {?}
         */
        m => {
            options.map = m;
            this.polygon = this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => new AMap.Polygon(options)));
            this.logger.d(TAG, 'new Polygon created.');
            this.polygon$.next(this.polygon);
            this.polygon$.complete();
            return this.polygon;
        })));
    }
    /**
     * 销毁折线
     * @return {?}
     */
    destroy() {
        this.get().subscribe((/**
         * @param {?} m
         * @return {?}
         */
        m => {
            m.setMap(null);
            this.logger.d(TAG, 'Polygon destroyed.');
            this.polygon = null;
        }));
    }
    /**
     * @return {?}
     */
    getEditor() {
        // plugin is loading:
        return this.editor$.asObservable();
    }
    /**
     * 加载编辑插件
     * @return {?}
     */
    loadEditor() {
        return this.plugins.load('AMap.PolyEditor');
    }
    /**
     * 创建编辑器
     * @return {?}
     */
    createEditor() {
        return this.loadEditor().pipe(switchMapTo(zip(this.amaps.get(), this.get())), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([m, p]) => {
            this.editor = this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => new AMap.PolyEditor(m, p)));
            this.logger.d(TAG, 'new PolyEditor created.');
            this.editor$.next(this.editor);
            this.editor$.complete();
            return this.editor;
        })));
    }
    /**
     * 开关编辑器
     * @param {?} v 开关选项
     * @return {?}
     */
    toggleEditor(v) {
        if (v && !this.editor) {
            this.createEditor().subscribe((/**
             * @param {?} editor
             * @return {?}
             */
            editor => editor.open()));
            return;
        }
        if (this.editor) {
            if (v) {
                this.editor.open();
            }
            else {
                this.editor.close();
            }
        }
    }
}
AmapPolygonService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AmapPolygonService.ctorParameters = () => [
    { type: AMapService },
    { type: LoggerService },
    { type: NgZone },
    { type: PluginLoaderService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AmapPolygonService.prototype.polygon;
    /**
     * @type {?}
     * @private
     */
    AmapPolygonService.prototype.polygon$;
    /**
     * @type {?}
     * @private
     */
    AmapPolygonService.prototype.editor;
    /**
     * @type {?}
     * @private
     */
    AmapPolygonService.prototype.editor$;
    /**
     * @type {?}
     * @private
     */
    AmapPolygonService.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapPolygonService.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapPolygonService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AmapPolygonService.prototype.plugins;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hcC1wb2x5Z29uLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYW1hcC8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvYW1hcC1wb2x5Z29uL2FtYXAtcG9seWdvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFFLGFBQWEsRUFBRSxHQUFHLEVBQUUsTUFBTSxNQUFNLENBQUM7QUFDMUMsT0FBTyxFQUFFLEdBQUcsRUFBRSxXQUFXLEVBQUUsTUFBTSxnQkFBZ0IsQ0FBQztBQUNsRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBQ25FLE9BQU8sRUFBRSxtQkFBbUIsRUFBRSxNQUFNLG9DQUFvQyxDQUFDOztNQUluRSxHQUFHLEdBQUcsYUFBYTtBQUd6QixNQUFNLE9BQU8sa0JBQWtCOzs7Ozs7O0lBTTdCLFlBQ1UsS0FBa0IsRUFDbEIsTUFBcUIsRUFDckIsTUFBYyxFQUNkLE9BQTRCO1FBSDVCLFVBQUssR0FBTCxLQUFLLENBQWE7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBZTtRQUNyQixXQUFNLEdBQU4sTUFBTSxDQUFRO1FBQ2QsWUFBTyxHQUFQLE9BQU8sQ0FBcUI7UUFSOUIsYUFBUSxHQUFHLElBQUksYUFBYSxDQUFNLENBQUMsQ0FBQyxDQUFDO1FBRXJDLFlBQU8sR0FBRyxJQUFJLGFBQWEsQ0FBTSxDQUFDLENBQUMsQ0FBQztJQU96QyxDQUFDOzs7OztJQUtKLEdBQUc7UUFDRCxPQUFPLElBQUksQ0FBQyxRQUFRLENBQUMsWUFBWSxFQUFFLENBQUM7SUFDdEMsQ0FBQzs7Ozs7O0lBTUQsTUFBTSxDQUFDLE9BQTZCO1FBQ2xDLE9BQU8sSUFBSSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUUsQ0FB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QW1COzs7Ozs7O0lBUTFCLHFDQUFxQjs7Ozs7SUFDckIsc0NBQTZDOzs7OztJQUM3QyxvQ0FBb0I7Ozs7O0lBQ3BCLHFDQUE0Qzs7Ozs7SUFHMUMsbUNBQTBCOzs7OztJQUMxQixvQ0FBNkI7Ozs7O0lBQzdCLG9DQUFzQjs7Ozs7SUFDdEIscUNBQW9DIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgSW5qZWN0YWJsZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBSZXBsYXlTdWJqZWN0LCB6aXAgfSBmcm9tICdyeGpzJztcbmltcG9ydCB7IG1hcCwgc3dpdGNoTWFwVG8gfSBmcm9tICdyeGpzL29wZXJhdG9ycyc7XG5pbXBvcnQgeyBBTWFwU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9hbWFwLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9sb2dnZXIvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgUGx1Z2luTG9hZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9wbHVnaW4tbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2l0aEVkaXRvciB9IGZyb20gJy4uLy4uL2Jhc2UvaW50ZXJmYWNlcyc7XG5kZWNsYXJlIGNvbnN0IEFNYXA6IGFueTtcblxuY29uc3QgVEFHID0gJ0FtYXBQb2x5Z29uJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIEFtYXBQb2x5Z29uU2VydmljZSBpbXBsZW1lbnRzIFdpdGhFZGl0b3I8QU1hcC5Qb2x5Z29uLCBhbnk+IHtcbiAgcHJpdmF0ZSBwb2x5Z29uOiBhbnk7XG4gIHByaXZhdGUgcG9seWdvbiQgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KDEpO1xuICBwcml2YXRlIGVkaXRvcjogYW55O1xuICBwcml2YXRlIGVkaXRvciQgPSBuZXcgUmVwbGF5U3ViamVjdDxhbnk+KDEpO1xuXG4gIGNvbnN0cnVjdG9yKFxuICAgIHByaXZhdGUgYW1hcHM6IEFNYXBTZXJ2aWNlLFxuICAgIHByaXZhdGUgbG9nZ2VyOiBMb2dnZXJTZXJ2aWNlLFxuICAgIHByaXZhdGUgbmdab25lOiBOZ1pvbmUsXG4gICAgcHJpdmF0ZSBwbHVnaW5zOiBQbHVnaW5Mb2FkZXJTZXJ2aWNlLFxuICApIHt9XG5cbiAgLyoqXG4gICAqIOiOt+WPluaKmOe6v1xuICAgKi9cbiAgZ2V0KCkge1xuICAgIHJldHVybiB0aGlzLnBvbHlnb24kLmFzT2JzZXJ2YWJsZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIOWIm+W7uuaKmOe6vyBBTWFwLlBvbHlnb25cbiAgICogQHBhcmFtIG9wdGlvbnMg6YCJ6aG5XG4gICAqL1xuICBjcmVhdGUob3B0aW9uczogQU1hcC5Qb2x5Z29uLk9wdGlvbnMpIHtcbiAgICByZXR1cm4gdGhpcy5hbWFwcy5nZXQoKS5waXBlKFxuICAgICAgbWFwKG0gPT4ge1xuICAgICAgICBvcHRpb25zLm1hcCA9IG07XG4gICAgICAgIHRoaXMucG9seWdvbiA9IHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IG5ldyBBTWFwLlBvbHlnb24ob3B0aW9ucykpO1xuICAgICAgICB0aGlzLmxvZ2dlci5kKFRBRywgJ25ldyBQb2x5Z29uIGNyZWF0ZWQuJyk7XG4gICAgICAgIHRoaXMucG9seWdvbiQubmV4dCh0aGlzLnBvbHlnb24pO1xuICAgICAgICB0aGlzLnBvbHlnb24kLmNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLnBvbHlnb247XG4gICAgICB9KSxcbiAgICApO1xuICB9XG5cbiAgLyoqXG4gICAqIOmUgOavgeaKmOe6v1xuICAgKi9cbiAgZGVzdHJveSgpIHtcbiAgICB0aGlzLmdldCgpLnN1YnNjcmliZShtID0+IHtcbiAgICAgIG0uc2V0TWFwKG51bGwpO1xuICAgICAgdGhpcy5sb2dnZXIuZChUQUcsICdQb2x5Z29uIGRlc3Ryb3llZC4nKTtcbiAgICAgIHRoaXMucG9seWdvbiA9IG51bGw7XG4gICAgfSk7XG4gIH1cblxuICBnZXRFZGl0b3IoKSB7XG4gICAgLy8gcGx1Z2luIGlzIGxvYWRpbmc6XG4gICAgcmV0dXJuIHRoaXMuZWRpdG9yJC5hc09ic2VydmFibGUoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliqDovb3nvJbovpHmj5Lku7ZcbiAgICovXG4gIGxvYWRFZGl0b3IoKSB7XG4gICAgcmV0dXJuIHRoaXMucGx1Z2lucy5sb2FkKCdBTWFwLlBvbHlFZGl0b3InKTtcbiAgfVxuXG4gIC8qKlxuICAgKiDliJvlu7rnvJbovpHlmahcbiAgICovXG4gIGNyZWF0ZUVkaXRvcigpIHtcbiAgICByZXR1cm4gdGhpcy5sb2FkRWRpdG9yKCkucGlwZShcbiAgICAgIHN3aXRjaE1hcFRvKHppcCh0aGlzLmFtYXBzLmdldCgpLCB0aGlzLmdldCgpKSksXG4gICAgICBtYXAoKFttLCBwXSkgPT4ge1xuICAgICAgICB0aGlzLmVkaXRvciA9IHRoaXMubmdab25lLnJ1bk91dHNpZGVBbmd1bGFyKCgpID0+IG5ldyBBTWFwLlBvbHlFZGl0b3IobSwgcCkpO1xuICAgICAgICB0aGlzLmxvZ2dlci5kKFRBRywgJ25ldyBQb2x5RWRpdG9yIGNyZWF0ZWQuJyk7XG4gICAgICAgIHRoaXMuZWRpdG9yJC5uZXh0KHRoaXMuZWRpdG9yKTtcbiAgICAgICAgdGhpcy5lZGl0b3IkLmNvbXBsZXRlKCk7XG4gICAgICAgIHJldHVybiB0aGlzLmVkaXRvcjtcbiAgICAgIH0pLFxuICAgICk7XG4gIH1cblxuICAvKipcbiAgICog5byA5YWz57yW6L6R5ZmoXG4gICAqIEBwYXJhbSB2IOW8gOWFs+mAiemhuVxuICAgKi9cbiAgdG9nZ2xlRWRpdG9yKHY6IGJvb2xlYW4pIHtcbiAgICBpZiAodiAmJiAhdGhpcy5lZGl0b3IpIHtcbiAgICAgIHRoaXMuY3JlYXRlRWRpdG9yKCkuc3Vic2NyaWJlKGVkaXRvciA9PiBlZGl0b3Iub3BlbigpKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBpZiAodGhpcy5lZGl0b3IpIHtcbiAgICAgIGlmICh2KSB7XG4gICAgICAgIHRoaXMuZWRpdG9yLm9wZW4oKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuZWRpdG9yLmNsb3NlKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG4iXX0=