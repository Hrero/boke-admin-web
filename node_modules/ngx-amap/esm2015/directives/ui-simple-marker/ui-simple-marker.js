/**
 * @fileoverview added by tsickle
 * Generated from: directives/ui-simple-marker/ui-simple-marker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Input, Output, EventEmitter, ContentChildren, QueryList, } from '@angular/core';
import { zip } from 'rxjs';
import { AMapOverlay, OverlayOptions } from '../../base/amap-overlay';
import { AmapInfoWindowComponent } from '../../components/amap-info-window/amap-info-window.component';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
export const SimpleMarkerOptions = [
    ...OverlayOptions,
    // Marker options without cotent
    'position',
    'anchor',
    'offset',
    'icon',
    'topWhenClick',
    'raiseOnDrag',
    'visible',
    'zIndex',
    'angle',
    'autoRotation',
    'animation',
    'shadow',
    'title',
    'shape',
    'label',
    // Own options
    'iconTheme',
    'iconStyle',
    'iconLabel',
    'showPositionPoint',
    'containerClassNames',
];
export class UISimpleMarker extends AMapOverlay {
    /**
     * @param {?} os
     * @param {?} binder
     * @param {?} amaps
     * @param {?} pixels
     * @param {?} icons
     * @param {?} mlabels
     * @param {?} logger
     * @param {?} ngZone
     */
    constructor(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
        super(os, binder);
        this.os = os;
        this.binder = binder;
        this.amaps = amaps;
        this.pixels = pixels;
        this.icons = icons;
        this.mlabels = mlabels;
        this.logger = logger;
        this.ngZone = ngZone;
        this.TAG = 'ui-simple-marker';
        /**
         * 额外: 是否隐藏
         */
        this.hidden = false;
        /**
         * 额外: 是否包含在点聚合中
         */
        this.inCluster = false;
        /**
         * 额外: 点击时是否显示信息窗体
         */
        this.openInfoWindow = true;
        // amap-marker events:
        this.naReady = new EventEmitter();
        // amap info window:
        this.infoWindowComponent = new QueryList();
        this.inited = false;
        /** @type {?} */
        const target = this.os.get();
        this.naMouseOut = this.binder.bindEvent(target, 'mouseout');
        this.naDragStart = this.binder.bindEvent(target, 'dragstart');
        this.naDragging = this.binder.bindEvent(target, 'dragging');
        this.naDragEnd = this.binder.bindEvent(target, 'dragend');
        this.naMoving = this.binder.bindEvent(target, 'moving');
        this.naMoveEnd = this.binder.bindEvent(target, 'moveend');
        this.naMoveAlong = this.binder.bindEvent(target, 'movealong');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.os.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        /** @type {?} */
        const marker = this.get();
        if (!this.inited) {
            // do not draw marker when no poistion defined.
            if (!this.position) {
                return;
            }
            this.amaps.get().subscribe((/**
             * @return {?}
             */
            () => {
                this.logger.d(this.TAG, 'initializing ...');
                // bind info window events:
                this.subscription = this.binder.bindEvent(marker, 'click').subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (this.openInfoWindow) {
                        this.infoWindowComponent.forEach((/**
                         * @param {?} w
                         * @return {?}
                         */
                        w => w.open()));
                    }
                }));
                /** @type {?} */
                const options = this.getOptions();
                if (this.icon) {
                    options.icon = this.icons.create(this.icon);
                }
                if (this.shadow) {
                    options.shadow = this.icons.create(this.shadow);
                }
                if (this.label) {
                    options.label = this.mlabels.create(this.label);
                }
                if (this.offset) {
                    options.offset = this.pixels.create(this.offset);
                }
                this.logger.d(this.TAG, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                m => {
                    this.ngZone.run((/**
                     * @return {?}
                     */
                    () => this.naReady.emit(m)));
                    this.logger.d(this.TAG, 'marker is ready.');
                }));
                this.inited = true;
                this.updateInfoWindow();
                this.updateInfoWindowPosition();
            }));
        }
        else {
            zip(filter.has('icon'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setIcon(this.icons.create(v))));
            zip(filter.has('shadow'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setShadow(this.icons.create(v))));
            zip(filter.has('label'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setLabel(this.mlabels.create(v))));
            zip(filter.has('title'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setTitle(v)));
            zip(filter.has('extData'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setExtData(v)));
            zip(filter.has('clickable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setClickable(!!v)));
            zip(filter.has('draggable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setDraggable(!!v)));
            zip(filter.has('visible'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => (v ? m.show() : m.hide())));
            zip(filter.has('cursor'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setCursor(v)));
            zip(filter.has('animation'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setAnimation(v)));
            zip(filter.has('angle'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setAngle(v)));
            zip(filter.has('zIndex'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setzIndex(v)));
            zip(filter.has('shape'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setShape(v)));
            zip(filter.notEmpty('offset'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setOffset(this.pixels.create(v))));
            zip(filter.notEmpty('position'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setPosition(v)));
            zip(filter.has('showPositionPoint'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => {
                if (!!v) {
                    m.showPositionPoint();
                }
                else {
                    m.hidePositionPoint();
                }
            }));
            zip(filter.notEmpty('iconStyle'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => {
                if (changes.iconTheme && changes.iconTheme.currentValue) {
                    m.setIconThemeAndStyle(changes.iconTheme.currentValue, v);
                }
                else {
                    m.setIconStyle(v);
                }
            }));
            zip(filter.notEmpty('iconLabel'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setIconLabel(v)));
            zip(filter.notEmpty('containerClassNames'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => m.setContainerClassNames(v)));
        }
        zip(filter.has('isTop'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, m]) => m.setTop(!!v)));
        zip(filter.has('hidden'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, m]) => (v ? m.hide() : m.show())));
    }
    /**
     * @return {?}
     */
    ngAfterContentInit() {
        this.updateInfoWindow();
        this.infoWindowComponent.changes.subscribe((/**
         * @return {?}
         */
        () => this.updateInfoWindow()));
    }
    /**
     * @private
     * @return {?}
     */
    updateInfoWindow() {
        if (this.infoWindowComponent && this.inited) {
            if (this.infoWindowComponent.length > 1) {
                this.logger.e(this.TAG, 'Expected no more than 1 info window.');
                return;
            }
            /** @type {?} */
            const marker = this.os.get();
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            component => {
                component.hostMarker = marker;
            }));
        }
    }
    /**
     * @private
     * @return {?}
     */
    updateInfoWindowPosition() {
        if (this.infoWindowComponent && this.inited) {
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            component => {
                component.toggleOpen();
            }));
        }
    }
    /**
     * @return {?}
     */
    getOptions() {
        return getOptions(this, SimpleMarkerOptions);
    }
    /**
     * 获取已创建的 AMapUI 对象
     * @return {?}
     */
    get() {
        return this.os.get();
    }
}
UISimpleMarker.propDecorators = {
    iconTheme: [{ type: Input }],
    iconStyle: [{ type: Input }],
    iconLabel: [{ type: Input }],
    showPositionPoint: [{ type: Input }],
    containerClassNames: [{ type: Input }],
    position: [{ type: Input }],
    anchor: [{ type: Input }],
    offset: [{ type: Input }],
    icon: [{ type: Input }],
    topWhenClick: [{ type: Input }],
    raiseOnDrag: [{ type: Input }],
    visible: [{ type: Input }],
    zIndex: [{ type: Input }],
    angle: [{ type: Input }],
    autoRotation: [{ type: Input }],
    animation: [{ type: Input }],
    shadow: [{ type: Input }],
    title: [{ type: Input }],
    shape: [{ type: Input }],
    label: [{ type: Input }],
    isTop: [{ type: Input }],
    hidden: [{ type: Input }],
    inCluster: [{ type: Input }],
    openInfoWindow: [{ type: Input }],
    naReady: [{ type: Output }],
    naMouseOut: [{ type: Output }],
    naDragStart: [{ type: Output }],
    naDragging: [{ type: Output }],
    naDragEnd: [{ type: Output }],
    naMoving: [{ type: Output }],
    naMoveEnd: [{ type: Output }],
    naMoveAlong: [{ type: Output }],
    infoWindowComponent: [{ type: ContentChildren, args: [AmapInfoWindowComponent,] }]
};
if (false) {
    /** @type {?} */
    UISimpleMarker.prototype.TAG;
    /**
     * 样式主题
     * @type {?}
     */
    UISimpleMarker.prototype.iconTheme;
    /**
     * 背景图标样式
     * @type {?}
     */
    UISimpleMarker.prototype.iconStyle;
    /**
     * 图标前景文字
     * @type {?}
     */
    UISimpleMarker.prototype.iconLabel;
    /**
     * 是否显示定位点
     * @type {?}
     */
    UISimpleMarker.prototype.showPositionPoint;
    /**
     * 内建的Dom容器上附带的class，多个class name用空格分开
     * @type {?}
     */
    UISimpleMarker.prototype.containerClassNames;
    /**
     * 点标记在地图上显示的位置
     * @type {?}
     */
    UISimpleMarker.prototype.position;
    /**
     * 标记锚点
     * @type {?}
     */
    UISimpleMarker.prototype.anchor;
    /**
     * 点标记显示位置偏移量
     * @type {?}
     */
    UISimpleMarker.prototype.offset;
    /**
     * 需在点标记中显示的图标
     * @type {?}
     */
    UISimpleMarker.prototype.icon;
    /**
     * 鼠标点击时marker是否置顶
     * @type {?}
     */
    UISimpleMarker.prototype.topWhenClick;
    /**
     * 拖拽点标记时是否开启点标记离开地图的效果
     * @type {?}
     */
    UISimpleMarker.prototype.raiseOnDrag;
    /**
     * 点标记是否可见
     * @type {?}
     */
    UISimpleMarker.prototype.visible;
    /**
     * 点标记的叠加顺序
     * @type {?}
     */
    UISimpleMarker.prototype.zIndex;
    /**
     * 点标记的旋转角度
     * @type {?}
     */
    UISimpleMarker.prototype.angle;
    /**
     * 是否自动旋转
     * @type {?}
     */
    UISimpleMarker.prototype.autoRotation;
    /**
     * 点标记的动画效果
     * @type {?}
     */
    UISimpleMarker.prototype.animation;
    /**
     * 点标记阴影
     * @type {?}
     */
    UISimpleMarker.prototype.shadow;
    /**
     * 鼠标滑过点标记时的文字提示
     * @type {?}
     */
    UISimpleMarker.prototype.title;
    /**
     * 可点击区域
     * @type {?}
     */
    UISimpleMarker.prototype.shape;
    /**
     * 文本标注
     * @type {?}
     */
    UISimpleMarker.prototype.label;
    /**
     * 额外: 是否置顶
     * @type {?}
     */
    UISimpleMarker.prototype.isTop;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    UISimpleMarker.prototype.hidden;
    /**
     * 额外: 是否包含在点聚合中
     * @type {?}
     */
    UISimpleMarker.prototype.inCluster;
    /**
     * 额外: 点击时是否显示信息窗体
     * @type {?}
     */
    UISimpleMarker.prototype.openInfoWindow;
    /** @type {?} */
    UISimpleMarker.prototype.naReady;
    /** @type {?} */
    UISimpleMarker.prototype.naMouseOut;
    /** @type {?} */
    UISimpleMarker.prototype.naDragStart;
    /** @type {?} */
    UISimpleMarker.prototype.naDragging;
    /** @type {?} */
    UISimpleMarker.prototype.naDragEnd;
    /** @type {?} */
    UISimpleMarker.prototype.naMoving;
    /** @type {?} */
    UISimpleMarker.prototype.naMoveEnd;
    /** @type {?} */
    UISimpleMarker.prototype.naMoveAlong;
    /** @type {?} */
    UISimpleMarker.prototype.infoWindowComponent;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.subscription;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.binder;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.amaps;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.pixels;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.icons;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.mlabels;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.logger;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,