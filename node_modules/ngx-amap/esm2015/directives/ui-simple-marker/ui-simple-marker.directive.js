/**
 * @fileoverview added by tsickle
 * Generated from: directives/ui-simple-marker/ui-simple-marker.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, NgZone } from '@angular/core';
import { UISimpleMarkerService } from './ui-simple-marker.service';
import { UISimpleMarker } from './ui-simple-marker';
import { EventBinderService } from '../../shared/event-binder.service';
import { AMapService } from '../../shared/amap.service';
import { PixelService } from '../../shared/pixel.service';
import { IconService } from '../../shared/icon.service';
import { MarkerLabelService } from '../../shared/marker-label.service';
import { LoggerService } from '../../shared/logger/logger.service';
export class UISimpleMarkerDirective extends UISimpleMarker {
    /**
     * @param {?} os
     * @param {?} binder
     * @param {?} amaps
     * @param {?} pixels
     * @param {?} icons
     * @param {?} mlabels
     * @param {?} logger
     * @param {?} ngZone
     */
    constructor(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
        super(os, binder, amaps, pixels, icons, mlabels, logger, ngZone);
        this.os = os;
        this.binder = binder;
        this.amaps = amaps;
        this.pixels = pixels;
        this.icons = icons;
        this.mlabels = mlabels;
        this.logger = logger;
        this.ngZone = ngZone;
    }
}
UISimpleMarkerDirective.decorators = [
    { type: Directive, args: [{
                selector: 'ui-simple-marker',
                exportAs: 'simpleMarker',
                providers: [UISimpleMarkerService],
            },] }
];
/** @nocollapse */
UISimpleMarkerDirective.ctorParameters = () => [
    { type: UISimpleMarkerService },
    { type: EventBinderService },
    { type: AMapService },
    { type: PixelService },
    { type: IconService },
    { type: MarkerLabelService },
    { type: LoggerService },
    { type: NgZone }
];
if (false) {
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.binder;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.amaps;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.pixels;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.icons;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.mlabels;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.logger;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktc2ltcGxlLW1hcmtlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYW1hcC8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvdWktc2ltcGxlLW1hcmtlci91aS1zaW1wbGUtbWFya2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLE1BQU0sZUFBZSxDQUFDO0FBQ2xELE9BQU8sRUFBRSxxQkFBcUIsRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQ25FLE9BQU8sRUFBRSxjQUFjLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUNwRCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLDRCQUE0QixDQUFDO0FBQzFELE9BQU8sRUFBRSxXQUFXLEVBQUUsTUFBTSwyQkFBMkIsQ0FBQztBQUN4RCxPQUFPLEVBQUUsa0JBQWtCLEVBQUUsTUFBTSxtQ0FBbUMsQ0FBQztBQUN2RSxPQUFPLEVBQUUsYUFBYSxFQUFFLE1BQU0sb0NBQW9DLENBQUM7QUFPbkUsTUFBTSxPQUFPLHVCQUF3QixTQUFRLGNBQWM7Ozs7Ozs7Ozs7O0lBQ3pELFlBQ1ksRUFBeUIsRUFDekIsTUFBMEIsRUFDMUIsS0FBa0IsRUFDbEIsTUFBb0IsRUFDcEIsS0FBa0IsRUFDbEIsT0FBMkIsRUFDM0IsTUFBcUIsRUFDckIsTUFBYztRQUV4QixLQUFLLENBQUMsRUFBRSxFQUFFLE1BQU0sRUFBRSxLQUFLLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxPQUFPLEVBQUUsTUFBTSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBVHZELE9BQUUsR0FBRixFQUFFLENBQXVCO1FBQ3pCLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBQzFCLFVBQUssR0FBTCxLQUFLLENBQWE7UUFDbEIsV0FBTSxHQUFOLE1BQU0sQ0FBYztRQUNwQixVQUFLLEdBQUwsS0FBSyxDQUFhO1FBQ2xCLFlBQU8sR0FBUCxPQUFPLENBQW9CO1FBQzNCLFdBQU0sR0FBTixNQUFNLENBQWU7UUFDckIsV0FBTSxHQUFOLE1BQU0sQ0FBUTtJQUcxQixDQUFDOzs7WUFqQkYsU0FBUyxTQUFDO2dCQUNULFFBQVEsRUFBRSxrQkFBa0I7Z0JBQzVCLFFBQVEsRUFBRSxjQUFjO2dCQUN4QixTQUFTLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQzthQUNuQzs7OztZQWJRLHFCQUFxQjtZQUVyQixrQkFBa0I7WUFDbEIsV0FBVztZQUNYLFlBQVk7WUFDWixXQUFXO1lBQ1gsa0JBQWtCO1lBQ2xCLGFBQWE7WUFSRixNQUFNOzs7Ozs7O0lBaUJ0QixxQ0FBbUM7Ozs7O0lBQ25DLHlDQUFvQzs7Ozs7SUFDcEMsd0NBQTRCOzs7OztJQUM1Qix5Q0FBOEI7Ozs7O0lBQzlCLHdDQUE0Qjs7Ozs7SUFDNUIsMENBQXFDOzs7OztJQUNyQyx5Q0FBK0I7Ozs7O0lBQy9CLHlDQUF3QiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IERpcmVjdGl2ZSwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBVSVNpbXBsZU1hcmtlclNlcnZpY2UgfSBmcm9tICcuL3VpLXNpbXBsZS1tYXJrZXIuc2VydmljZSc7XG5pbXBvcnQgeyBVSVNpbXBsZU1hcmtlciB9IGZyb20gJy4vdWktc2ltcGxlLW1hcmtlcic7XG5pbXBvcnQgeyBFdmVudEJpbmRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvZXZlbnQtYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQU1hcFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvYW1hcC5zZXJ2aWNlJztcbmltcG9ydCB7IFBpeGVsU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9waXhlbC5zZXJ2aWNlJztcbmltcG9ydCB7IEljb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2ljb24uc2VydmljZSc7XG5pbXBvcnQgeyBNYXJrZXJMYWJlbFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvbWFya2VyLWxhYmVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9sb2dnZXIvbG9nZ2VyLnNlcnZpY2UnO1xuXG5ARGlyZWN0aXZlKHtcbiAgc2VsZWN0b3I6ICd1aS1zaW1wbGUtbWFya2VyJyxcbiAgZXhwb3J0QXM6ICdzaW1wbGVNYXJrZXInLFxuICBwcm92aWRlcnM6IFtVSVNpbXBsZU1hcmtlclNlcnZpY2VdLFxufSlcbmV4cG9ydCBjbGFzcyBVSVNpbXBsZU1hcmtlckRpcmVjdGl2ZSBleHRlbmRzIFVJU2ltcGxlTWFya2VyIHtcbiAgY29uc3RydWN0b3IoXG4gICAgcHJvdGVjdGVkIG9zOiBVSVNpbXBsZU1hcmtlclNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGJpbmRlcjogRXZlbnRCaW5kZXJTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBhbWFwczogQU1hcFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIHBpeGVsczogUGl4ZWxTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBpY29uczogSWNvblNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIG1sYWJlbHM6IE1hcmtlckxhYmVsU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgbG9nZ2VyOiBMb2dnZXJTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBuZ1pvbmU6IE5nWm9uZSxcbiAgKSB7XG4gICAgc3VwZXIob3MsIGJpbmRlciwgYW1hcHMsIHBpeGVscywgaWNvbnMsIG1sYWJlbHMsIGxvZ2dlciwgbmdab25lKTtcbiAgfVxufVxuIl19