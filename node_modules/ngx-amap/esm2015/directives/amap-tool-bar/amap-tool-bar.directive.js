/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-tool-bar/amap-tool-bar.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { AmapToolBarService } from './amap-tool-bar.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
import { PixelService } from '../../shared/pixel.service';
import { AMapService } from '../../shared/amap.service';
/** @type {?} */
const TAG = 'amap-tool-bar';
/** @type {?} */
const ToolBarOptions = [
    'offset',
    'position',
    'ruler',
    'noIpLocate',
    'locate',
    'liteStyle',
    'direction',
    'autoPosition',
    'locationMarker',
    'useNative',
];
export class AmapToolBarDirective {
    /**
     * @param {?} os
     * @param {?} binder
     * @param {?} amaps
     * @param {?} pixels
     * @param {?} logger
     * @param {?} ngZone
     */
    constructor(os, binder, amaps, pixels, logger, ngZone) {
        this.os = os;
        this.binder = binder;
        this.amaps = amaps;
        this.pixels = pixels;
        this.logger = logger;
        this.ngZone = ngZone;
        /**
         * 额外: 是否隐藏
         */
        this.hidden = false;
        // amap-tool-bar events:
        this.naReady = new EventEmitter();
        this.inited = false;
        /** @type {?} */
        const target = this.os.get();
        this.naShow = this.binder.bindEvent(target, 'show');
        this.naHide = this.binder.bindEvent(target, 'hide');
        this.naLocation = this.binder.bindEvent(target, 'location');
        this.naZoomChanged = this.binder.bindEvent(target, 'zoomchanged');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.os.destroy();
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.amaps.get().subscribe((/**
         * @return {?}
         */
        () => {
            this.logger.d(TAG, 'initializing ...');
            /** @type {?} */
            const options = getOptions(this, ToolBarOptions);
            if (this.offset) {
                options.offset = this.pixels.create(this.offset);
            }
            this.logger.d(TAG, 'options:', options);
            this.os.create(options).subscribe((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                this.ngZone.run((/**
                 * @return {?}
                 */
                () => this.naReady.emit(m)));
                this.logger.d(TAG, 'toolbar is ready.');
            }));
            this.inited = true;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                this.hidden ? m.hide() : m.show();
            }));
        }));
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        /** @type {?} */
        const toolbar = this.get();
        if (!this.inited) {
            return;
        }
        zip(filter.notEmpty('offset'), toolbar).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, m]) => m.setOffset(this.pixels.create(v))));
        zip(filter.has('hidden'), toolbar).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, m]) => (v ? m.hide() : m.show())));
    }
    /**
     * 获取已创建的 AMap.ToolBar 对象
     * @return {?}
     */
    get() {
        return this.os.get();
    }
    /**
     * @return {?}
     */
    doLocation() {
        this.os.get().subscribe((/**
         * @param {?} toolbar
         * @return {?}
         */
        toolbar => {
            toolbar.doLocation();
        }));
    }
}
AmapToolBarDirective.decorators = [
    { type: Directive, args: [{
                selector: 'amap-tool-bar',
                exportAs: 'tool-bar',
                providers: [AmapToolBarService],
            },] }
];
/** @nocollapse */
AmapToolBarDirective.ctorParameters = () => [
    { type: AmapToolBarService },
    { type: EventBinderService },
    { type: AMapService },
    { type: PixelService },
    { type: LoggerService },
    { type: NgZone }
];
AmapToolBarDirective.propDecorators = {
    offset: [{ type: Input }],
    position: [{ type: Input }],
    ruler: [{ type: Input }],
    noIpLocate: [{ type: Input }],
    locate: [{ type: Input }],
    liteStyle: [{ type: Input }],
    direction: [{ type: Input }],
    autoPosition: [{ type: Input }],
    locationMarker: [{ type: Input }],
    useNative: [{ type: Input }],
    hidden: [{ type: Input }],
    naReady: [{ type: Output }],
    naShow: [{ type: Output }],
    naHide: [{ type: Output }],
    naLocation: [{ type: Output }],
    naZoomChanged: [{ type: Output }]
};
if (false) {
    /**
     * 相对于地图容器左上角的偏移量
     * @type {?}
     */
    AmapToolBarDirective.prototype.offset;
    /**
     * 控件停靠位置
     * LT: 左上角
     * RT: 右上角
     * LB: 左下角
     * RB: 右下角
     * @type {?}
     */
    AmapToolBarDirective.prototype.position;
    /**
     * 标尺键盘是否可见
     * @type {?}
     */
    AmapToolBarDirective.prototype.ruler;
    /**
     * 定位失败后，是否开启 IP 定位
     * @type {?}
     */
    AmapToolBarDirective.prototype.noIpLocate;
    /**
     * 是否显示定位按钮
     * @type {?}
     */
    AmapToolBarDirective.prototype.locate;
    /**
     * 是否使用精简模式
     * @type {?}
     */
    AmapToolBarDirective.prototype.liteStyle;
    /**
     * 方向键盘是否可见
     * @type {?}
     */
    AmapToolBarDirective.prototype.direction;
    /**
     * 是否自动定位，即地图初始化加载完成后，是否自动定位的用户所在地，仅在支持 HTML5 的浏览器中有效
     * @type {?}
     */
    AmapToolBarDirective.prototype.autoPosition;
    /**
     * 自定义定位图标，值为 Marker 对象
     * @type {?}
     */
    AmapToolBarDirective.prototype.locationMarker;
    /**
     * 是否使用高德定位 SDK 用来辅助优化定位效果
     * @type {?}
     */
    AmapToolBarDirective.prototype.useNative;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    AmapToolBarDirective.prototype.hidden;
    /** @type {?} */
    AmapToolBarDirective.prototype.naReady;
    /** @type {?} */
    AmapToolBarDirective.prototype.naShow;
    /** @type {?} */
    AmapToolBarDirective.prototype.naHide;
    /** @type {?} */
    AmapToolBarDirective.prototype.naLocation;
    /** @type {?} */
    AmapToolBarDirective.prototype.naZoomChanged;
    /**
     * @type {?}
     * @private
     */
    AmapToolBarDirective.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    AmapToolBarDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapToolBarDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapToolBarDirective.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapToolBarDirective.prototype.pixels;
    /**
     * @type {?}
     * @private
     */
    AmapToolBarDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapToolBarDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,