/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-polyline/amap-polyline.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { PathOverlayOptions, AMapPathOverlay } from '../../base/amap-path-overlay';
import { AmapPolylineService } from './amap-polyline.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
const TAG = 'amap-polyline';
/** @type {?} */
const PolylineOptions = [
    ...PathOverlayOptions,
    'isOutline',
    'outlineColor',
    'geodesic',
    'dirColor',
    'borderWeight',
    'showDir',
    'path',
];
export class AmapPolylineDirective extends AMapPathOverlay {
    /**
     * @param {?} os
     * @param {?} binder
     * @param {?} logger
     * @param {?} ngZone
     */
    constructor(os, binder, logger, ngZone) {
        super(os, binder);
        this.os = os;
        this.binder = binder;
        this.logger = logger;
        this.ngZone = ngZone;
        /**
         * 额外: 是否隐藏
         */
        this.hidden = false;
        /**
         * 额外: 是否开启编辑器
         */
        this.editor = false;
        // directive events:
        this.naReady = new EventEmitter();
        this.inited = false;
        /** @type {?} */
        const editor = this.os.getEditor();
        this.naEditorAddNode = this.binder.bindEvent(editor, 'addnode');
        this.naEditorRemoveNode = this.binder.bindEvent(editor, 'removenode');
        this.naEditorAdjust = this.binder.bindEvent(editor, 'adjust');
        this.naEditorEnd = this.binder.bindEvent(editor, 'end');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.os.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        /** @type {?} */
        const polyline = this.get();
        if (!this.inited) {
            this.logger.d(TAG, 'initializing ...');
            /** @type {?} */
            const options = this.options || getOptions(this, PolylineOptions);
            this.logger.d(TAG, 'options:', options);
            this.os.create(options).subscribe((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                this.ngZone.run((/**
                 * @return {?}
                 */
                () => this.naReady.emit(m)));
                this.logger.d(TAG, 'polyline is ready.');
            }));
            this.inited = true;
        }
        else {
            zip(filter.has('path'), polyline).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setPath(v)));
            zip(filter.has('options'), polyline).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setOptions(v || {})));
            zip(filter.has('extData'), polyline).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setExtData(v)));
        }
        zip(filter.has('hidden'), polyline).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, p]) => (v ? p.hide() : p.show())));
        filter.has('editor').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => this.os.toggleEditor(v)));
    }
    /**
     * 获取已创建的 AMap.Polyline 对象
     * @return {?}
     */
    get() {
        return this.os.get();
    }
}
AmapPolylineDirective.decorators = [
    { type: Directive, args: [{
                selector: 'amap-polyline',
                exportAs: 'polyline',
                providers: [AmapPolylineService],
            },] }
];
/** @nocollapse */
AmapPolylineDirective.ctorParameters = () => [
    { type: AmapPolylineService },
    { type: EventBinderService },
    { type: LoggerService },
    { type: NgZone }
];
AmapPolylineDirective.propDecorators = {
    isOutline: [{ type: Input }],
    outlineColor: [{ type: Input }],
    geodesic: [{ type: Input }],
    dirColor: [{ type: Input }],
    borderWeight: [{ type: Input }],
    showDir: [{ type: Input }],
    path: [{ type: Input }],
    hidden: [{ type: Input }],
    editor: [{ type: Input }],
    options: [{ type: Input }],
    naReady: [{ type: Output }],
    naEditorAddNode: [{ type: Output }],
    naEditorRemoveNode: [{ type: Output }],
    naEditorAdjust: [{ type: Output }],
    naEditorEnd: [{ type: Output }]
};
if (false) {
    /**
     * 线条是否带描边
     * @type {?}
     */
    AmapPolylineDirective.prototype.isOutline;
    /**
     * 线条描边颜色
     * @type {?}
     */
    AmapPolylineDirective.prototype.outlineColor;
    /**
     * 是否绘制成大地线
     * @type {?}
     */
    AmapPolylineDirective.prototype.geodesic;
    /**
     * 方向箭头颜色
     * @type {?}
     */
    AmapPolylineDirective.prototype.dirColor;
    /**
     * 描边的宽度
     * @type {?}
     */
    AmapPolylineDirective.prototype.borderWeight;
    /**
     * 是否延路径显示方向箭头
     * @type {?}
     */
    AmapPolylineDirective.prototype.showDir;
    /**
     * 折线的节点数组
     * @type {?}
     */
    AmapPolylineDirective.prototype.path;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    AmapPolylineDirective.prototype.hidden;
    /**
     * 额外: 是否开启编辑器
     * @type {?}
     */
    AmapPolylineDirective.prototype.editor;
    /**
     * 额外: 会覆盖其他属性的配置方式
     * @type {?}
     */
    AmapPolylineDirective.prototype.options;
    /** @type {?} */
    AmapPolylineDirective.prototype.naReady;
    /** @type {?} */
    AmapPolylineDirective.prototype.naEditorAddNode;
    /** @type {?} */
    AmapPolylineDirective.prototype.naEditorRemoveNode;
    /** @type {?} */
    AmapPolylineDirective.prototype.naEditorAdjust;
    /** @type {?} */
    AmapPolylineDirective.prototype.naEditorEnd;
    /**
     * @type {?}
     * @private
     */
    AmapPolylineDirective.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    AmapPolylineDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapPolylineDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapPolylineDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapPolylineDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,