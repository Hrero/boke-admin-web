/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-circle/amap-circle.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Output, EventEmitter, Directive, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { AMapCircle, CircleOptions } from '../../base/amap-circle';
import { AmapCircleService } from './amap-circle.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
const TAG = 'amap-circle';
export class AmapCircleDirective extends AMapCircle {
    /**
     * @param {?} os
     * @param {?} binder
     * @param {?} logger
     * @param {?} ngZone
     */
    constructor(os, binder, logger, ngZone) {
        super(os, binder);
        this.os = os;
        this.binder = binder;
        this.logger = logger;
        this.ngZone = ngZone;
        this.inited = false;
        /** @type {?} */
        const editor = this.os.getEditor();
        this.naEditorAddNode = this.binder.bindEvent(editor, 'addnode');
        this.naEditorRemoveNode = this.binder.bindEvent(editor, 'removenode');
        this.naEditorAdjust = this.binder.bindEvent(editor, 'adjust');
        this.naEditorEnd = this.binder.bindEvent(editor, 'end');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.os.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        /** @type {?} */
        const circle = this.get();
        if (!this.inited) {
            this.logger.d(TAG, 'initializing ...');
            /** @type {?} */
            const options = this.options || getOptions(this, CircleOptions);
            this.logger.d(TAG, 'options:', options);
            this.os.create(options).subscribe((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                this.ngZone.run((/**
                 * @return {?}
                 */
                () => this.naReady.emit(m)));
                this.logger.d(TAG, 'circle is ready.');
            }));
            this.inited = true;
        }
        else {
            zip(filter.has('center'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setCenter(v)));
            zip(filter.has('options'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setOptions(v || {})));
            zip(filter.has('radius'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setRadius(v)));
            zip(filter.has('extData'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setExtData(v)));
        }
        zip(filter.has('hidden'), circle).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, p]) => (v ? p.hide() : p.show())));
        filter.has('editor').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => this.os.toggleEditor(v)));
    }
    /**
     * 获取已创建的 AMap.Circle 对象
     * @return {?}
     */
    get() {
        return this.os.get();
    }
}
AmapCircleDirective.decorators = [
    { type: Directive, args: [{
                selector: 'amap-circle',
                exportAs: 'circle',
                providers: [AmapCircleService],
            },] }
];
/** @nocollapse */
AmapCircleDirective.ctorParameters = () => [
    { type: AmapCircleService },
    { type: EventBinderService },
    { type: LoggerService },
    { type: NgZone }
];
AmapCircleDirective.propDecorators = {
    naEditorAddNode: [{ type: Output }],
    naEditorRemoveNode: [{ type: Output }],
    naEditorAdjust: [{ type: Output }],
    naEditorEnd: [{ type: Output }]
};
if (false) {
    /** @type {?} */
    AmapCircleDirective.prototype.naEditorAddNode;
    /** @type {?} */
    AmapCircleDirective.prototype.naEditorRemoveNode;
    /** @type {?} */
    AmapCircleDirective.prototype.naEditorAdjust;
    /** @type {?} */
    AmapCircleDirective.prototype.naEditorEnd;
    /**
     * @type {?}
     * @private
     */
    AmapCircleDirective.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    AmapCircleDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapCircleDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapCircleDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapCircleDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,