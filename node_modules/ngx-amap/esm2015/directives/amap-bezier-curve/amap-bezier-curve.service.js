/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-bezier-curve/amap-bezier-curve.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ReplaySubject, zip } from 'rxjs';
import { map, switchMapTo } from 'rxjs/operators';
import { AMapService } from '../../shared/amap.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { PluginLoaderService } from '../../shared/plugin-loader.service';
/** @type {?} */
const TAG = 'AmapBezierCurve';
export class AmapBezierCurveService {
    /**
     * @param {?} amaps
     * @param {?} logger
     * @param {?} ngZone
     * @param {?} plugins
     */
    constructor(amaps, logger, ngZone, plugins) {
        this.amaps = amaps;
        this.logger = logger;
        this.ngZone = ngZone;
        this.plugins = plugins;
        this.bezierCurve$ = new ReplaySubject(1);
        this.editor$ = new ReplaySubject(1);
        this.polyEditor$ = new ReplaySubject(1);
    }
    /**
     * 获取贝瑟尔曲线
     * @return {?}
     */
    get() {
        return this.bezierCurve$.asObservable();
    }
    /**
     * 创建贝瑟尔曲线 AMap.BezierCurve
     * @param {?} options 选项
     * @return {?}
     */
    create(options) {
        return this.amaps.get().pipe(map((/**
         * @param {?} m
         * @return {?}
         */
        m => {
            options.map = m;
            this.bezierCurve = this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => new AMap.BezierCurve(options)));
            this.logger.d(TAG, 'new BezierCurve created.');
            this.bezierCurve$.next(this.bezierCurve);
            this.bezierCurve$.complete();
            return this.bezierCurve;
        })));
    }
    /**
     * 销毁贝瑟尔曲线
     * @return {?}
     */
    destroy() {
        this.get().subscribe((/**
         * @param {?} m
         * @return {?}
         */
        m => {
            m.setMap(null);
            this.logger.d(TAG, 'BezierCurve destroyed.');
            this.bezierCurve = null;
        }));
    }
    /**
     * @return {?}
     */
    getEditor() {
        // plugin is loading:
        return this.editor$.asObservable();
    }
    /**
     * @return {?}
     */
    getPolyEditor() {
        return this.polyEditor$.asObservable();
    }
    /**
     * 加载编辑插件
     * @return {?}
     */
    loadEditor() {
        return this.plugins.load('AMap.BezierCurveEditor');
    }
    /**
     * @return {?}
     */
    loadPolyEditor() {
        return this.plugins.load('AMap.PolyEditor');
    }
    /**
     * 创建编辑器
     * @return {?}
     */
    createEditor() {
        return this.loadEditor().pipe(switchMapTo(zip(this.amaps.get(), this.get())), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([m, p]) => {
            this.editor = this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => new AMap.BezierCurveEditor(m, p)));
            this.logger.d(TAG, 'new BezierCurveEditor created.');
            this.editor$.next(this.editor);
            this.editor$.complete();
            return this.editor;
        })));
    }
    /**
     * @return {?}
     */
    createPolyEditor() {
        return this.loadPolyEditor().pipe(switchMapTo(zip(this.amaps.get(), this.get())), map((/**
         * @param {?} __0
         * @return {?}
         */
        ([m, p]) => {
            this.polyEditor = this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            () => new AMap.PolyEditor(m, p)));
            this.logger.d(TAG, 'new PolyEditor created.');
            this.polyEditor$.next(this.polyEditor);
            this.polyEditor$.complete();
            return this.polyEditor;
        })));
    }
    /**
     * 开关编辑器
     * @param {?} v 开关选项
     * @return {?}
     */
    toggleEditor(v) {
        if (v && !this.editor) {
            this.createEditor().subscribe((/**
             * @param {?} editor
             * @return {?}
             */
            editor => editor.open()));
            return;
        }
        if (this.editor) {
            if (v) {
                this.editor.open();
            }
            else {
                this.editor.close();
            }
        }
    }
    /**
     * @param {?} v
     * @return {?}
     */
    togglePolyEditor(v) {
        if (v && !this.polyEditor) {
            this.createPolyEditor().subscribe((/**
             * @param {?} editor
             * @return {?}
             */
            editor => editor.open()));
            return;
        }
        if (this.polyEditor) {
            if (v) {
                this.polyEditor.open();
            }
            else {
                this.polyEditor.close();
            }
        }
    }
}
AmapBezierCurveService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AmapBezierCurveService.ctorParameters = () => [
    { type: AMapService },
    { type: LoggerService },
    { type: NgZone },
    { type: PluginLoaderService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.bezierCurve;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.bezierCurve$;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.editor;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.editor$;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.polyEditor;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.polyEditor$;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.plugins;
}
//# sourceMappingURL=data:application/json;base64,