/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-bezier-curve/amap-bezier-curve.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Directive, Input, Output, EventEmitter, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { PathOverlayOptions, AMapPathOverlay } from '../../base/amap-path-overlay';
import { AmapBezierCurveService } from './amap-bezier-curve.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
const TAG = 'amap-bezier-curve';
/** @type {?} */
const BezierCurveOptions = [
    ...PathOverlayOptions,
    'isOutline',
    'outlineColor',
    'dirColor',
    'borderWeight',
    'showDir',
    'path',
];
export class AmapBezierCurveDirective extends AMapPathOverlay {
    /**
     * @param {?} os
     * @param {?} binder
     * @param {?} logger
     * @param {?} ngZone
     */
    constructor(os, binder, logger, ngZone) {
        super(os, binder);
        this.os = os;
        this.binder = binder;
        this.logger = logger;
        this.ngZone = ngZone;
        /**
         * 额外: 是否隐藏
         */
        this.hidden = false;
        /**
         * 额外: 是否开启曲线编辑器
         */
        this.editor = false;
        /**
         * 额外: 是否开启折线编辑器
         */
        this.polyEditor = false;
        // directive events:
        this.naReady = new EventEmitter();
        this.inited = false;
        /** @type {?} */
        const editor = this.os.getEditor();
        /** @type {?} */
        const polyEditor = this.os.getPolyEditor();
        this.naEditorAddNode = this.binder.bindEvent(editor, 'addnode');
        this.naEditorRemoveNode = this.binder.bindEvent(editor, 'removenode');
        this.naEditorAdjust = this.binder.bindEvent(editor, 'adjust');
        this.naEditorEnd = this.binder.bindEvent(editor, 'end');
        this.naPolyEditorAddNode = this.binder.bindEvent(polyEditor, 'addnode');
        this.naPolyEditorRemoveNode = this.binder.bindEvent(polyEditor, 'removenode');
        this.naPolyEditorAdjust = this.binder.bindEvent(polyEditor, 'adjust');
        this.naPolyEditorEnd = this.binder.bindEvent(polyEditor, 'end');
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.os.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        /** @type {?} */
        const bezierCurve = this.get();
        if (!this.inited) {
            this.logger.d(TAG, 'initializing ...');
            /** @type {?} */
            const options = this.options || getOptions(this, BezierCurveOptions);
            this.logger.d(TAG, 'options:', options);
            this.os.create(options).subscribe((/**
             * @param {?} m
             * @return {?}
             */
            m => {
                this.ngZone.run((/**
                 * @return {?}
                 */
                () => this.naReady.emit(m)));
                this.logger.d(TAG, 'bezierCurve is ready.');
            }));
            this.inited = true;
        }
        else {
            zip(filter.has('path'), bezierCurve).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setPath(v)));
            zip(filter.has('options'), bezierCurve).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setOptions(v || {})));
            zip(filter.has('extData'), bezierCurve).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, p]) => p.setExtData(v)));
        }
        zip(filter.has('hidden'), bezierCurve).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, p]) => v ? p.hide() : p.show()));
        filter.has('editor').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => this.os.toggleEditor(v)));
        filter.has('polyEditor').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        v => this.os.togglePolyEditor(v)));
    }
    /**
     * 获取已创建的 AMap.BezierCurve 对象
     * @return {?}
     */
    get() {
        return this.os.get();
    }
}
AmapBezierCurveDirective.decorators = [
    { type: Directive, args: [{
                selector: 'amap-bezier-curve',
                exportAs: 'bezier-curve',
                providers: [AmapBezierCurveService],
            },] }
];
/** @nocollapse */
AmapBezierCurveDirective.ctorParameters = () => [
    { type: AmapBezierCurveService },
    { type: EventBinderService },
    { type: LoggerService },
    { type: NgZone }
];
AmapBezierCurveDirective.propDecorators = {
    isOutline: [{ type: Input }],
    outlineColor: [{ type: Input }],
    dirColor: [{ type: Input }],
    borderWeight: [{ type: Input }],
    showDir: [{ type: Input }],
    path: [{ type: Input }],
    hidden: [{ type: Input }],
    editor: [{ type: Input }],
    polyEditor: [{ type: Input }],
    options: [{ type: Input }],
    naReady: [{ type: Output }],
    naEditorAddNode: [{ type: Output }],
    naEditorRemoveNode: [{ type: Output }],
    naEditorAdjust: [{ type: Output }],
    naEditorEnd: [{ type: Output }],
    naPolyEditorAddNode: [{ type: Output }],
    naPolyEditorRemoveNode: [{ type: Output }],
    naPolyEditorAdjust: [{ type: Output }],
    naPolyEditorEnd: [{ type: Output }]
};
if (false) {
    /**
     * 线条是否带描边
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.isOutline;
    /**
     * 线条描边颜色
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.outlineColor;
    /**
     * 方向箭头颜色
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.dirColor;
    /**
     * 描边的宽度
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.borderWeight;
    /**
     * 是否延路径显示方向箭头
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.showDir;
    /**
     * 贝瑟尔曲线的路径
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.path;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.hidden;
    /**
     * 额外: 是否开启曲线编辑器
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.editor;
    /**
     * 额外: 是否开启折线编辑器
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.polyEditor;
    /**
     * 额外: 会覆盖其他属性的配置方式
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.options;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naReady;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naEditorAddNode;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naEditorRemoveNode;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naEditorAdjust;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naEditorEnd;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naPolyEditorAddNode;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naPolyEditorRemoveNode;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naPolyEditorAdjust;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naPolyEditorEnd;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveDirective.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    AmapBezierCurveDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapBezierCurveDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,