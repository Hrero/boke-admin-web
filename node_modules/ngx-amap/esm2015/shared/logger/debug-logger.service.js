/**
 * @fileoverview added by tsickle
 * Generated from: shared/logger/debug-logger.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, Inject } from '@angular/core';
import { NGX_AMAP_CONFIG } from '../ngx-amap-config';
export class DebugLoggerService {
    /**
     * @param {?=} config
     */
    constructor(config = {}) {
        this.config = config;
        this.debugTags = [];
        this.debugAll = true;
        if (config.debugTags) {
            if (config.debugTags === '*') {
                this.debugAll = true;
            }
            else {
                this.debugAll = false;
                this.debugTags = config.debugTags.split(',');
            }
        }
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    i(...args) {
        console.log(...args);
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    e(...args) {
        console.error(...args);
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    w(...args) {
        console.warn(...args);
    }
    /**
     * @param {?} tag
     * @param {...?} args
     * @return {?}
     */
    d(tag, ...args) {
        if (this.debugAll || this.debugTags.includes(tag)) {
            console.log(`[${tag}]`, ...args);
        }
    }
}
DebugLoggerService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
DebugLoggerService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGX_AMAP_CONFIG,] }] }
];
if (false) {
    /** @type {?} */
    DebugLoggerService.prototype.debugTags;
    /** @type {?} */
    DebugLoggerService.prototype.debugAll;
    /**
     * @type {?}
     * @private
     */
    DebugLoggerService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctbG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYW1hcC8iLCJzb3VyY2VzIjpbInNoYXJlZC9sb2dnZXIvZGVidWctbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSxPQUFPLEVBQUUsVUFBVSxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNuRCxPQUFPLEVBQWlCLGVBQWUsRUFBRSxNQUFNLG9CQUFvQixDQUFDO0FBR3BFLE1BQU0sT0FBTyxrQkFBa0I7Ozs7SUFJN0IsWUFBNkMsU0FBd0IsRUFBRTtRQUExQixXQUFNLEdBQU4sTUFBTSxDQUFvQjtRQUh2RSxjQUFTLEdBQWEsRUFBRSxDQUFDO1FBQ3pCLGFBQVEsR0FBRyxJQUFJLENBQUM7UUFHZCxJQUFJLE1BQU0sQ0FBQyxTQUFTLEVBQUU7WUFDcEIsSUFBSSxNQUFNLENBQUMsU0FBUyxLQUFLLEdBQUcsRUFBRTtnQkFDNUIsSUFBSSxDQUFDLFFBQVEsR0FBRyxJQUFJLENBQUM7YUFDdEI7aUJBQU07Z0JBQ0wsSUFBSSxDQUFDLFFBQVEsR0FBRyxLQUFLLENBQUM7Z0JBQ3RCLElBQUksQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLFNBQVMsQ0FBQyxLQUFLLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDOUM7U0FDRjtJQUNILENBQUM7Ozs7O0lBRUQsQ0FBQyxDQUFDLEdBQUcsSUFBVztRQUNkLE9BQU8sQ0FBQyxHQUFHLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUN2QixDQUFDOzs7OztJQUVELENBQUMsQ0FBQyxHQUFHLElBQVc7UUFDZCxPQUFPLENBQUMsS0FBSyxDQUFDLEdBQUcsSUFBSSxDQUFDLENBQUM7SUFDekIsQ0FBQzs7Ozs7SUFFRCxDQUFDLENBQUMsR0FBRyxJQUFXO1FBQ2QsT0FBTyxDQUFDLElBQUksQ0FBQyxHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3hCLENBQUM7Ozs7OztJQUVELENBQUMsQ0FBQyxHQUFXLEVBQUUsR0FBRyxJQUFXO1FBQzNCLElBQUksSUFBSSxDQUFDLFFBQVEsSUFBSSxJQUFJLENBQUMsU0FBUyxDQUFDLFFBQVEsQ0FBQyxHQUFHLENBQUMsRUFBRTtZQUNqRCxPQUFPLENBQUMsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUUsR0FBRyxJQUFJLENBQUMsQ0FBQztTQUNsQztJQUNILENBQUM7OztZQWhDRixVQUFVOzs7OzRDQUtJLE1BQU0sU0FBQyxlQUFlOzs7O0lBSG5DLHVDQUF5Qjs7SUFDekIsc0NBQWdCOzs7OztJQUVKLG9DQUEyRCIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUsIEluamVjdCB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgTmd4QW1hcENvbmZpZywgTkdYX0FNQVBfQ09ORklHIH0gZnJvbSAnLi4vbmd4LWFtYXAtY29uZmlnJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIERlYnVnTG9nZ2VyU2VydmljZSB7XG4gIGRlYnVnVGFnczogc3RyaW5nW10gPSBbXTtcbiAgZGVidWdBbGwgPSB0cnVlO1xuXG4gIGNvbnN0cnVjdG9yKEBJbmplY3QoTkdYX0FNQVBfQ09ORklHKSBwcml2YXRlIGNvbmZpZzogTmd4QW1hcENvbmZpZyA9IHt9KSB7XG4gICAgaWYgKGNvbmZpZy5kZWJ1Z1RhZ3MpIHtcbiAgICAgIGlmIChjb25maWcuZGVidWdUYWdzID09PSAnKicpIHtcbiAgICAgICAgdGhpcy5kZWJ1Z0FsbCA9IHRydWU7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0aGlzLmRlYnVnQWxsID0gZmFsc2U7XG4gICAgICAgIHRoaXMuZGVidWdUYWdzID0gY29uZmlnLmRlYnVnVGFncy5zcGxpdCgnLCcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGkoLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zb2xlLmxvZyguLi5hcmdzKTtcbiAgfVxuXG4gIGUoLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zb2xlLmVycm9yKC4uLmFyZ3MpO1xuICB9XG5cbiAgdyguLi5hcmdzOiBhbnlbXSkge1xuICAgIGNvbnNvbGUud2FybiguLi5hcmdzKTtcbiAgfVxuXG4gIGQodGFnOiBzdHJpbmcsIC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgaWYgKHRoaXMuZGVidWdBbGwgfHwgdGhpcy5kZWJ1Z1RhZ3MuaW5jbHVkZXModGFnKSkge1xuICAgICAgY29uc29sZS5sb2coYFske3RhZ31dYCwgLi4uYXJncyk7XG4gICAgfVxuICB9XG59XG4iXX0=