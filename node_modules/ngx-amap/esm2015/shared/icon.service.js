/**
 * @fileoverview added by tsickle
 * Generated from: shared/icon.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PixelService } from './pixel.service';
import { SizeService } from './size.service';
import * as i0 from "@angular/core";
import * as i1 from "./pixel.service";
import * as i2 from "./size.service";
export class IconService {
    /**
     * @param {?} pixels
     * @param {?} sizes
     */
    constructor(pixels, sizes) {
        this.pixels = pixels;
        this.sizes = sizes;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    create(options) {
        if (!options) {
            return null;
        }
        if (typeof options === 'string') {
            return options;
        }
        if (options instanceof AMap.Icon) {
            return options;
        }
        /** @type {?} */
        const iconOption = {};
        const { size, image, imageOffset, imageSize } = options;
        if (size !== undefined) {
            iconOption.size = this.sizes.create(size);
        }
        if (image !== undefined) {
            iconOption.image = image;
        }
        if (imageOffset !== undefined) {
            iconOption.imageOffset = this.pixels.create(imageOffset);
        }
        if (imageSize !== undefined) {
            iconOption.imageSize = this.sizes.create(imageSize);
        }
        return new AMap.Icon(iconOption);
    }
}
IconService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
IconService.ctorParameters = () => [
    { type: PixelService },
    { type: SizeService }
];
/** @nocollapse */ IconService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function IconService_Factory() { return new IconService(i0.ɵɵinject(i1.PixelService), i0.ɵɵinject(i2.SizeService)); }, token: IconService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    IconService.prototype.pixels;
    /**
     * @type {?}
     * @private
     */
    IconService.prototype.sizes;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaWNvbi5zZXJ2aWNlLmpzIiwic291cmNlUm9vdCI6Im5nOi8vbmd4LWFtYXAvIiwic291cmNlcyI6WyJzaGFyZWQvaWNvbi5zZXJ2aWNlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUMzQyxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFDL0MsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLGdCQUFnQixDQUFDOzs7O0FBTTdDLE1BQU0sT0FBTyxXQUFXOzs7OztJQUN0QixZQUFvQixNQUFvQixFQUFVLEtBQWtCO1FBQWhELFdBQU0sR0FBTixNQUFNLENBQWM7UUFBVSxVQUFLLEdBQUwsS0FBSyxDQUFhO0lBQUcsQ0FBQzs7Ozs7SUFFeEUsTUFBTSxDQUFDLE9BQW1DO1FBQ3hDLElBQUksQ0FBQyxPQUFPLEVBQUU7WUFDWixPQUFPLElBQUksQ0FBQztTQUNiO1FBRUQsSUFBSSxPQUFPLE9BQU8sS0FBSyxRQUFRLEVBQUU7WUFDL0IsT0FBTyxPQUFPLENBQUM7U0FDaEI7UUFFRCxJQUFJLE9BQU8sWUFBWSxJQUFJLENBQUMsSUFBSSxFQUFFO1lBQ2hDLE9BQU8sT0FBTyxDQUFDO1NBQ2hCOztjQUVLLFVBQVUsR0FBc0IsRUFBRTtjQUNsQyxFQUFFLElBQUksRUFBRSxLQUFLLEVBQUUsV0FBVyxFQUFFLFNBQVMsRUFBRSxHQUFHLE9BQU87UUFDdkQsSUFBSSxJQUFJLEtBQUssU0FBUyxFQUFFO1lBQ3RCLFVBQVUsQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLENBQUM7U0FDM0M7UUFDRCxJQUFJLEtBQUssS0FBSyxTQUFTLEVBQUU7WUFDdkIsVUFBVSxDQUFDLEtBQUssR0FBRyxLQUFLLENBQUM7U0FDMUI7UUFDRCxJQUFJLFdBQVcsS0FBSyxTQUFTLEVBQUU7WUFDN0IsVUFBVSxDQUFDLFdBQVcsR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxXQUFXLENBQUMsQ0FBQztTQUMxRDtRQUNELElBQUksU0FBUyxLQUFLLFNBQVMsRUFBRTtZQUMzQixVQUFVLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLFNBQVMsQ0FBQyxDQUFDO1NBQ3JEO1FBQ0QsT0FBTyxJQUFJLElBQUksQ0FBQyxJQUFJLENBQUMsVUFBVSxDQUFDLENBQUM7SUFDbkMsQ0FBQzs7O1lBbENGLFVBQVUsU0FBQztnQkFDVixVQUFVLEVBQUUsTUFBTTthQUNuQjs7OztZQU5RLFlBQVk7WUFDWixXQUFXOzs7Ozs7OztJQU9OLDZCQUE0Qjs7Ozs7SUFBRSw0QkFBMEIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQaXhlbFNlcnZpY2UgfSBmcm9tICcuL3BpeGVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgU2l6ZVNlcnZpY2UgfSBmcm9tICcuL3NpemUuc2VydmljZSc7XG5pbXBvcnQgeyBJSWNvbiB9IGZyb20gJy4uL2ludGVyZmFjZXMnO1xuXG5ASW5qZWN0YWJsZSh7XG4gIHByb3ZpZGVkSW46ICdyb290Jyxcbn0pXG5leHBvcnQgY2xhc3MgSWNvblNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBpeGVsczogUGl4ZWxTZXJ2aWNlLCBwcml2YXRlIHNpemVzOiBTaXplU2VydmljZSkge31cblxuICBjcmVhdGUob3B0aW9uczogc3RyaW5nIHwgQU1hcC5JY29uIHwgSUljb24pOiBzdHJpbmcgfCBBTWFwLkljb24gfCBudWxsIHtcbiAgICBpZiAoIW9wdGlvbnMpIHtcbiAgICAgIHJldHVybiBudWxsO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2Ygb3B0aW9ucyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBvcHRpb25zO1xuICAgIH1cblxuICAgIGlmIChvcHRpb25zIGluc3RhbmNlb2YgQU1hcC5JY29uKSB7XG4gICAgICByZXR1cm4gb3B0aW9ucztcbiAgICB9XG5cbiAgICBjb25zdCBpY29uT3B0aW9uOiBBTWFwLkljb24uT3B0aW9ucyA9IHt9O1xuICAgIGNvbnN0IHsgc2l6ZSwgaW1hZ2UsIGltYWdlT2Zmc2V0LCBpbWFnZVNpemUgfSA9IG9wdGlvbnM7XG4gICAgaWYgKHNpemUgIT09IHVuZGVmaW5lZCkge1xuICAgICAgaWNvbk9wdGlvbi5zaXplID0gdGhpcy5zaXplcy5jcmVhdGUoc2l6ZSk7XG4gICAgfVxuICAgIGlmIChpbWFnZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpY29uT3B0aW9uLmltYWdlID0gaW1hZ2U7XG4gICAgfVxuICAgIGlmIChpbWFnZU9mZnNldCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpY29uT3B0aW9uLmltYWdlT2Zmc2V0ID0gdGhpcy5waXhlbHMuY3JlYXRlKGltYWdlT2Zmc2V0KTtcbiAgICB9XG4gICAgaWYgKGltYWdlU2l6ZSAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICBpY29uT3B0aW9uLmltYWdlU2l6ZSA9IHRoaXMuc2l6ZXMuY3JlYXRlKGltYWdlU2l6ZSk7XG4gICAgfVxuICAgIHJldHVybiBuZXcgQU1hcC5JY29uKGljb25PcHRpb24pO1xuICB9XG59XG4iXX0=