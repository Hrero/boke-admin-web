/**
 * @fileoverview added by tsickle
 * Generated from: shared/marker-label.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable } from '@angular/core';
import { PixelService } from './pixel.service';
import * as i0 from "@angular/core";
import * as i1 from "./pixel.service";
export class MarkerLabelService {
    /**
     * @param {?} pixel
     */
    constructor(pixel) {
        this.pixel = pixel;
    }
    /**
     * @param {?} options
     * @return {?}
     */
    create(options) {
        if (options) {
            /** @type {?} */
            const label = {};
            if (options.content !== undefined) {
                label.content = options.content;
            }
            if (options.offset !== undefined) {
                if (options.offset instanceof AMap.Pixel) {
                    label.offset = options.offset;
                }
                else {
                    label.offset = this.pixel.create(options.offset);
                }
            }
            if (options.direction !== undefined) {
                label.direction = options.direction;
            }
            return label;
        }
        return null;
    }
}
MarkerLabelService.decorators = [
    { type: Injectable, args: [{
                providedIn: 'root',
            },] }
];
/** @nocollapse */
MarkerLabelService.ctorParameters = () => [
    { type: PixelService }
];
/** @nocollapse */ MarkerLabelService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function MarkerLabelService_Factory() { return new MarkerLabelService(i0.ɵɵinject(i1.PixelService)); }, token: MarkerLabelService, providedIn: "root" });
if (false) {
    /**
     * @type {?}
     * @private
     */
    MarkerLabelService.prototype.pixel;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibWFya2VyLWxhYmVsLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYW1hcC8iLCJzb3VyY2VzIjpbInNoYXJlZC9tYXJrZXItbGFiZWwuc2VydmljZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLE9BQU8sRUFBRSxVQUFVLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDM0MsT0FBTyxFQUFFLFlBQVksRUFBRSxNQUFNLGlCQUFpQixDQUFDOzs7QUFNL0MsTUFBTSxPQUFPLGtCQUFrQjs7OztJQUM3QixZQUFvQixLQUFtQjtRQUFuQixVQUFLLEdBQUwsS0FBSyxDQUFjO0lBQUcsQ0FBQzs7Ozs7SUFFM0MsTUFBTSxDQUFDLE9BQXFCO1FBQzFCLElBQUksT0FBTyxFQUFFOztrQkFDTCxLQUFLLEdBQXNCLEVBQUU7WUFDbkMsSUFBSSxPQUFPLENBQUMsT0FBTyxLQUFLLFNBQVMsRUFBRTtnQkFDakMsS0FBSyxDQUFDLE9BQU8sR0FBRyxPQUFPLENBQUMsT0FBTyxDQUFDO2FBQ2pDO1lBQ0QsSUFBSSxPQUFPLENBQUMsTUFBTSxLQUFLLFNBQVMsRUFBRTtnQkFDaEMsSUFBSSxPQUFPLENBQUMsTUFBTSxZQUFZLElBQUksQ0FBQyxLQUFLLEVBQUU7b0JBQ3hDLEtBQUssQ0FBQyxNQUFNLEdBQUcsT0FBTyxDQUFDLE1BQU0sQ0FBQztpQkFDL0I7cUJBQU07b0JBQ0wsS0FBSyxDQUFDLE1BQU0sR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxPQUFPLENBQUMsTUFBTSxDQUFDLENBQUM7aUJBQ2xEO2FBQ0Y7WUFDRCxJQUFJLE9BQU8sQ0FBQyxTQUFTLEtBQUssU0FBUyxFQUFFO2dCQUNuQyxLQUFLLENBQUMsU0FBUyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7YUFDckM7WUFDRCxPQUFPLEtBQUssQ0FBQztTQUNkO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDOzs7WUF6QkYsVUFBVSxTQUFDO2dCQUNWLFVBQVUsRUFBRSxNQUFNO2FBQ25COzs7O1lBTFEsWUFBWTs7Ozs7Ozs7SUFPUCxtQ0FBMkIiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBQaXhlbFNlcnZpY2UgfSBmcm9tICcuL3BpeGVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgSU1hcmtlckxhYmVsIH0gZnJvbSAnLi4vaW50ZXJmYWNlcyc7XG5cbkBJbmplY3RhYmxlKHtcbiAgcHJvdmlkZWRJbjogJ3Jvb3QnLFxufSlcbmV4cG9ydCBjbGFzcyBNYXJrZXJMYWJlbFNlcnZpY2Uge1xuICBjb25zdHJ1Y3Rvcihwcml2YXRlIHBpeGVsOiBQaXhlbFNlcnZpY2UpIHt9XG5cbiAgY3JlYXRlKG9wdGlvbnM6IElNYXJrZXJMYWJlbCk6IEFNYXAuTWFya2VyLkxhYmVsIHwgbnVsbCB7XG4gICAgaWYgKG9wdGlvbnMpIHtcbiAgICAgIGNvbnN0IGxhYmVsOiBBTWFwLk1hcmtlci5MYWJlbCA9IHt9O1xuICAgICAgaWYgKG9wdGlvbnMuY29udGVudCAhPT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIGxhYmVsLmNvbnRlbnQgPSBvcHRpb25zLmNvbnRlbnQ7XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5vZmZzZXQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBpZiAob3B0aW9ucy5vZmZzZXQgaW5zdGFuY2VvZiBBTWFwLlBpeGVsKSB7XG4gICAgICAgICAgbGFiZWwub2Zmc2V0ID0gb3B0aW9ucy5vZmZzZXQ7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGFiZWwub2Zmc2V0ID0gdGhpcy5waXhlbC5jcmVhdGUob3B0aW9ucy5vZmZzZXQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAob3B0aW9ucy5kaXJlY3Rpb24gIT09IHVuZGVmaW5lZCkge1xuICAgICAgICBsYWJlbC5kaXJlY3Rpb24gPSBvcHRpb25zLmRpcmVjdGlvbjtcbiAgICAgIH1cbiAgICAgIHJldHVybiBsYWJlbDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbn1cbiJdfQ==