/**
 * @fileoverview added by tsickle
 * Generated from: shared/amap-loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { LoggerService } from './logger/logger.service';
import { NGX_AMAP_CONFIG } from './ngx-amap-config';
import { ReplaySubject } from 'rxjs';
/** @type {?} */
const TAG = 'AMapLoader';
export class AMapLoaderService {
    /**
     * @param {?=} config
     * @param {?=} logger
     */
    constructor(config = {}, logger) {
        this.config = config;
        this.logger = logger;
        this.defaultProtocol = 'https';
        this.defaultVersion = '1.4.15';
        this.defaultUIVersion = '1.0.11';
        this.config = config || {};
    }
    /**
     * @return {?}
     */
    load() {
        if (this.loading$) {
            return this.loading$.asObservable();
        }
        this.logger.d(TAG, 'loading AMap API ...');
        this.loading$ = new ReplaySubject();
        /** @type {?} */
        const callbackName = '_NgxAmapAPILoader';
        /** @type {?} */
        const script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.defer = true;
        script.src = this.getSrcFromConfig(callbackName);
        script.onerror = (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.logger.e('failed to load AMap API.');
            this.loading$.error(err);
        });
        window[callbackName] = (/**
         * @return {?}
         */
        () => {
            this.logger.d(TAG, 'loading AMap API COMPLETE');
            this.loading$.next();
            this.loading$.complete();
        });
        document.body.appendChild(script);
        return this.loading$.asObservable();
    }
    /**
     * @return {?}
     */
    loadUI() {
        if (this.uiLoading$) {
            return this.uiLoading$.asObservable();
        }
        this.logger.d(TAG, 'loading AMap UI ...');
        this.uiLoading$ = new ReplaySubject();
        /** @type {?} */
        const uiScript = document.createElement('script');
        uiScript.type = 'text/javascript';
        uiScript.async = true;
        uiScript.defer = true;
        uiScript.src = this.getUISrcFromConfig();
        uiScript.onerror = (/**
         * @param {?} err
         * @return {?}
         */
        (err) => {
            this.logger.e('failed to load AMap API.');
        });
        uiScript.onload = (/**
         * @return {?}
         */
        () => {
            // tslint:disable-next-line: no-string-literal
            window['initAMapUI']();
            this.logger.d(TAG, 'loading AMap UI COMPLETE');
            this.uiLoading$.next();
            this.uiLoading$.complete();
        });
        document.body.appendChild(uiScript);
        return this.uiLoading$.asObservable();
    }
    /**
     * @private
     * @param {?} callbackName
     * @return {?}
     */
    getSrcFromConfig(callbackName) {
        /** @type {?} */
        const urlBase = `${this.config.protocol || this.defaultProtocol}://webapi.amap.com/maps`;
        /** @type {?} */
        const queryParams = {
            v: this.config.apiVersion || this.defaultVersion,
            callback: callbackName,
            key: this.config.apiKey,
        };
        /** @type {?} */
        const params = Object.keys(queryParams)
            .filter((/**
         * @param {?} k
         * @return {?}
         */
        (k) => queryParams[k] != null))
            .filter((/**
         * @param {?} k
         * @return {?}
         */
        (k) => {
            // remove empty arrays
            return (!Array.isArray(queryParams[k]) ||
                (Array.isArray(queryParams[k]) && queryParams[k].length > 0));
        }))
            .map((/**
         * @param {?} k
         * @return {?}
         */
        (k) => {
            // join arrays as comma seperated strings
            /** @type {?} */
            const i = queryParams[k];
            if (Array.isArray(i)) {
                return { key: k, value: i.join(',') };
            }
            return { key: k, value: queryParams[k] };
        }))
            .map((/**
         * @param {?} entry
         * @return {?}
         */
        (entry) => `${entry.key}=${entry.value}`))
            .join('&');
        return `${urlBase}?${params}`;
    }
    /**
     * @private
     * @return {?}
     */
    getUISrcFromConfig() {
        // tslint:disable-next-line: max-line-length
        /** @type {?} */
        const urlBase = `${this.config.protocol ||
            this.defaultProtocol}://webapi.amap.com/ui/1.0/main-async.js?v=${this.config.uiVersion ||
            this.defaultUIVersion}`;
        return urlBase;
    }
}
AMapLoaderService.decorators = [
    { type: Injectable }
];
/** @nocollapse */
AMapLoaderService.ctorParameters = () => [
    { type: undefined, decorators: [{ type: Inject, args: [NGX_AMAP_CONFIG,] }] },
    { type: LoggerService }
];
if (false) {
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.defaultProtocol;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.defaultVersion;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.defaultUIVersion;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.loading$;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.uiLoading$;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.logger;
}
//# sourceMappingURL=data:application/json;base64,