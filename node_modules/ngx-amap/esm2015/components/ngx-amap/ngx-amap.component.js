/**
 * @fileoverview added by tsickle
 * Generated from: components/ngx-amap/ngx-amap.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, ElementRef, Output, EventEmitter, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { AMapService } from '../../shared/amap.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { PluginLoaderService } from '../../shared/plugin-loader.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
const TAG = 'ngx-amap';
/** @type {?} */
const ALL_OPTIONS = [
    'view',
    'layers',
    'zoom',
    'center',
    'labelzIndex',
    'zooms',
    'lang',
    'defaultCursor',
    'crs',
    'animateEnable',
    'isHotspot',
    'defaultLayer',
    'rotateEnable',
    'resizeEnable',
    'showIndoorMap',
    'indoorMap',
    'expandZoomRange',
    'dragEnable',
    'zoomEnable',
    'doubleClickZoom',
    'keyboardEnable',
    'jogEnable',
    'scrollWheel',
    'touchZoom',
    'touchZoomCenter',
    'mapStyle',
    'features',
    'showBuildingBlock',
    'viewMode',
    'pitch',
    'pitchEnable',
    'buildingAnimation',
    'skyColor',
    'preloadMode',
    'mask',
    'maxPitch',
    'rotation',
    'forceVector',
    'gridMapForeign',
    'vectorMapForeign',
];
export class NgxAmapComponent {
    /**
     * @param {?} el
     * @param {?} amap
     * @param {?} pluginLoader
     * @param {?} logger
     * @param {?} binder
     * @param {?} ngZone
     */
    constructor(el, amap, pluginLoader, logger, binder, ngZone) {
        this.el = el;
        this.amap = amap;
        this.pluginLoader = pluginLoader;
        this.logger = logger;
        this.binder = binder;
        this.ngZone = ngZone;
        // ---- Map Events ----
        this.naReady = new EventEmitter();
        this.naPluginsLoaded = new EventEmitter();
        this.inited = false;
        /** @type {?} */
        const m = this.amap.get();
        this.naComplete = this.binder.bindEvent(m, 'complete');
        this.naClick = this.binder.bindEvent(m, 'click');
        this.naDblClick = this.binder.bindEvent(m, 'dblclick');
        this.naRightClick = this.binder.bindEvent(m, 'rightclick');
        this.naMouseMove = this.binder.bindEvent(m, 'mousemove');
        this.naMouseOver = this.binder.bindEvent(m, 'mouseover');
        this.naMouseWheel = this.binder.bindEvent(m, 'mousewheel');
        this.naMouseUp = this.binder.bindEvent(m, 'mouseup');
        this.naMouseOut = this.binder.bindEvent(m, 'mouseout');
        this.naMouseDown = this.binder.bindEvent(m, 'mousedown');
        this.naTouchStart = this.binder.bindEvent(m, 'touchstart');
        this.naTouchMove = this.binder.bindEvent(m, 'touchmove');
        this.naTouchEnd = this.binder.bindEvent(m, 'touchend');
        this.naHotspotClick = this.binder.bindEvent(m, 'hotspotclick');
        this.naHotspotOver = this.binder.bindEvent(m, 'hotspotover');
        this.naHotspotOut = this.binder.bindEvent(m, 'hotspotout');
        this.naDragStart = this.binder.bindEvent(m, 'dragstart');
        this.naDragging = this.binder.bindEvent(m, 'dragging');
        this.naDragEnd = this.binder.bindEvent(m, 'dragend');
        this.naResize = this.binder.bindEvent(m, 'resize');
        this.naZoomStart = this.binder.bindEvent(m, 'zoomstart');
        this.naZoomEnd = this.binder.bindEvent(m, 'zoomend');
        this.naZoomChange = this.binder.bindEvent(m, 'zoomchange');
        this.naMoveStart = this.binder.bindEvent(m, 'movestart');
        this.naMoveEnd = this.binder.bindEvent(m, 'moveend');
        this.naMove = this.binder.bindEvent(m, 'mapmove');
    }
    /**
     * @return {?}
     */
    ngOnInit() {
        this.logger.d(TAG, 'initializing ...');
        /** @type {?} */
        const container = this.el.nativeElement.querySelector('div.ngx-amap-container-inner');
        /** @type {?} */
        const options = getOptions(this, ALL_OPTIONS);
        this.logger.d(TAG, 'options:', options);
        this.amap.create(container, options).subscribe((/**
         * @param {?} amap
         * @return {?}
         */
        amap => {
            this.logger.d(TAG, 'map is ready.');
            this.ngZone.run((/**
             * @return {?}
             */
            () => this.naReady.emit(amap)));
        }));
        this.inited = true;
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        this.amap.destroy();
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        /** @type {?} */
        const amap = this.get();
        if (this.inited) {
            zip(filter.has('zoom'), amap).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => {
                this.logger.d(TAG, 'setZoom:', v);
                m.setZoom(v);
            }));
            zip(filter.has('center'), amap).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, m]) => {
                this.logger.d(TAG, 'setCenter:', v);
                m.setCenter(v);
            }));
        }
        // Not included in OPTIONS
        zip(filter.has('city'), amap).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, m]) => {
            m.setCity(v, (/**
             * @return {?}
             */
            () => {
                this.logger.d(TAG, 'setCity:', v);
            }));
        }));
        zip(filter.notEmpty('plugins'), amap).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        ([v, m]) => {
            this.pluginLoader.load(v).subscribe((/**
             * @return {?}
             */
            () => {
                this.logger.d(TAG, 'plugins loaded.');
                this.ngZone.run((/**
                 * @return {?}
                 */
                () => this.naPluginsLoaded.emit(m)));
            }));
        }));
    }
    /**
     * 获取已创建的 AMap.Map 对象
     * @return {?}
     */
    get() {
        return this.amap.get();
    }
}
NgxAmapComponent.decorators = [
    { type: Component, args: [{
                selector: 'ngx-amap',
                exportAs: 'amap',
                template: "<div class='ngx-amap-container-inner'></div>\n<div class='ngx-amap-content'>\n  <ng-content></ng-content>\n</div>",
                providers: [AMapService, PluginLoaderService],
                styles: [".ngx-amap-container-inner{width:inherit;height:inherit}.ngx-amap-content{display:none}"]
            }] }
];
/** @nocollapse */
NgxAmapComponent.ctorParameters = () => [
    { type: ElementRef },
    { type: AMapService },
    { type: PluginLoaderService },
    { type: LoggerService },
    { type: EventBinderService },
    { type: NgZone }
];
NgxAmapComponent.propDecorators = {
    view: [{ type: Input }],
    layers: [{ type: Input }],
    zoom: [{ type: Input }],
    center: [{ type: Input }],
    labelzIndex: [{ type: Input }],
    zooms: [{ type: Input }],
    lang: [{ type: Input }],
    defaultCursor: [{ type: Input }],
    crs: [{ type: Input }],
    animateEnable: [{ type: Input }],
    isHotspot: [{ type: Input }],
    defaultLayer: [{ type: Input }],
    rotateEnable: [{ type: Input }],
    resizeEnable: [{ type: Input }],
    showIndoorMap: [{ type: Input }],
    indoorMap: [{ type: Input }],
    expandZoomRange: [{ type: Input }],
    dragEnable: [{ type: Input }],
    zoomEnable: [{ type: Input }],
    doubleClickZoom: [{ type: Input }],
    keyboardEnable: [{ type: Input }],
    jogEnable: [{ type: Input }],
    scrollWheel: [{ type: Input }],
    touchZoom: [{ type: Input }],
    touchZoomCenter: [{ type: Input }],
    mapStyle: [{ type: Input }],
    features: [{ type: Input }],
    showBuildingBlock: [{ type: Input }],
    viewMode: [{ type: Input }],
    pitch: [{ type: Input }],
    pitchEnable: [{ type: Input }],
    buildingAnimation: [{ type: Input }],
    skyColor: [{ type: Input }],
    preloadMode: [{ type: Input }],
    mask: [{ type: Input }],
    maxPitch: [{ type: Input }],
    rotation: [{ type: Input }],
    forceVector: [{ type: Input }],
    gridMapForeign: [{ type: Input }],
    vectorMapForeign: [{ type: Input }],
    city: [{ type: Input }],
    name: [{ type: Input }],
    plugins: [{ type: Input }],
    naReady: [{ type: Output }],
    naComplete: [{ type: Output }],
    naClick: [{ type: Output }],
    naDblClick: [{ type: Output }],
    naRightClick: [{ type: Output }],
    naMouseMove: [{ type: Output }],
    naMouseOver: [{ type: Output }],
    naMouseWheel: [{ type: Output }],
    naMouseUp: [{ type: Output }],
    naMouseOut: [{ type: Output }],
    naMouseDown: [{ type: Output }],
    naTouchStart: [{ type: Output }],
    naTouchMove: [{ type: Output }],
    naTouchEnd: [{ type: Output }],
    naHotspotClick: [{ type: Output }],
    naHotspotOver: [{ type: Output }],
    naHotspotOut: [{ type: Output }],
    naDragStart: [{ type: Output }],
    naDragging: [{ type: Output }],
    naDragEnd: [{ type: Output }],
    naResize: [{ type: Output }],
    naZoomStart: [{ type: Output }],
    naZoomEnd: [{ type: Output }],
    naZoomChange: [{ type: Output }],
    naMoveStart: [{ type: Output }],
    naMoveEnd: [{ type: Output }],
    naMove: [{ type: Output }],
    naPluginsLoaded: [{ type: Output }]
};
if (false) {
    /**
     * 地图视口，用于控制影响地图静态显示的属性
     * @type {?}
     */
    NgxAmapComponent.prototype.view;
    /**
     * 地图图层数组，数组可以是图层 中的一个或多个，默认为普通二维地图
     * @type {?}
     */
    NgxAmapComponent.prototype.layers;
    /**
     * 地图显示的缩放级别
     * @type {?}
     */
    NgxAmapComponent.prototype.zoom;
    /**
     * 地图中心点坐标值
     * @type {?}
     */
    NgxAmapComponent.prototype.center;
    /**
     * 地图标注显示顺序
     * @type {?}
     */
    NgxAmapComponent.prototype.labelzIndex;
    /**
     * 地图显示的缩放级别范围
     * @type {?}
     */
    NgxAmapComponent.prototype.zooms;
    /**
     * 地图语言类型
     * @type {?}
     */
    NgxAmapComponent.prototype.lang;
    /**
     * 地图默认鼠标样式
     * @type {?}
     */
    NgxAmapComponent.prototype.defaultCursor;
    /**
     * 地图显示的参考坐标系
     * @type {?}
     */
    NgxAmapComponent.prototype.crs;
    /**
     * 地图平移过程中是否使用动画
     * @type {?}
     */
    NgxAmapComponent.prototype.animateEnable;
    /**
     * 是否开启地图热点和标注的hover效果
     * @type {?}
     */
    NgxAmapComponent.prototype.isHotspot;
    /**
     * 当前地图中默认显示的图层
     * @type {?}
     */
    NgxAmapComponent.prototype.defaultLayer;
    /**
     * 地图是否可旋转
     * @type {?}
     */
    NgxAmapComponent.prototype.rotateEnable;
    /**
     * 是否监控地图容器尺寸变化
     * @type {?}
     */
    NgxAmapComponent.prototype.resizeEnable;
    /**
     * 是否在有矢量底图的时候自动展示室内地图
     * @type {?}
     */
    NgxAmapComponent.prototype.showIndoorMap;
    /**
     * 在展示矢量图的时候自动展示室内地图图层
     * @type {?}
     */
    NgxAmapComponent.prototype.indoorMap;
    /**
     * 是否支持可以扩展最大缩放级别
     * @type {?}
     */
    NgxAmapComponent.prototype.expandZoomRange;
    /**
     * 地图是否可通过鼠标拖拽平移
     * @type {?}
     */
    NgxAmapComponent.prototype.dragEnable;
    /**
     * 地图是否可缩放
     * @type {?}
     */
    NgxAmapComponent.prototype.zoomEnable;
    /**
     * 地图是否可通过双击鼠标放大地图
     * @type {?}
     */
    NgxAmapComponent.prototype.doubleClickZoom;
    /**
     * 地图是否可通过键盘控制
     * @type {?}
     */
    NgxAmapComponent.prototype.keyboardEnable;
    /**
     * 地图是否使用缓动效果
     * @type {?}
     */
    NgxAmapComponent.prototype.jogEnable;
    /**
     * 地图是否可通过鼠标滚轮缩放浏览
     * @type {?}
     */
    NgxAmapComponent.prototype.scrollWheel;
    /**
     * 地图在移动终端上是否可通过多点触控缩放浏览地图
     * @type {?}
     */
    NgxAmapComponent.prototype.touchZoom;
    /**
     * 当touchZoomCenter=1的时候，手机端双指缩放的以地图中心为中心，否则默认以双指中间点为中心
     * @type {?}
     */
    NgxAmapComponent.prototype.touchZoomCenter;
    /**
     * 设置地图的显示样式
     * @type {?}
     */
    NgxAmapComponent.prototype.mapStyle;
    /**
     * 设置地图上显示的元素种类
     * @type {?}
     */
    NgxAmapComponent.prototype.features;
    /**
     * 设置地图显示3D楼块效果
     * @type {?}
     */
    NgxAmapComponent.prototype.showBuildingBlock;
    /**
     * 视图模式
     * @type {?}
     */
    NgxAmapComponent.prototype.viewMode;
    /**
     * 俯仰角度
     * @type {?}
     */
    NgxAmapComponent.prototype.pitch;
    /**
     * 是否允许设置俯仰角度
     * @type {?}
     */
    NgxAmapComponent.prototype.pitchEnable;
    /**
     * 楼块出现和消失的时候是否显示动画过程
     * @type {?}
     */
    NgxAmapComponent.prototype.buildingAnimation;
    /**
     * 调整天空颜色
     * @type {?}
     */
    NgxAmapComponent.prototype.skyColor;
    /**
     * 设置地图的预加载模式
     * @type {?}
     */
    NgxAmapComponent.prototype.preloadMode;
    /**
     * 为 Map 实例指定掩模的路径，各图层将只显示路径范围内图像
     * @type {?}
     */
    NgxAmapComponent.prototype.mask;
    /** @type {?} */
    NgxAmapComponent.prototype.maxPitch;
    /** @type {?} */
    NgxAmapComponent.prototype.rotation;
    /** @type {?} */
    NgxAmapComponent.prototype.forceVector;
    /** @type {?} */
    NgxAmapComponent.prototype.gridMapForeign;
    /**
     * 额外: 海外⽮量地图样式
     * @type {?}
     */
    NgxAmapComponent.prototype.vectorMapForeign;
    /**
     * 额外: 设置城市
     * @type {?}
     */
    NgxAmapComponent.prototype.city;
    /**
     * 额外: 设置地图名
     * @type {?}
     */
    NgxAmapComponent.prototype.name;
    /**
     * 额外：加载插件
     * @type {?}
     */
    NgxAmapComponent.prototype.plugins;
    /** @type {?} */
    NgxAmapComponent.prototype.naReady;
    /** @type {?} */
    NgxAmapComponent.prototype.naComplete;
    /** @type {?} */
    NgxAmapComponent.prototype.naClick;
    /** @type {?} */
    NgxAmapComponent.prototype.naDblClick;
    /** @type {?} */
    NgxAmapComponent.prototype.naRightClick;
    /** @type {?} */
    NgxAmapComponent.prototype.naMouseMove;
    /** @type {?} */
    NgxAmapComponent.prototype.naMouseOver;
    /** @type {?} */
    NgxAmapComponent.prototype.naMouseWheel;
    /** @type {?} */
    NgxAmapComponent.prototype.naMouseUp;
    /** @type {?} */
    NgxAmapComponent.prototype.naMouseOut;
    /** @type {?} */
    NgxAmapComponent.prototype.naMouseDown;
    /** @type {?} */
    NgxAmapComponent.prototype.naTouchStart;
    /** @type {?} */
    NgxAmapComponent.prototype.naTouchMove;
    /** @type {?} */
    NgxAmapComponent.prototype.naTouchEnd;
    /** @type {?} */
    NgxAmapComponent.prototype.naHotspotClick;
    /** @type {?} */
    NgxAmapComponent.prototype.naHotspotOver;
    /** @type {?} */
    NgxAmapComponent.prototype.naHotspotOut;
    /** @type {?} */
    NgxAmapComponent.prototype.naDragStart;
    /** @type {?} */
    NgxAmapComponent.prototype.naDragging;
    /** @type {?} */
    NgxAmapComponent.prototype.naDragEnd;
    /** @type {?} */
    NgxAmapComponent.prototype.naResize;
    /** @type {?} */
    NgxAmapComponent.prototype.naZoomStart;
    /** @type {?} */
    NgxAmapComponent.prototype.naZoomEnd;
    /** @type {?} */
    NgxAmapComponent.prototype.naZoomChange;
    /** @type {?} */
    NgxAmapComponent.prototype.naMoveStart;
    /** @type {?} */
    NgxAmapComponent.prototype.naMoveEnd;
    /** @type {?} */
    NgxAmapComponent.prototype.naMove;
    /** @type {?} */
    NgxAmapComponent.prototype.naPluginsLoaded;
    /**
     * @type {?}
     * @private
     */
    NgxAmapComponent.prototype.inited;
    /**
     * @type {?}
     * @private
     */
    NgxAmapComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    NgxAmapComponent.prototype.amap;
    /**
     * @type {?}
     * @private
     */
    NgxAmapComponent.prototype.pluginLoader;
    /**
     * @type {?}
     * @private
     */
    NgxAmapComponent.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    NgxAmapComponent.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    NgxAmapComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,