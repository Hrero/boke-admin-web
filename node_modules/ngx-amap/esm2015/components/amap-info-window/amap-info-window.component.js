/**
 * @fileoverview added by tsickle
 * Generated from: components/amap-info-window/amap-info-window.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Component, Input, Output, EventEmitter, ElementRef, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
import { AmapInfoWindowService } from './amap-info-window.service';
import { PixelService } from '../../shared/pixel.service';
import { SizeService } from '../../shared/size.service';
import { AMapService } from '../../shared/amap.service';
/** @type {?} */
const TAG = 'amap-info-window';
/** @type {?} */
const ALL_OPTIONS = [
    'isCustom',
    'autoMove',
    'closeWhenClickMap',
    'content',
    'size',
    'anchor',
    'offset',
    'position',
    'showShadow',
];
export class AmapInfoWindowComponent {
    /**
     * @param {?} os
     * @param {?} binder
     * @param {?} amaps
     * @param {?} el
     * @param {?} logger
     * @param {?} pixels
     * @param {?} sizes
     * @param {?} ngZone
     */
    constructor(os, binder, amaps, el, logger, pixels, sizes, ngZone) {
        this.os = os;
        this.binder = binder;
        this.amaps = amaps;
        this.el = el;
        this.logger = logger;
        this.pixels = pixels;
        this.sizes = sizes;
        this.ngZone = ngZone;
        /**
         * 额外：是否开启
         */
        this.isOpen = false;
        // ---- Events ----
        this.naReady = new EventEmitter();
        this.isOpenChange = new EventEmitter();
        this.inited = false;
        /** @type {?} */
        const w = this.os.get();
        this.naOpen = this.binder.bindEvent(w, 'open');
        this.naClose = this.binder.bindEvent(w, 'close');
        this.naChange = this.binder.bindEvent(w, 'change');
    }
    /**
     * @param {?} changes
     * @return {?}
     */
    ngOnChanges(changes) {
        /** @type {?} */
        const filter = ChangeFilter.of(changes);
        /** @type {?} */
        const iw = this.get();
        if (!this.inited) {
            this.amaps.get().subscribe((/**
             * @return {?}
             */
            () => {
                this.logger.d(TAG, 'initializing ...');
                // bind isOpenChange events:
                this.subscriptions = this.binder.bindEvent(iw, 'open').subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (!this.isOpen) {
                        this.isOpen = true;
                        this.isOpenChange.emit(true);
                    }
                }));
                this.subscriptions.add(this.binder.bindEvent(iw, 'close').subscribe((/**
                 * @return {?}
                 */
                () => {
                    if (this.isOpen) {
                        this.isOpen = false;
                        this.isOpenChange.emit(false);
                    }
                })));
                this.content = this.content
                    ? this.content
                    : this.el.nativeElement.querySelector('.amap-info-window-content');
                /** @type {?} */
                const options = getOptions(this, ALL_OPTIONS);
                if (this.offset) {
                    options.offset = this.pixels.create(this.offset);
                }
                if (this.size) {
                    options.size = this.sizes.create(this.size);
                }
                this.logger.d(TAG, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                m => {
                    this.ngZone.run((/**
                     * @return {?}
                     */
                    () => {
                        this.toggleOpen();
                        this.naReady.emit(m);
                    }));
                    this.logger.d(TAG, 'InfoWindow is ready.');
                }));
                this.inited = true;
            }));
        }
        else {
            filter.has('isOpen').subscribe((/**
             * @return {?}
             */
            () => this.toggleOpen()));
            zip(filter.has('content'), iw).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, w]) => w.setContent(v)));
            zip(filter.notEmpty('position'), iw).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, w]) => w.setPosition(v)));
            zip(filter.notEmpty('size'), iw).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, w]) => w.setSize(this.sizes.create(v))));
            zip(filter.notEmpty('anchor'), iw).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            ([v, w]) => w.setAnchor(v)));
        }
    }
    /**
     * @return {?}
     */
    ngOnDestroy() {
        if (this.subscriptions) {
            this.subscriptions.unsubscribe();
        }
        this.os.destroy();
    }
    /**
     * 获取已创建的 AMap.InfoWindow 对象
     * @return {?}
     */
    get() {
        return this.os.get();
    }
    /**
     * 开关窗体
     * @return {?}
     */
    toggleOpen() {
        this.logger.d(TAG, 'toggle open');
        this.isOpen ? this.open() : this.close();
    }
    /**
     * 打开窗体
     * @return {?}
     */
    open() {
        if (this.hostMarker) {
            this.os.openOnMark(this.hostMarker);
        }
        else {
            this.os.open();
        }
    }
    /**
     * 关闭窗体
     * @return {?}
     */
    close() {
        this.os.close();
    }
}
AmapInfoWindowComponent.decorators = [
    { type: Component, args: [{
                selector: 'amap-info-window',
                template: "<div class='amap-info-window-inner'></div>\n<div class='amap-info-window-content'>\n  <ng-content></ng-content>\n</div>",
                providers: [AmapInfoWindowService],
                styles: [""]
            }] }
];
/** @nocollapse */
AmapInfoWindowComponent.ctorParameters = () => [
    { type: AmapInfoWindowService },
    { type: EventBinderService },
    { type: AMapService },
    { type: ElementRef },
    { type: LoggerService },
    { type: PixelService },
    { type: SizeService },
    { type: NgZone }
];
AmapInfoWindowComponent.propDecorators = {
    isCustom: [{ type: Input }],
    autoMove: [{ type: Input }],
    closeWhenClickMap: [{ type: Input }],
    content: [{ type: Input }],
    size: [{ type: Input }],
    anchor: [{ type: Input }],
    offset: [{ type: Input }],
    position: [{ type: Input }],
    showShadow: [{ type: Input }],
    isOpen: [{ type: Input }],
    naReady: [{ type: Output }],
    naOpen: [{ type: Output }],
    naClose: [{ type: Output }],
    naChange: [{ type: Output }],
    isOpenChange: [{ type: Output }]
};
if (false) {
    /**
     * 是否自定义窗体
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.isCustom;
    /**
     * 是否自动调整窗体到视野内
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.autoMove;
    /**
     * 控制是否在鼠标点击地图后关闭信息窗体
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.closeWhenClickMap;
    /**
     * 显示内容
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.content;
    /**
     * 信息窗体尺寸
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.size;
    /**
     * 信息窗体锚点
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.anchor;
    /**
     * 信息窗体显示位置偏移量
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.offset;
    /**
     * 信息窗体显示基点位置
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.position;
    /**
     * 是否显示信息窗体阴影
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.showShadow;
    /**
     * 额外：是否开启
     * @type {?}
     */
    AmapInfoWindowComponent.prototype.isOpen;
    /** @type {?} */
    AmapInfoWindowComponent.prototype.naReady;
    /** @type {?} */
    AmapInfoWindowComponent.prototype.naOpen;
    /** @type {?} */
    AmapInfoWindowComponent.prototype.naClose;
    /** @type {?} */
    AmapInfoWindowComponent.prototype.naChange;
    /** @type {?} */
    AmapInfoWindowComponent.prototype.isOpenChange;
    /** @type {?} */
    AmapInfoWindowComponent.prototype.hostMarker;
    /**
     * @type {?}
     * @private
     */
    AmapInfoWindowComponent.prototype.inited;
    /**
     * @type {?}
     * @private
     */
    AmapInfoWindowComponent.prototype.subscriptions;
    /**
     * @type {?}
     * @protected
     */
    AmapInfoWindowComponent.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapInfoWindowComponent.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapInfoWindowComponent.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapInfoWindowComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    AmapInfoWindowComponent.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapInfoWindowComponent.prototype.pixels;
    /**
     * @type {?}
     * @private
     */
    AmapInfoWindowComponent.prototype.sizes;
    /**
     * @type {?}
     * @private
     */
    AmapInfoWindowComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,