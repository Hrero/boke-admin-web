import { ModuleWithProviders } from '@angular/core';
import { NgxAmapConfig } from './shared/ngx-amap-config';
import { NgxAmapComponent } from './components/ngx-amap/ngx-amap.component';
import { AmapMarkerDirective } from './directives/amap-marker/amap-marker.directive';
import { AmapPolylineDirective } from './directives/amap-polyline/amap-polyline.directive';
import { AmapInfoWindowComponent } from './components/amap-info-window/amap-info-window.component';
import { AmapTextComponent } from './components/amap-text/amap-text.component';
import { AmapPolygonDirective } from './directives/amap-polygon/amap-polygon.directive';
import { AmapBezierCurveDirective } from './directives/amap-bezier-curve/amap-bezier-curve.directive';
import { AmapRectangleDirective } from './directives/amap-rectangle/amap-rectangle.directive';
import { AmapCircleDirective } from './directives/amap-circle/amap-circle.directive';
import { AmapCircleMarkerDirective } from './directives/amap-circle-marker/amap-circle-marker.directive';
import { AmapEllipseDirective } from './directives/amap-ellipse/amap-ellipse.directive';
import { AmapToolBarDirective } from './directives/amap-tool-bar/amap-tool-bar.directive';
import { AmapMarkerClustererDirective } from './directives/amap-marker-clusterer/amap-marker-clusterer.directive';
import { AmapHeatmapDirective } from './directives/amap-heatmap/amap-heatmap.directive';
import { InputAmapAutocompleteDirective } from './directives/input-amap-autocomplete/input-amap-autocomplete.directive';
import { AmapPluginLoaderService } from './shared/amap-plugin-loader.service';
import { AmapUILoaderService } from './shared/amap-ui-loader.service';
import { AMapLoaderService } from './shared/amap-loader.service';
import { AmapAutocompleteService } from './services/amap-autocomplete/amap-autocomplete.service';
import { UISimpleMarkerDirective } from './directives/ui-simple-marker/ui-simple-marker.directive';
import { UIAwesomeMarkerDirective } from './directives/ui-awesome-marker/ui-awesome-marker.directive';
import { EventBinderService } from './shared/event-binder.service';
import * as ɵngcc0 from '@angular/core';
import * as ɵngcc1 from './components/ngx-amap/ngx-amap.component';
import * as ɵngcc2 from './directives/amap-marker/amap-marker.directive';
import * as ɵngcc3 from './directives/amap-polyline/amap-polyline.directive';
import * as ɵngcc4 from './components/amap-info-window/amap-info-window.component';
import * as ɵngcc5 from './components/amap-text/amap-text.component';
import * as ɵngcc6 from './directives/amap-polygon/amap-polygon.directive';
import * as ɵngcc7 from './directives/amap-bezier-curve/amap-bezier-curve.directive';
import * as ɵngcc8 from './directives/amap-rectangle/amap-rectangle.directive';
import * as ɵngcc9 from './directives/amap-circle/amap-circle.directive';
import * as ɵngcc10 from './directives/amap-circle-marker/amap-circle-marker.directive';
import * as ɵngcc11 from './directives/amap-ellipse/amap-ellipse.directive';
import * as ɵngcc12 from './directives/amap-tool-bar/amap-tool-bar.directive';
import * as ɵngcc13 from './directives/amap-marker-clusterer/amap-marker-clusterer.directive';
import * as ɵngcc14 from './directives/amap-heatmap/amap-heatmap.directive';
import * as ɵngcc15 from './directives/input-amap-autocomplete/input-amap-autocomplete.directive';
import * as ɵngcc16 from './directives/ui-simple-marker/ui-simple-marker.directive';
import * as ɵngcc17 from './directives/ui-awesome-marker/ui-awesome-marker.directive';
export declare class NgxAmapModule {
    static forRoot(mapConfig?: NgxAmapConfig): ModuleWithProviders<NgxAmapModule>;
    static ɵmod: ɵngcc0.ɵɵNgModuleDefWithMeta<NgxAmapModule, [typeof ɵngcc1.NgxAmapComponent, typeof ɵngcc2.AmapMarkerDirective, typeof ɵngcc3.AmapPolylineDirective, typeof ɵngcc4.AmapInfoWindowComponent, typeof ɵngcc5.AmapTextComponent, typeof ɵngcc6.AmapPolygonDirective, typeof ɵngcc7.AmapBezierCurveDirective, typeof ɵngcc8.AmapRectangleDirective, typeof ɵngcc9.AmapCircleDirective, typeof ɵngcc10.AmapCircleMarkerDirective, typeof ɵngcc11.AmapEllipseDirective, typeof ɵngcc12.AmapToolBarDirective, typeof ɵngcc13.AmapMarkerClustererDirective, typeof ɵngcc14.AmapHeatmapDirective, typeof ɵngcc15.InputAmapAutocompleteDirective, typeof ɵngcc16.UISimpleMarkerDirective, typeof ɵngcc17.UIAwesomeMarkerDirective], never, [typeof ɵngcc1.NgxAmapComponent, typeof ɵngcc2.AmapMarkerDirective, typeof ɵngcc3.AmapPolylineDirective, typeof ɵngcc4.AmapInfoWindowComponent, typeof ɵngcc5.AmapTextComponent, typeof ɵngcc6.AmapPolygonDirective, typeof ɵngcc7.AmapBezierCurveDirective, typeof ɵngcc8.AmapRectangleDirective, typeof ɵngcc9.AmapCircleDirective, typeof ɵngcc10.AmapCircleMarkerDirective, typeof ɵngcc11.AmapEllipseDirective, typeof ɵngcc12.AmapToolBarDirective, typeof ɵngcc13.AmapMarkerClustererDirective, typeof ɵngcc14.AmapHeatmapDirective, typeof ɵngcc15.InputAmapAutocompleteDirective, typeof ɵngcc16.UISimpleMarkerDirective, typeof ɵngcc17.UIAwesomeMarkerDirective]>;
    static ɵinj: ɵngcc0.ɵɵInjectorDef<NgxAmapModule>;
}
export { NgxAmapComponent, AmapMarkerDirective, AmapPolylineDirective, AmapInfoWindowComponent, AmapTextComponent, AmapPolygonDirective, AmapBezierCurveDirective, AmapRectangleDirective, AmapCircleDirective, AmapCircleMarkerDirective, AmapEllipseDirective, AmapToolBarDirective, AmapMarkerClustererDirective, AmapHeatmapDirective, InputAmapAutocompleteDirective, AmapPluginLoaderService, AmapUILoaderService, AMapLoaderService, AmapAutocompleteService, UISimpleMarkerDirective, UIAwesomeMarkerDirective, EventBinderService, };

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibmd4LWFtYXAubW9kdWxlLmQudHMiLCJzb3VyY2VzIjpbIm5neC1hbWFwLm1vZHVsZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUNBO0FBQ0EsK0NBQStDLGtDQUFtQjs7O0FBQ2xFO0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBNb2R1bGVXaXRoUHJvdmlkZXJzIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBOZ3hBbWFwQ29uZmlnIH0gZnJvbSAnLi9zaGFyZWQvbmd4LWFtYXAtY29uZmlnJztcbmltcG9ydCB7IE5neEFtYXBDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvbmd4LWFtYXAvbmd4LWFtYXAuY29tcG9uZW50JztcbmltcG9ydCB7IEFtYXBNYXJrZXJEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYW1hcC1tYXJrZXIvYW1hcC1tYXJrZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFtYXBQb2x5bGluZURpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9hbWFwLXBvbHlsaW5lL2FtYXAtcG9seWxpbmUuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFtYXBJbmZvV2luZG93Q29tcG9uZW50IH0gZnJvbSAnLi9jb21wb25lbnRzL2FtYXAtaW5mby13aW5kb3cvYW1hcC1pbmZvLXdpbmRvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQW1hcFRleHRDb21wb25lbnQgfSBmcm9tICcuL2NvbXBvbmVudHMvYW1hcC10ZXh0L2FtYXAtdGV4dC5jb21wb25lbnQnO1xuaW1wb3J0IHsgQW1hcFBvbHlnb25EaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvYW1hcC1wb2x5Z29uL2FtYXAtcG9seWdvbi5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQW1hcEJlemllckN1cnZlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2FtYXAtYmV6aWVyLWN1cnZlL2FtYXAtYmV6aWVyLWN1cnZlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbWFwUmVjdGFuZ2xlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2FtYXAtcmVjdGFuZ2xlL2FtYXAtcmVjdGFuZ2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbWFwQ2lyY2xlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2FtYXAtY2lyY2xlL2FtYXAtY2lyY2xlLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbWFwQ2lyY2xlTWFya2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2FtYXAtY2lyY2xlLW1hcmtlci9hbWFwLWNpcmNsZS1tYXJrZXIuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFtYXBFbGxpcHNlRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2FtYXAtZWxsaXBzZS9hbWFwLWVsbGlwc2UuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFtYXBUb29sQmFyRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL2FtYXAtdG9vbC1iYXIvYW1hcC10b29sLWJhci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgQW1hcE1hcmtlckNsdXN0ZXJlckRpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9hbWFwLW1hcmtlci1jbHVzdGVyZXIvYW1hcC1tYXJrZXItY2x1c3RlcmVyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBBbWFwSGVhdG1hcERpcmVjdGl2ZSB9IGZyb20gJy4vZGlyZWN0aXZlcy9hbWFwLWhlYXRtYXAvYW1hcC1oZWF0bWFwLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBJbnB1dEFtYXBBdXRvY29tcGxldGVEaXJlY3RpdmUgfSBmcm9tICcuL2RpcmVjdGl2ZXMvaW5wdXQtYW1hcC1hdXRvY29tcGxldGUvaW5wdXQtYW1hcC1hdXRvY29tcGxldGUuZGlyZWN0aXZlJztcbmltcG9ydCB7IEFtYXBQbHVnaW5Mb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi9zaGFyZWQvYW1hcC1wbHVnaW4tbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQW1hcFVJTG9hZGVyU2VydmljZSB9IGZyb20gJy4vc2hhcmVkL2FtYXAtdWktbG9hZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgQU1hcExvYWRlclNlcnZpY2UgfSBmcm9tICcuL3NoYXJlZC9hbWFwLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEFtYXBBdXRvY29tcGxldGVTZXJ2aWNlIH0gZnJvbSAnLi9zZXJ2aWNlcy9hbWFwLWF1dG9jb21wbGV0ZS9hbWFwLWF1dG9jb21wbGV0ZS5zZXJ2aWNlJztcbmltcG9ydCB7IFVJU2ltcGxlTWFya2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3VpLXNpbXBsZS1tYXJrZXIvdWktc2ltcGxlLW1hcmtlci5kaXJlY3RpdmUnO1xuaW1wb3J0IHsgVUlBd2Vzb21lTWFya2VyRGlyZWN0aXZlIH0gZnJvbSAnLi9kaXJlY3RpdmVzL3VpLWF3ZXNvbWUtbWFya2VyL3VpLWF3ZXNvbWUtbWFya2VyLmRpcmVjdGl2ZSc7XG5pbXBvcnQgeyBFdmVudEJpbmRlclNlcnZpY2UgfSBmcm9tICcuL3NoYXJlZC9ldmVudC1iaW5kZXIuc2VydmljZSc7XG5leHBvcnQgZGVjbGFyZSBjbGFzcyBOZ3hBbWFwTW9kdWxlIHtcbiAgICBzdGF0aWMgZm9yUm9vdChtYXBDb25maWc/OiBOZ3hBbWFwQ29uZmlnKTogTW9kdWxlV2l0aFByb3ZpZGVycztcbn1cbmV4cG9ydCB7IE5neEFtYXBDb21wb25lbnQsIEFtYXBNYXJrZXJEaXJlY3RpdmUsIEFtYXBQb2x5bGluZURpcmVjdGl2ZSwgQW1hcEluZm9XaW5kb3dDb21wb25lbnQsIEFtYXBUZXh0Q29tcG9uZW50LCBBbWFwUG9seWdvbkRpcmVjdGl2ZSwgQW1hcEJlemllckN1cnZlRGlyZWN0aXZlLCBBbWFwUmVjdGFuZ2xlRGlyZWN0aXZlLCBBbWFwQ2lyY2xlRGlyZWN0aXZlLCBBbWFwQ2lyY2xlTWFya2VyRGlyZWN0aXZlLCBBbWFwRWxsaXBzZURpcmVjdGl2ZSwgQW1hcFRvb2xCYXJEaXJlY3RpdmUsIEFtYXBNYXJrZXJDbHVzdGVyZXJEaXJlY3RpdmUsIEFtYXBIZWF0bWFwRGlyZWN0aXZlLCBJbnB1dEFtYXBBdXRvY29tcGxldGVEaXJlY3RpdmUsIEFtYXBQbHVnaW5Mb2FkZXJTZXJ2aWNlLCBBbWFwVUlMb2FkZXJTZXJ2aWNlLCBBTWFwTG9hZGVyU2VydmljZSwgQW1hcEF1dG9jb21wbGV0ZVNlcnZpY2UsIFVJU2ltcGxlTWFya2VyRGlyZWN0aXZlLCBVSUF3ZXNvbWVNYXJrZXJEaXJlY3RpdmUsIEV2ZW50QmluZGVyU2VydmljZSwgfTtcbiJdfQ==