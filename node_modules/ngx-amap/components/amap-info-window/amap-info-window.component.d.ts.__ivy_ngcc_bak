/// <reference types="@types/amap-js-api" />
import { OnDestroy, EventEmitter, SimpleChanges, OnChanges, ElementRef, NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { AmapInfoWindowService } from './amap-info-window.service';
import { IPixel, ISize } from '../../interfaces';
import { PixelService } from '../../shared/pixel.service';
import { SizeService } from '../../shared/size.service';
import { AMapService } from '../../shared/amap.service';
export declare class AmapInfoWindowComponent implements OnChanges, OnDestroy {
    protected os: AmapInfoWindowService;
    protected binder: EventBinderService;
    private amaps;
    private el;
    private logger;
    private pixels;
    private sizes;
    private ngZone;
    /**
     * 是否自定义窗体
     */
    isCustom: boolean;
    /**
     * 是否自动调整窗体到视野内
     */
    autoMove: boolean;
    /**
     * 控制是否在鼠标点击地图后关闭信息窗体
     */
    closeWhenClickMap: boolean;
    /**
     * 显示内容
     */
    content: string | HTMLElement;
    /**
     * 信息窗体尺寸
     */
    size: AMap.SizeValue | ISize;
    /**
     * 信息窗体锚点
     */
    anchor: AMap.InfoWindow.Anchor;
    /**
     * 信息窗体显示位置偏移量
     */
    offset: AMap.Pixel | IPixel;
    /**
     * 信息窗体显示基点位置
     */
    position: AMap.LocationValue;
    /**
     * 是否显示信息窗体阴影
     */
    showShadow: boolean;
    /**
     * 额外：是否开启
     */
    isOpen: boolean;
    naReady: EventEmitter<any>;
    naOpen: EventEmitter<any>;
    naClose: EventEmitter<any>;
    naChange: EventEmitter<any>;
    isOpenChange: EventEmitter<boolean>;
    hostMarker: Observable<AMap.Marker | AMap.Text>;
    private inited;
    private subscriptions;
    constructor(os: AmapInfoWindowService, binder: EventBinderService, amaps: AMapService, el: ElementRef, logger: LoggerService, pixels: PixelService, sizes: SizeService, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    ngOnDestroy(): void;
    /**
     * 获取已创建的 AMap.InfoWindow 对象
     */
    get(): Observable<AMap.InfoWindow<any>>;
    /**
     * 开关窗体
     */
    toggleOpen(): void;
    /**
     * 打开窗体
     */
    open(): void;
    /**
     * 关闭窗体
     */
    close(): void;
}
