/// <reference types="@types/amap-js-api" />
import { OnDestroy, EventEmitter, SimpleChanges, OnChanges, QueryList, AfterContentInit, ElementRef, NgZone } from '@angular/core';
import { AmapTextService } from './amap-text.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { AMapOverlay } from '../../base/amap-overlay';
import { EventBinderService } from '../../shared/event-binder.service';
import { IPixel, IIcon } from '../../interfaces';
import { PixelService } from '../../shared/pixel.service';
import { IconService } from '../../shared/icon.service';
import { AmapInfoWindowComponent } from '../amap-info-window/amap-info-window.component';
import { AMapService } from '../../shared/amap.service';
import * as ɵngcc0 from '@angular/core';
export declare class AmapTextComponent extends AMapOverlay<AMap.Text> implements OnChanges, OnDestroy, AfterContentInit {
    protected os: AmapTextService;
    protected binder: EventBinderService;
    private amaps;
    private el;
    private pixels;
    private icons;
    private logger;
    private ngZone;
    /**
     * 点标记显示内容
     */
    text: string;
    /**
     * 点标记在地图上显示的位置
     */
    position: AMap.LocationValue;
    /**
     * 标记锚点
     */
    anchor: AMap.Marker.Anchor;
    /**
     * 点标记显示位置偏移量
     */
    offset: AMap.Pixel | IPixel;
    /**
     * 鼠标点击时marker是否置顶
     */
    topWhenClick: boolean;
    /**
     * 拖拽点标记时是否开启点标记离开地图的效果
     */
    raiseOnDrag: boolean;
    /**
     * 点标记是否可见
     */
    visible: boolean;
    /**
     * 点标记的叠加顺序
     */
    zIndex: number;
    /**
     * 点标记的旋转角度
     */
    angle: number;
    /**
     * 是否自动旋转
     */
    autoRotation: boolean;
    /**
     * 点标记的动画效果
     */
    animation: AMap.AnimationName;
    /**
     * 点标记阴影
     */
    shadow: AMap.Icon | string | IIcon;
    /**
     * 鼠标滑过点标记时的文字提示
     */
    title: string;
    /**
     * 样式
     */
    style: {
        [key: string]: string;
    };
    /**
     * 额外: 是否置顶
     */
    isTop: boolean;
    /**
     * 额外: 是否隐藏
     */
    hidden: boolean;
    /**
     * 额外: 是否包含在点聚合中
     */
    inCluster: boolean;
    /**
     * 额外: 点击时是否显示信息窗体
     */
    openInfoWindow: boolean;
    naReady: EventEmitter<any>;
    naMouseOut: EventEmitter<any>;
    naDragStart: EventEmitter<any>;
    naDragging: EventEmitter<any>;
    naDragEnd: EventEmitter<any>;
    naMoving: EventEmitter<any>;
    naMoveEnd: EventEmitter<any>;
    naMoveAlong: EventEmitter<any>;
    infoWindowComponent: QueryList<AmapInfoWindowComponent>;
    private inited;
    private subscription;
    constructor(os: AmapTextService, binder: EventBinderService, amaps: AMapService, el: ElementRef, pixels: PixelService, icons: IconService, logger: LoggerService, ngZone: NgZone);
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    private updateInfoWindow;
    private updateInfoWindowPosition;
    /**
     * 获取已创建的 AMap.Text 对象
     */
    get(): import("rxjs").Observable<AMap.Text<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AmapTextComponent, never>;
    static ɵcmp: ɵngcc0.ɵɵComponentDefWithMeta<AmapTextComponent, "amap-text", ["text"], { "hidden": "hidden"; "inCluster": "inCluster"; "openInfoWindow": "openInfoWindow"; "text": "text"; "position": "position"; "anchor": "anchor"; "offset": "offset"; "topWhenClick": "topWhenClick"; "raiseOnDrag": "raiseOnDrag"; "visible": "visible"; "zIndex": "zIndex"; "angle": "angle"; "autoRotation": "autoRotation"; "animation": "animation"; "shadow": "shadow"; "title": "title"; "style": "style"; "isTop": "isTop"; }, { "naReady": "naReady"; "naMouseOut": "naMouseOut"; "naDragStart": "naDragStart"; "naDragging": "naDragging"; "naDragEnd": "naDragEnd"; "naMoving": "naMoving"; "naMoveEnd": "naMoveEnd"; "naMoveAlong": "naMoveAlong"; }, ["infoWindowComponent"], ["*"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hcC10ZXh0LmNvbXBvbmVudC5kLnRzIiwic291cmNlcyI6WyJhbWFwLXRleHQuY29tcG9uZW50LmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQHR5cGVzL2FtYXAtanMtYXBpXCIgLz5cbmltcG9ydCB7IE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIFF1ZXJ5TGlzdCwgQWZ0ZXJDb250ZW50SW5pdCwgRWxlbWVudFJlZiwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbWFwVGV4dFNlcnZpY2UgfSBmcm9tICcuL2FtYXAtdGV4dC5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2dlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvbG9nZ2VyL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IEFNYXBPdmVybGF5IH0gZnJvbSAnLi4vLi4vYmFzZS9hbWFwLW92ZXJsYXknO1xuaW1wb3J0IHsgRXZlbnRCaW5kZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2V2ZW50LWJpbmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IElQaXhlbCwgSUljb24gfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFBpeGVsU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9waXhlbC5zZXJ2aWNlJztcbmltcG9ydCB7IEljb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2ljb24uc2VydmljZSc7XG5pbXBvcnQgeyBBbWFwSW5mb1dpbmRvd0NvbXBvbmVudCB9IGZyb20gJy4uL2FtYXAtaW5mby13aW5kb3cvYW1hcC1pbmZvLXdpbmRvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQU1hcFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvYW1hcC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFtYXBUZXh0Q29tcG9uZW50IGV4dGVuZHMgQU1hcE92ZXJsYXk8QU1hcC5UZXh0PiBpbXBsZW1lbnRzIE9uQ2hhbmdlcywgT25EZXN0cm95LCBBZnRlckNvbnRlbnRJbml0IHtcbiAgICBwcm90ZWN0ZWQgb3M6IEFtYXBUZXh0U2VydmljZTtcbiAgICBwcm90ZWN0ZWQgYmluZGVyOiBFdmVudEJpbmRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBhbWFwcztcbiAgICBwcml2YXRlIGVsO1xuICAgIHByaXZhdGUgcGl4ZWxzO1xuICAgIHByaXZhdGUgaWNvbnM7XG4gICAgcHJpdmF0ZSBsb2dnZXI7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgLyoqXG4gICAgICog54K55qCH6K6w5pi+56S65YaF5a65XG4gICAgICovXG4gICAgdGV4dDogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOWcqOWcsOWbvuS4iuaYvuekuueahOS9jee9rlxuICAgICAqL1xuICAgIHBvc2l0aW9uOiBBTWFwLkxvY2F0aW9uVmFsdWU7XG4gICAgLyoqXG4gICAgICog5qCH6K6w6ZSa54K5XG4gICAgICovXG4gICAgYW5jaG9yOiBBTWFwLk1hcmtlci5BbmNob3I7XG4gICAgLyoqXG4gICAgICog54K55qCH6K6w5pi+56S65L2N572u5YGP56e76YePXG4gICAgICovXG4gICAgb2Zmc2V0OiBBTWFwLlBpeGVsIHwgSVBpeGVsO1xuICAgIC8qKlxuICAgICAqIOm8oOagh+eCueWHu+aXtm1hcmtlcuaYr+WQpue9rumhtlxuICAgICAqL1xuICAgIHRvcFdoZW5DbGljazogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDmi5bmi73ngrnmoIforrDml7bmmK/lkKblvIDlkK/ngrnmoIforrDnprvlvIDlnLDlm77nmoTmlYjmnpxcbiAgICAgKi9cbiAgICByYWlzZU9uRHJhZzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDngrnmoIforrDmmK/lkKblj6/op4FcbiAgICAgKi9cbiAgICB2aXNpYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOeahOWPoOWKoOmhuuW6j1xuICAgICAqL1xuICAgIHpJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOeahOaXi+i9rOinkuW6plxuICAgICAqL1xuICAgIGFuZ2xlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICog5piv5ZCm6Ieq5Yqo5peL6L2sXG4gICAgICovXG4gICAgYXV0b1JvdGF0aW9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOeahOWKqOeUu+aViOaenFxuICAgICAqL1xuICAgIGFuaW1hdGlvbjogQU1hcC5BbmltYXRpb25OYW1lO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOmYtOW9sVxuICAgICAqL1xuICAgIHNoYWRvdzogQU1hcC5JY29uIHwgc3RyaW5nIHwgSUljb247XG4gICAgLyoqXG4gICAgICog6byg5qCH5ruR6L+H54K55qCH6K6w5pe255qE5paH5a2X5o+Q56S6XG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiDmoLflvI9cbiAgICAgKi9cbiAgICBzdHlsZToge1xuICAgICAgICBba2V5OiBzdHJpbmddOiBzdHJpbmc7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiDpop3lpJY6IOaYr+WQpue9rumhtlxuICAgICAqL1xuICAgIGlzVG9wOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIOmineWkljog5piv5ZCm6ZqQ6JePXG4gICAgICovXG4gICAgaGlkZGVuOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIOmineWkljog5piv5ZCm5YyF5ZCr5Zyo54K56IGa5ZCI5LitXG4gICAgICovXG4gICAgaW5DbHVzdGVyOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIOmineWkljog54K55Ye75pe25piv5ZCm5pi+56S65L+h5oGv56qX5L2TXG4gICAgICovXG4gICAgb3BlbkluZm9XaW5kb3c6IGJvb2xlYW47XG4gICAgbmFSZWFkeTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFNb3VzZU91dDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFEcmFnU3RhcnQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hRHJhZ2dpbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hRHJhZ0VuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFNb3Zpbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hTW92ZUVuZDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFNb3ZlQWxvbmc6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIGluZm9XaW5kb3dDb21wb25lbnQ6IFF1ZXJ5TGlzdDxBbWFwSW5mb1dpbmRvd0NvbXBvbmVudD47XG4gICAgcHJpdmF0ZSBpbml0ZWQ7XG4gICAgcHJpdmF0ZSBzdWJzY3JpcHRpb247XG4gICAgY29uc3RydWN0b3Iob3M6IEFtYXBUZXh0U2VydmljZSwgYmluZGVyOiBFdmVudEJpbmRlclNlcnZpY2UsIGFtYXBzOiBBTWFwU2VydmljZSwgZWw6IEVsZW1lbnRSZWYsIHBpeGVsczogUGl4ZWxTZXJ2aWNlLCBpY29uczogSWNvblNlcnZpY2UsIGxvZ2dlcjogTG9nZ2VyU2VydmljZSwgbmdab25lOiBOZ1pvbmUpO1xuICAgIG5nT25EZXN0cm95KCk6IHZvaWQ7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG4gICAgbmdBZnRlckNvbnRlbnRJbml0KCk6IHZvaWQ7XG4gICAgcHJpdmF0ZSB1cGRhdGVJbmZvV2luZG93O1xuICAgIHByaXZhdGUgdXBkYXRlSW5mb1dpbmRvd1Bvc2l0aW9uO1xuICAgIC8qKlxuICAgICAqIOiOt+WPluW3suWIm+W7uueahCBBTWFwLlRleHQg5a+56LGhXG4gICAgICovXG4gICAgZ2V0KCk6IGltcG9ydChcInJ4anNcIikuT2JzZXJ2YWJsZTxBTWFwLlRleHQ8YW55Pj47XG59XG4iXX0=