(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('rxjs'), require('rxjs/operators')) :
    typeof define === 'function' && define.amd ? define('ngx-amap', ['exports', '@angular/core', 'rxjs', 'rxjs/operators'], factory) :
    (global = global || self, factory(global['ngx-amap'] = {}, global.ng.core, global.rxjs, global.rxjs.operators));
}(this, (function (exports, core, rxjs, operators) { 'use strict';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */
    /* global Reflect, Promise */

    var extendStatics = function(d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };

    function __extends(d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    }

    var __assign = function() {
        __assign = Object.assign || function __assign(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };

    function __rest(s, e) {
        var t = {};
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)
            t[p] = s[p];
        if (s != null && typeof Object.getOwnPropertySymbols === "function")
            for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
                if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i]))
                    t[p[i]] = s[p[i]];
            }
        return t;
    }

    function __decorate(decorators, target, key, desc) {
        var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
        if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
        else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
        return c > 3 && r && Object.defineProperty(target, key, r), r;
    }

    function __param(paramIndex, decorator) {
        return function (target, key) { decorator(target, key, paramIndex); }
    }

    function __metadata(metadataKey, metadataValue) {
        if (typeof Reflect === "object" && typeof Reflect.metadata === "function") return Reflect.metadata(metadataKey, metadataValue);
    }

    function __awaiter(thisArg, _arguments, P, generator) {
        return new (P || (P = Promise))(function (resolve, reject) {
            function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
            function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
            function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
            step((generator = generator.apply(thisArg, _arguments || [])).next());
        });
    }

    function __generator(thisArg, body) {
        var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
        return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
        function verb(n) { return function (v) { return step([n, v]); }; }
        function step(op) {
            if (f) throw new TypeError("Generator is already executing.");
            while (_) try {
                if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
                if (y = 0, t) op = [op[0] & 2, t.value];
                switch (op[0]) {
                    case 0: case 1: t = op; break;
                    case 4: _.label++; return { value: op[1], done: false };
                    case 5: _.label++; y = op[1]; op = [0]; continue;
                    case 7: op = _.ops.pop(); _.trys.pop(); continue;
                    default:
                        if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                        if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                        if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                        if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                        if (t[2]) _.ops.pop();
                        _.trys.pop(); continue;
                }
                op = body.call(thisArg, _);
            } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
            if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
        }
    }

    function __exportStar(m, exports) {
        for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];
    }

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    function __read(o, n) {
        var m = typeof Symbol === "function" && o[Symbol.iterator];
        if (!m) return o;
        var i = m.call(o), r, ar = [], e;
        try {
            while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
        }
        catch (error) { e = { error: error }; }
        finally {
            try {
                if (r && !r.done && (m = i["return"])) m.call(i);
            }
            finally { if (e) throw e.error; }
        }
        return ar;
    }

    function __spread() {
        for (var ar = [], i = 0; i < arguments.length; i++)
            ar = ar.concat(__read(arguments[i]));
        return ar;
    }

    function __spreadArrays() {
        for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
        for (var r = Array(s), k = 0, i = 0; i < il; i++)
            for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++)
                r[k] = a[j];
        return r;
    };

    function __await(v) {
        return this instanceof __await ? (this.v = v, this) : new __await(v);
    }

    function __asyncGenerator(thisArg, _arguments, generator) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var g = generator.apply(thisArg, _arguments || []), i, q = [];
        return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
        function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
        function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
        function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
        function fulfill(value) { resume("next", value); }
        function reject(value) { resume("throw", value); }
        function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
    }

    function __asyncDelegator(o) {
        var i, p;
        return i = {}, verb("next"), verb("throw", function (e) { throw e; }), verb("return"), i[Symbol.iterator] = function () { return this; }, i;
        function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === "return" } : f ? f(v) : v; } : f; }
    }

    function __asyncValues(o) {
        if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
        var m = o[Symbol.asyncIterator], i;
        return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
        function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
        function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
    }

    function __makeTemplateObject(cooked, raw) {
        if (Object.defineProperty) { Object.defineProperty(cooked, "raw", { value: raw }); } else { cooked.raw = raw; }
        return cooked;
    };

    function __importStar(mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
        result.default = mod;
        return result;
    }

    function __importDefault(mod) {
        return (mod && mod.__esModule) ? mod : { default: mod };
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/ngx-amap-config.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @record
     */
    function NgxAmapConfig() { }
    if (false) {
        /** @type {?|undefined} */
        NgxAmapConfig.prototype.apiKey;
        /** @type {?|undefined} */
        NgxAmapConfig.prototype.apiVersion;
        /** @type {?|undefined} */
        NgxAmapConfig.prototype.uiVersion;
        /** @type {?|undefined} */
        NgxAmapConfig.prototype.protocol;
        /** @type {?|undefined} */
        NgxAmapConfig.prototype.debug;
        /** @type {?|undefined} */
        NgxAmapConfig.prototype.debugTags;
    }
    /** @type {?} */
    var NGX_AMAP_CONFIG = new core.InjectionToken('NGX_AMAP_CONFIG');

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/logger/logger.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var LoggerService = /** @class */ (function () {
        function LoggerService() {
        }
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.i = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.log.apply(console, __spread(args));
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.e = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.error.apply(console, __spread(args));
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.w = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.warn.apply(console, __spread(args));
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        LoggerService.prototype.d = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            // only stub;
        };
        LoggerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        LoggerService.ctorParameters = function () { return []; };
        return LoggerService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/logger/debug-logger.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var DebugLoggerService = /** @class */ (function () {
        function DebugLoggerService(config) {
            if (config === void 0) { config = {}; }
            this.config = config;
            this.debugTags = [];
            this.debugAll = true;
            if (config.debugTags) {
                if (config.debugTags === '*') {
                    this.debugAll = true;
                }
                else {
                    this.debugAll = false;
                    this.debugTags = config.debugTags.split(',');
                }
            }
        }
        /**
         * @param {...?} args
         * @return {?}
         */
        DebugLoggerService.prototype.i = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.log.apply(console, __spread(args));
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        DebugLoggerService.prototype.e = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.error.apply(console, __spread(args));
        };
        /**
         * @param {...?} args
         * @return {?}
         */
        DebugLoggerService.prototype.w = /**
         * @param {...?} args
         * @return {?}
         */
        function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            console.warn.apply(console, __spread(args));
        };
        /**
         * @param {?} tag
         * @param {...?} args
         * @return {?}
         */
        DebugLoggerService.prototype.d = /**
         * @param {?} tag
         * @param {...?} args
         * @return {?}
         */
        function (tag) {
            var args = [];
            for (var _i = 1; _i < arguments.length; _i++) {
                args[_i - 1] = arguments[_i];
            }
            if (this.debugAll || this.debugTags.includes(tag)) {
                console.log.apply(console, __spread(["[" + tag + "]"], args));
            }
        };
        DebugLoggerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        DebugLoggerService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NGX_AMAP_CONFIG,] }] }
        ]; };
        return DebugLoggerService;
    }());
    if (false) {
        /** @type {?} */
        DebugLoggerService.prototype.debugTags;
        /** @type {?} */
        DebugLoggerService.prototype.debugAll;
        /**
         * @type {?}
         * @private
         */
        DebugLoggerService.prototype.config;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/amap-loader.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG = 'AMapLoader';
    var AMapLoaderService = /** @class */ (function () {
        function AMapLoaderService(config, logger) {
            if (config === void 0) { config = {}; }
            this.config = config;
            this.logger = logger;
            this.defaultProtocol = 'https';
            this.defaultVersion = '1.4.15';
            this.defaultUIVersion = '1.0.11';
            this.config = config || {};
        }
        /**
         * @return {?}
         */
        AMapLoaderService.prototype.load = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.loading$) {
                return this.loading$.asObservable();
            }
            this.logger.d(TAG, 'loading AMap API ...');
            this.loading$ = new rxjs.ReplaySubject();
            /** @type {?} */
            var callbackName = '_NgxAmapAPILoader';
            /** @type {?} */
            var script = document.createElement('script');
            script.type = 'text/javascript';
            script.async = true;
            script.defer = true;
            script.src = this.getSrcFromConfig(callbackName);
            script.onerror = (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.logger.e('failed to load AMap API.');
                _this.loading$.error(err);
            });
            window[callbackName] = (/**
             * @return {?}
             */
            function () {
                _this.logger.d(TAG, 'loading AMap API COMPLETE');
                _this.loading$.next();
                _this.loading$.complete();
            });
            document.body.appendChild(script);
            return this.loading$.asObservable();
        };
        /**
         * @return {?}
         */
        AMapLoaderService.prototype.loadUI = /**
         * @return {?}
         */
        function () {
            var _this = this;
            if (this.uiLoading$) {
                return this.uiLoading$.asObservable();
            }
            this.logger.d(TAG, 'loading AMap UI ...');
            this.uiLoading$ = new rxjs.ReplaySubject();
            /** @type {?} */
            var uiScript = document.createElement('script');
            uiScript.type = 'text/javascript';
            uiScript.async = true;
            uiScript.defer = true;
            uiScript.src = this.getUISrcFromConfig();
            uiScript.onerror = (/**
             * @param {?} err
             * @return {?}
             */
            function (err) {
                _this.logger.e('failed to load AMap API.');
            });
            uiScript.onload = (/**
             * @return {?}
             */
            function () {
                // tslint:disable-next-line: no-string-literal
                window['initAMapUI']();
                _this.logger.d(TAG, 'loading AMap UI COMPLETE');
                _this.uiLoading$.next();
                _this.uiLoading$.complete();
            });
            document.body.appendChild(uiScript);
            return this.uiLoading$.asObservable();
        };
        /**
         * @private
         * @param {?} callbackName
         * @return {?}
         */
        AMapLoaderService.prototype.getSrcFromConfig = /**
         * @private
         * @param {?} callbackName
         * @return {?}
         */
        function (callbackName) {
            /** @type {?} */
            var urlBase = (this.config.protocol || this.defaultProtocol) + "://webapi.amap.com/maps";
            /** @type {?} */
            var queryParams = {
                v: this.config.apiVersion || this.defaultVersion,
                callback: callbackName,
                key: this.config.apiKey,
            };
            /** @type {?} */
            var params = Object.keys(queryParams)
                .filter((/**
             * @param {?} k
             * @return {?}
             */
            function (k) { return queryParams[k] != null; }))
                .filter((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                // remove empty arrays
                return (!Array.isArray(queryParams[k]) ||
                    (Array.isArray(queryParams[k]) && queryParams[k].length > 0));
            }))
                .map((/**
             * @param {?} k
             * @return {?}
             */
            function (k) {
                // join arrays as comma seperated strings
                /** @type {?} */
                var i = queryParams[k];
                if (Array.isArray(i)) {
                    return { key: k, value: i.join(',') };
                }
                return { key: k, value: queryParams[k] };
            }))
                .map((/**
             * @param {?} entry
             * @return {?}
             */
            function (entry) { return entry.key + "=" + entry.value; }))
                .join('&');
            return urlBase + "?" + params;
        };
        /**
         * @private
         * @return {?}
         */
        AMapLoaderService.prototype.getUISrcFromConfig = /**
         * @private
         * @return {?}
         */
        function () {
            // tslint:disable-next-line: max-line-length
            /** @type {?} */
            var urlBase = (this.config.protocol ||
                this.defaultProtocol) + "://webapi.amap.com/ui/1.0/main-async.js?v=" + (this.config.uiVersion ||
                this.defaultUIVersion);
            return urlBase;
        };
        AMapLoaderService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AMapLoaderService.ctorParameters = function () { return [
            { type: undefined, decorators: [{ type: core.Inject, args: [NGX_AMAP_CONFIG,] }] },
            { type: LoggerService }
        ]; };
        return AMapLoaderService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AMapLoaderService.prototype.defaultProtocol;
        /**
         * @type {?}
         * @private
         */
        AMapLoaderService.prototype.defaultVersion;
        /**
         * @type {?}
         * @private
         */
        AMapLoaderService.prototype.defaultUIVersion;
        /**
         * @type {?}
         * @private
         */
        AMapLoaderService.prototype.loading$;
        /**
         * @type {?}
         * @private
         */
        AMapLoaderService.prototype.uiLoading$;
        /**
         * @type {?}
         * @private
         */
        AMapLoaderService.prototype.config;
        /**
         * @type {?}
         * @private
         */
        AMapLoaderService.prototype.logger;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/amap.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$1 = 'AMap';
    var AMapService = /** @class */ (function () {
        function AMapService(loader, logger, ngZone) {
            this.loader = loader;
            this.logger = logger;
            this.ngZone = ngZone;
            this.map$ = new rxjs.ReplaySubject();
        }
        /**
         * 获取地图对象 AMap.Map
         */
        /**
         * 获取地图对象 AMap.Map
         * @return {?}
         */
        AMapService.prototype.get = /**
         * 获取地图对象 AMap.Map
         * @return {?}
         */
        function () {
            return this.map$.asObservable();
        };
        /**
         * 创建地图对象 AMap.Map
         * @param container 地图容器的DOM元素
         * @param options 选项
         */
        /**
         * 创建地图对象 AMap.Map
         * @param {?} container 地图容器的DOM元素
         * @param {?} options 选项
         * @return {?}
         */
        AMapService.prototype.create = /**
         * 创建地图对象 AMap.Map
         * @param {?} container 地图容器的DOM元素
         * @param {?} options 选项
         * @return {?}
         */
        function (container, options) {
            var _this = this;
            return this.loader.load().pipe(operators.map((/**
             * @return {?}
             */
            function () {
                _this.map = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Map(container, options); }));
                _this.logger.d(TAG$1, 'new map created.');
                _this.map$.next(_this.map);
                _this.map$.complete();
                return _this.map;
            })));
        };
        /**
         * 销毁地图对象
         */
        /**
         * 销毁地图对象
         * @return {?}
         */
        AMapService.prototype.destroy = /**
         * 销毁地图对象
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.destroy();
                _this.logger.d(TAG$1, 'map destroyed.');
                _this.map = null;
            }));
        };
        AMapService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AMapService.ctorParameters = function () { return [
            { type: AMapLoaderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AMapService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AMapService.prototype.map;
        /**
         * @type {?}
         * @private
         */
        AMapService.prototype.map$;
        /**
         * @type {?}
         * @private
         */
        AMapService.prototype.loader;
        /**
         * @type {?}
         * @private
         */
        AMapService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AMapService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/event-binder.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$2 = 'EventBinder';
    var EventBinderService = /** @class */ (function () {
        function EventBinderService(logger, ngZone) {
            this.logger = logger;
            this.ngZone = ngZone;
        }
        /**
         * 注册事件
         * @param eventName 事件名
         */
        /**
         * 注册事件
         * @template T
         * @param {?} target
         * @param {?} eventName 事件名
         * @return {?}
         */
        EventBinderService.prototype.bindEvent = /**
         * 注册事件
         * @template T
         * @param {?} target
         * @param {?} eventName 事件名
         * @return {?}
         */
        function (target, eventName) {
            var _this = this;
            return (/** @type {?} */ (target.pipe(operators.switchMap((/**
             * @param {?} t
             * @return {?}
             */
            function (t) {
                return new rxjs.Observable((/**
                 * @param {?} observer
                 * @return {?}
                 */
                function (observer) {
                    /** @type {?} */
                    var handler = AMap.event.addListener(t, eventName, (/**
                     * @param {?} e
                     * @return {?}
                     */
                    function (e) {
                        _this.ngZone.run((/**
                         * @return {?}
                         */
                        function () { return observer.next(e); }));
                    }), _this);
                    _this.logger.d(TAG$2, "subscribed event: " + eventName);
                    return (/**
                     * @return {?}
                     */
                    function () {
                        AMap.event.removeListener(handler);
                        _this.logger.d(TAG$2, "unsubscribed event: " + eventName);
                        eventName = null;
                        handler = null;
                    });
                }));
            })))));
        };
        EventBinderService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        EventBinderService.ctorParameters = function () { return [
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return EventBinderService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        EventBinderService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        EventBinderService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/plugin-loader.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$3 = 'PluginLoader';
    var PluginLoaderService = /** @class */ (function () {
        function PluginLoaderService(amap, logger) {
            this.amap = amap;
            this.logger = logger;
            this.state = new Map();
        }
        /**
         * @param {?} name
         * @return {?}
         */
        PluginLoaderService.prototype.load = /**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            var _this = this;
            /** @type {?} */
            var pKey = '';
            if (Array.isArray(name)) {
                pKey = name.join(',');
            }
            else {
                pKey = name;
            }
            if (this.state.has(pKey)) {
                return this.state.get(pKey).asObservable();
            }
            this.logger.d(TAG$3, 'loading plugin:', pKey, '...');
            return this.amap.get().pipe(operators.switchMap((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                /** @type {?} */
                var loading$ = new rxjs.ReplaySubject(1);
                m.plugin(name, (/**
                 * @return {?}
                 */
                function () {
                    _this.logger.d(TAG$3, 'loading plugin:', pKey, 'COMPLETE');
                    loading$.next();
                    loading$.complete();
                }));
                _this.state.set(pKey, loading$);
                return loading$.asObservable();
            })));
        };
        PluginLoaderService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        PluginLoaderService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService }
        ]; };
        return PluginLoaderService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        PluginLoaderService.prototype.state;
        /**
         * @type {?}
         * @private
         */
        PluginLoaderService.prototype.amap;
        /**
         * @type {?}
         * @private
         */
        PluginLoaderService.prototype.logger;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: utils/change-filter.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var ChangeFilter = /** @class */ (function () {
        function ChangeFilter(changes) {
            this.changes = changes;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        ChangeFilter.of = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            return new ChangeFilter(changes);
        };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.notEmpty = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (this.changes[key]) {
                /** @type {?} */
                var value = this.changes[key].currentValue;
                if (value !== undefined && value !== null) {
                    return rxjs.of(value);
                }
            }
            return rxjs.EMPTY;
        };
        /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        ChangeFilter.prototype.has = /**
         * @template T
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (this.changes[key]) {
                /** @type {?} */
                var value = this.changes[key].currentValue;
                return rxjs.of(value);
            }
            return rxjs.EMPTY;
        };
        return ChangeFilter;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        ChangeFilter.prototype.changes;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: utils/get-options.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     * @param {?} component
     * @param {?} keys
     * @return {?}
     */
    function getOptions(component, keys) {
        /** @type {?} */
        var options = {};
        keys.forEach((/**
         * @param {?} key
         * @return {?}
         */
        function (key) {
            if (component[key] !== undefined && component[key] !== null) {
                options[key] = component[key];
            }
        }));
        return options;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: utils/index.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */

    /**
     * @fileoverview added by tsickle
     * Generated from: components/ngx-amap/ngx-amap.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$4 = 'ngx-amap';
    /** @type {?} */
    var ALL_OPTIONS = [
        'view',
        'layers',
        'zoom',
        'center',
        'labelzIndex',
        'zooms',
        'lang',
        'defaultCursor',
        'crs',
        'animateEnable',
        'isHotspot',
        'defaultLayer',
        'rotateEnable',
        'resizeEnable',
        'showIndoorMap',
        'indoorMap',
        'expandZoomRange',
        'dragEnable',
        'zoomEnable',
        'doubleClickZoom',
        'keyboardEnable',
        'jogEnable',
        'scrollWheel',
        'touchZoom',
        'touchZoomCenter',
        'mapStyle',
        'features',
        'showBuildingBlock',
        'viewMode',
        'pitch',
        'pitchEnable',
        'buildingAnimation',
        'skyColor',
        'preloadMode',
        'mask',
        'maxPitch',
        'rotation',
        'forceVector',
        'gridMapForeign',
        'vectorMapForeign',
    ];
    var NgxAmapComponent = /** @class */ (function () {
        function NgxAmapComponent(el, amap, pluginLoader, logger, binder, ngZone) {
            this.el = el;
            this.amap = amap;
            this.pluginLoader = pluginLoader;
            this.logger = logger;
            this.binder = binder;
            this.ngZone = ngZone;
            // ---- Map Events ----
            this.naReady = new core.EventEmitter();
            this.naPluginsLoaded = new core.EventEmitter();
            this.inited = false;
            /** @type {?} */
            var m = this.amap.get();
            this.naComplete = this.binder.bindEvent(m, 'complete');
            this.naClick = this.binder.bindEvent(m, 'click');
            this.naDblClick = this.binder.bindEvent(m, 'dblclick');
            this.naRightClick = this.binder.bindEvent(m, 'rightclick');
            this.naMouseMove = this.binder.bindEvent(m, 'mousemove');
            this.naMouseOver = this.binder.bindEvent(m, 'mouseover');
            this.naMouseWheel = this.binder.bindEvent(m, 'mousewheel');
            this.naMouseUp = this.binder.bindEvent(m, 'mouseup');
            this.naMouseOut = this.binder.bindEvent(m, 'mouseout');
            this.naMouseDown = this.binder.bindEvent(m, 'mousedown');
            this.naTouchStart = this.binder.bindEvent(m, 'touchstart');
            this.naTouchMove = this.binder.bindEvent(m, 'touchmove');
            this.naTouchEnd = this.binder.bindEvent(m, 'touchend');
            this.naHotspotClick = this.binder.bindEvent(m, 'hotspotclick');
            this.naHotspotOver = this.binder.bindEvent(m, 'hotspotover');
            this.naHotspotOut = this.binder.bindEvent(m, 'hotspotout');
            this.naDragStart = this.binder.bindEvent(m, 'dragstart');
            this.naDragging = this.binder.bindEvent(m, 'dragging');
            this.naDragEnd = this.binder.bindEvent(m, 'dragend');
            this.naResize = this.binder.bindEvent(m, 'resize');
            this.naZoomStart = this.binder.bindEvent(m, 'zoomstart');
            this.naZoomEnd = this.binder.bindEvent(m, 'zoomend');
            this.naZoomChange = this.binder.bindEvent(m, 'zoomchange');
            this.naMoveStart = this.binder.bindEvent(m, 'movestart');
            this.naMoveEnd = this.binder.bindEvent(m, 'moveend');
            this.naMove = this.binder.bindEvent(m, 'mapmove');
        }
        /**
         * @return {?}
         */
        NgxAmapComponent.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.logger.d(TAG$4, 'initializing ...');
            /** @type {?} */
            var container = this.el.nativeElement.querySelector('div.ngx-amap-container-inner');
            /** @type {?} */
            var options = getOptions(this, ALL_OPTIONS);
            this.logger.d(TAG$4, 'options:', options);
            this.amap.create(container, options).subscribe((/**
             * @param {?} amap
             * @return {?}
             */
            function (amap) {
                _this.logger.d(TAG$4, 'map is ready.');
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () { return _this.naReady.emit(amap); }));
            }));
            this.inited = true;
        };
        /**
         * @return {?}
         */
        NgxAmapComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.amap.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        NgxAmapComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var amap = this.get();
            if (this.inited) {
                rxjs.zip(filter.has('zoom'), amap).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    _this.logger.d(TAG$4, 'setZoom:', v);
                    m.setZoom(v);
                }));
                rxjs.zip(filter.has('center'), amap).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    _this.logger.d(TAG$4, 'setCenter:', v);
                    m.setCenter(v);
                }));
            }
            // Not included in OPTIONS
            rxjs.zip(filter.has('city'), amap).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                m.setCity(v, (/**
                 * @return {?}
                 */
                function () {
                    _this.logger.d(TAG$4, 'setCity:', v);
                }));
            }));
            rxjs.zip(filter.notEmpty('plugins'), amap).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                _this.pluginLoader.load(v).subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.logger.d(TAG$4, 'plugins loaded.');
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naPluginsLoaded.emit(m); }));
                }));
            }));
        };
        /**
         * 获取已创建的 AMap.Map 对象
         */
        /**
         * 获取已创建的 AMap.Map 对象
         * @return {?}
         */
        NgxAmapComponent.prototype.get = /**
         * 获取已创建的 AMap.Map 对象
         * @return {?}
         */
        function () {
            return this.amap.get();
        };
        NgxAmapComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'ngx-amap',
                        exportAs: 'amap',
                        template: "<div class='ngx-amap-container-inner'></div>\n<div class='ngx-amap-content'>\n  <ng-content></ng-content>\n</div>",
                        providers: [AMapService, PluginLoaderService],
                        styles: [".ngx-amap-container-inner{width:inherit;height:inherit}.ngx-amap-content{display:none}"]
                    }] }
        ];
        /** @nocollapse */
        NgxAmapComponent.ctorParameters = function () { return [
            { type: core.ElementRef },
            { type: AMapService },
            { type: PluginLoaderService },
            { type: LoggerService },
            { type: EventBinderService },
            { type: core.NgZone }
        ]; };
        NgxAmapComponent.propDecorators = {
            view: [{ type: core.Input }],
            layers: [{ type: core.Input }],
            zoom: [{ type: core.Input }],
            center: [{ type: core.Input }],
            labelzIndex: [{ type: core.Input }],
            zooms: [{ type: core.Input }],
            lang: [{ type: core.Input }],
            defaultCursor: [{ type: core.Input }],
            crs: [{ type: core.Input }],
            animateEnable: [{ type: core.Input }],
            isHotspot: [{ type: core.Input }],
            defaultLayer: [{ type: core.Input }],
            rotateEnable: [{ type: core.Input }],
            resizeEnable: [{ type: core.Input }],
            showIndoorMap: [{ type: core.Input }],
            indoorMap: [{ type: core.Input }],
            expandZoomRange: [{ type: core.Input }],
            dragEnable: [{ type: core.Input }],
            zoomEnable: [{ type: core.Input }],
            doubleClickZoom: [{ type: core.Input }],
            keyboardEnable: [{ type: core.Input }],
            jogEnable: [{ type: core.Input }],
            scrollWheel: [{ type: core.Input }],
            touchZoom: [{ type: core.Input }],
            touchZoomCenter: [{ type: core.Input }],
            mapStyle: [{ type: core.Input }],
            features: [{ type: core.Input }],
            showBuildingBlock: [{ type: core.Input }],
            viewMode: [{ type: core.Input }],
            pitch: [{ type: core.Input }],
            pitchEnable: [{ type: core.Input }],
            buildingAnimation: [{ type: core.Input }],
            skyColor: [{ type: core.Input }],
            preloadMode: [{ type: core.Input }],
            mask: [{ type: core.Input }],
            maxPitch: [{ type: core.Input }],
            rotation: [{ type: core.Input }],
            forceVector: [{ type: core.Input }],
            gridMapForeign: [{ type: core.Input }],
            vectorMapForeign: [{ type: core.Input }],
            city: [{ type: core.Input }],
            name: [{ type: core.Input }],
            plugins: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naComplete: [{ type: core.Output }],
            naClick: [{ type: core.Output }],
            naDblClick: [{ type: core.Output }],
            naRightClick: [{ type: core.Output }],
            naMouseMove: [{ type: core.Output }],
            naMouseOver: [{ type: core.Output }],
            naMouseWheel: [{ type: core.Output }],
            naMouseUp: [{ type: core.Output }],
            naMouseOut: [{ type: core.Output }],
            naMouseDown: [{ type: core.Output }],
            naTouchStart: [{ type: core.Output }],
            naTouchMove: [{ type: core.Output }],
            naTouchEnd: [{ type: core.Output }],
            naHotspotClick: [{ type: core.Output }],
            naHotspotOver: [{ type: core.Output }],
            naHotspotOut: [{ type: core.Output }],
            naDragStart: [{ type: core.Output }],
            naDragging: [{ type: core.Output }],
            naDragEnd: [{ type: core.Output }],
            naResize: [{ type: core.Output }],
            naZoomStart: [{ type: core.Output }],
            naZoomEnd: [{ type: core.Output }],
            naZoomChange: [{ type: core.Output }],
            naMoveStart: [{ type: core.Output }],
            naMoveEnd: [{ type: core.Output }],
            naMove: [{ type: core.Output }],
            naPluginsLoaded: [{ type: core.Output }]
        };
        return NgxAmapComponent;
    }());
    if (false) {
        /**
         * 地图视口，用于控制影响地图静态显示的属性
         * @type {?}
         */
        NgxAmapComponent.prototype.view;
        /**
         * 地图图层数组，数组可以是图层 中的一个或多个，默认为普通二维地图
         * @type {?}
         */
        NgxAmapComponent.prototype.layers;
        /**
         * 地图显示的缩放级别
         * @type {?}
         */
        NgxAmapComponent.prototype.zoom;
        /**
         * 地图中心点坐标值
         * @type {?}
         */
        NgxAmapComponent.prototype.center;
        /**
         * 地图标注显示顺序
         * @type {?}
         */
        NgxAmapComponent.prototype.labelzIndex;
        /**
         * 地图显示的缩放级别范围
         * @type {?}
         */
        NgxAmapComponent.prototype.zooms;
        /**
         * 地图语言类型
         * @type {?}
         */
        NgxAmapComponent.prototype.lang;
        /**
         * 地图默认鼠标样式
         * @type {?}
         */
        NgxAmapComponent.prototype.defaultCursor;
        /**
         * 地图显示的参考坐标系
         * @type {?}
         */
        NgxAmapComponent.prototype.crs;
        /**
         * 地图平移过程中是否使用动画
         * @type {?}
         */
        NgxAmapComponent.prototype.animateEnable;
        /**
         * 是否开启地图热点和标注的hover效果
         * @type {?}
         */
        NgxAmapComponent.prototype.isHotspot;
        /**
         * 当前地图中默认显示的图层
         * @type {?}
         */
        NgxAmapComponent.prototype.defaultLayer;
        /**
         * 地图是否可旋转
         * @type {?}
         */
        NgxAmapComponent.prototype.rotateEnable;
        /**
         * 是否监控地图容器尺寸变化
         * @type {?}
         */
        NgxAmapComponent.prototype.resizeEnable;
        /**
         * 是否在有矢量底图的时候自动展示室内地图
         * @type {?}
         */
        NgxAmapComponent.prototype.showIndoorMap;
        /**
         * 在展示矢量图的时候自动展示室内地图图层
         * @type {?}
         */
        NgxAmapComponent.prototype.indoorMap;
        /**
         * 是否支持可以扩展最大缩放级别
         * @type {?}
         */
        NgxAmapComponent.prototype.expandZoomRange;
        /**
         * 地图是否可通过鼠标拖拽平移
         * @type {?}
         */
        NgxAmapComponent.prototype.dragEnable;
        /**
         * 地图是否可缩放
         * @type {?}
         */
        NgxAmapComponent.prototype.zoomEnable;
        /**
         * 地图是否可通过双击鼠标放大地图
         * @type {?}
         */
        NgxAmapComponent.prototype.doubleClickZoom;
        /**
         * 地图是否可通过键盘控制
         * @type {?}
         */
        NgxAmapComponent.prototype.keyboardEnable;
        /**
         * 地图是否使用缓动效果
         * @type {?}
         */
        NgxAmapComponent.prototype.jogEnable;
        /**
         * 地图是否可通过鼠标滚轮缩放浏览
         * @type {?}
         */
        NgxAmapComponent.prototype.scrollWheel;
        /**
         * 地图在移动终端上是否可通过多点触控缩放浏览地图
         * @type {?}
         */
        NgxAmapComponent.prototype.touchZoom;
        /**
         * 当touchZoomCenter=1的时候，手机端双指缩放的以地图中心为中心，否则默认以双指中间点为中心
         * @type {?}
         */
        NgxAmapComponent.prototype.touchZoomCenter;
        /**
         * 设置地图的显示样式
         * @type {?}
         */
        NgxAmapComponent.prototype.mapStyle;
        /**
         * 设置地图上显示的元素种类
         * @type {?}
         */
        NgxAmapComponent.prototype.features;
        /**
         * 设置地图显示3D楼块效果
         * @type {?}
         */
        NgxAmapComponent.prototype.showBuildingBlock;
        /**
         * 视图模式
         * @type {?}
         */
        NgxAmapComponent.prototype.viewMode;
        /**
         * 俯仰角度
         * @type {?}
         */
        NgxAmapComponent.prototype.pitch;
        /**
         * 是否允许设置俯仰角度
         * @type {?}
         */
        NgxAmapComponent.prototype.pitchEnable;
        /**
         * 楼块出现和消失的时候是否显示动画过程
         * @type {?}
         */
        NgxAmapComponent.prototype.buildingAnimation;
        /**
         * 调整天空颜色
         * @type {?}
         */
        NgxAmapComponent.prototype.skyColor;
        /**
         * 设置地图的预加载模式
         * @type {?}
         */
        NgxAmapComponent.prototype.preloadMode;
        /**
         * 为 Map 实例指定掩模的路径，各图层将只显示路径范围内图像
         * @type {?}
         */
        NgxAmapComponent.prototype.mask;
        /** @type {?} */
        NgxAmapComponent.prototype.maxPitch;
        /** @type {?} */
        NgxAmapComponent.prototype.rotation;
        /** @type {?} */
        NgxAmapComponent.prototype.forceVector;
        /** @type {?} */
        NgxAmapComponent.prototype.gridMapForeign;
        /**
         * 额外: 海外⽮量地图样式
         * @type {?}
         */
        NgxAmapComponent.prototype.vectorMapForeign;
        /**
         * 额外: 设置城市
         * @type {?}
         */
        NgxAmapComponent.prototype.city;
        /**
         * 额外: 设置地图名
         * @type {?}
         */
        NgxAmapComponent.prototype.name;
        /**
         * 额外：加载插件
         * @type {?}
         */
        NgxAmapComponent.prototype.plugins;
        /** @type {?} */
        NgxAmapComponent.prototype.naReady;
        /** @type {?} */
        NgxAmapComponent.prototype.naComplete;
        /** @type {?} */
        NgxAmapComponent.prototype.naClick;
        /** @type {?} */
        NgxAmapComponent.prototype.naDblClick;
        /** @type {?} */
        NgxAmapComponent.prototype.naRightClick;
        /** @type {?} */
        NgxAmapComponent.prototype.naMouseMove;
        /** @type {?} */
        NgxAmapComponent.prototype.naMouseOver;
        /** @type {?} */
        NgxAmapComponent.prototype.naMouseWheel;
        /** @type {?} */
        NgxAmapComponent.prototype.naMouseUp;
        /** @type {?} */
        NgxAmapComponent.prototype.naMouseOut;
        /** @type {?} */
        NgxAmapComponent.prototype.naMouseDown;
        /** @type {?} */
        NgxAmapComponent.prototype.naTouchStart;
        /** @type {?} */
        NgxAmapComponent.prototype.naTouchMove;
        /** @type {?} */
        NgxAmapComponent.prototype.naTouchEnd;
        /** @type {?} */
        NgxAmapComponent.prototype.naHotspotClick;
        /** @type {?} */
        NgxAmapComponent.prototype.naHotspotOver;
        /** @type {?} */
        NgxAmapComponent.prototype.naHotspotOut;
        /** @type {?} */
        NgxAmapComponent.prototype.naDragStart;
        /** @type {?} */
        NgxAmapComponent.prototype.naDragging;
        /** @type {?} */
        NgxAmapComponent.prototype.naDragEnd;
        /** @type {?} */
        NgxAmapComponent.prototype.naResize;
        /** @type {?} */
        NgxAmapComponent.prototype.naZoomStart;
        /** @type {?} */
        NgxAmapComponent.prototype.naZoomEnd;
        /** @type {?} */
        NgxAmapComponent.prototype.naZoomChange;
        /** @type {?} */
        NgxAmapComponent.prototype.naMoveStart;
        /** @type {?} */
        NgxAmapComponent.prototype.naMoveEnd;
        /** @type {?} */
        NgxAmapComponent.prototype.naMove;
        /** @type {?} */
        NgxAmapComponent.prototype.naPluginsLoaded;
        /**
         * @type {?}
         * @private
         */
        NgxAmapComponent.prototype.inited;
        /**
         * @type {?}
         * @private
         */
        NgxAmapComponent.prototype.el;
        /**
         * @type {?}
         * @private
         */
        NgxAmapComponent.prototype.amap;
        /**
         * @type {?}
         * @private
         */
        NgxAmapComponent.prototype.pluginLoader;
        /**
         * @type {?}
         * @private
         */
        NgxAmapComponent.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        NgxAmapComponent.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        NgxAmapComponent.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-marker/amap-marker.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$5 = 'AmapMarker';
    var AmapMarkerService = /** @class */ (function () {
        function AmapMarkerService(amaps, logger, ngZone) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.marker$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取点标记
         */
        /**
         * 获取点标记
         * @return {?}
         */
        AmapMarkerService.prototype.get = /**
         * 获取点标记
         * @return {?}
         */
        function () {
            return this.marker$.asObservable();
        };
        /**
         * 创建点标记 AMap.Marker
         * @param options 选项
         * @param addToMap 是否直接加进地图
         */
        /**
         * 创建点标记 AMap.Marker
         * @param {?} options 选项
         * @param {?=} addToMap 是否直接加进地图
         * @return {?}
         */
        AmapMarkerService.prototype.create = /**
         * 创建点标记 AMap.Marker
         * @param {?} options 选项
         * @param {?=} addToMap 是否直接加进地图
         * @return {?}
         */
        function (options, addToMap) {
            var _this = this;
            if (addToMap === void 0) { addToMap = true; }
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                if (addToMap) {
                    options.map = m;
                }
                _this.marker = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Marker(options); }));
                _this.logger.d(TAG$5, 'new marker created.');
                _this.marker$.next(_this.marker);
                _this.marker$.complete();
                return _this.marker;
            })));
        };
        /**
         * 销毁点标记
         */
        /**
         * 销毁点标记
         * @return {?}
         */
        AmapMarkerService.prototype.destroy = /**
         * 销毁点标记
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$5, 'marker destroyed.');
                _this.marker = null;
            }));
        };
        AmapMarkerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapMarkerService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapMarkerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapMarkerService.prototype.marker;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerService.prototype.marker$;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: base/amap-overlay.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var OverlayOptions = ['cursor', 'extData', 'bubble', 'clickable', 'draggable'];
    /**
     * @template T
     */
    var AMapOverlay = /** @class */ (function () {
        function AMapOverlay(os, binder) {
            this.os = os;
            this.binder = binder;
            /** @type {?} */
            var target = os.get();
            this.naTouchStart = this.binder.bindEvent(target, 'touchstart');
            this.naTouchMove = this.binder.bindEvent(target, 'touchmove');
            this.naTouchEnd = this.binder.bindEvent(target, 'touchend');
            this.naClick = this.binder.bindEvent(target, 'click');
            this.naDblClick = this.binder.bindEvent(target, 'dblclick');
            this.naRightClick = this.binder.bindEvent(target, 'rightclick');
            this.naMouseOver = this.binder.bindEvent(target, 'mouseover');
            this.naMouseUp = this.binder.bindEvent(target, 'mouseup');
            this.naMouseOut = this.binder.bindEvent(target, 'mouseout');
            this.naMouseDown = this.binder.bindEvent(target, 'mousedown');
        }
        AMapOverlay.propDecorators = {
            cursor: [{ type: core.Input }],
            extData: [{ type: core.Input }],
            bubble: [{ type: core.Input }],
            clickable: [{ type: core.Input }],
            draggable: [{ type: core.Input }],
            naTouchStart: [{ type: core.Output }],
            naTouchMove: [{ type: core.Output }],
            naTouchEnd: [{ type: core.Output }],
            naClick: [{ type: core.Output }],
            naDblClick: [{ type: core.Output }],
            naRightClick: [{ type: core.Output }],
            naMouseOver: [{ type: core.Output }],
            naMouseUp: [{ type: core.Output }],
            naMouseOut: [{ type: core.Output }],
            naMouseDown: [{ type: core.Output }]
        };
        return AMapOverlay;
    }());
    if (false) {
        /**
         * 鼠标悬停时的鼠标样式
         * @type {?}
         */
        AMapOverlay.prototype.cursor;
        /**
         * 自定义数据
         * @type {?}
         */
        AMapOverlay.prototype.extData;
        /**
         * 事件是否穿透到地图
         * @type {?}
         */
        AMapOverlay.prototype.bubble;
        /**
         * 是否支持点击
         * @type {?}
         */
        AMapOverlay.prototype.clickable;
        /**
         * 是否支持拖拽
         * @type {?}
         */
        AMapOverlay.prototype.draggable;
        /** @type {?} */
        AMapOverlay.prototype.naTouchStart;
        /** @type {?} */
        AMapOverlay.prototype.naTouchMove;
        /** @type {?} */
        AMapOverlay.prototype.naTouchEnd;
        /** @type {?} */
        AMapOverlay.prototype.naClick;
        /** @type {?} */
        AMapOverlay.prototype.naDblClick;
        /** @type {?} */
        AMapOverlay.prototype.naRightClick;
        /** @type {?} */
        AMapOverlay.prototype.naMouseOver;
        /** @type {?} */
        AMapOverlay.prototype.naMouseUp;
        /** @type {?} */
        AMapOverlay.prototype.naMouseOut;
        /** @type {?} */
        AMapOverlay.prototype.naMouseDown;
        /**
         * @type {?}
         * @protected
         */
        AMapOverlay.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AMapOverlay.prototype.binder;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/pixel.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var PixelService = /** @class */ (function () {
        function PixelService() {
        }
        /**
         * @param {?} options
         * @return {?}
         */
        PixelService.prototype.create = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (!options) {
                return null;
            }
            if (options instanceof AMap.Pixel) {
                return options;
            }
            if (Array.isArray(options)) {
                return new AMap.Pixel(options[0], options[1]);
            }
            return new AMap.Pixel(options.x || 0, options.y || 0, options.round);
        };
        PixelService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        PixelService.ctorParameters = function () { return []; };
        /** @nocollapse */ PixelService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function PixelService_Factory() { return new PixelService(); }, token: PixelService, providedIn: "root" });
        return PixelService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/size.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var SizeService = /** @class */ (function () {
        function SizeService() {
        }
        /**
         * @param {?} options
         * @return {?}
         */
        SizeService.prototype.create = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (!options) {
                return null;
            }
            if (options instanceof AMap.Size || Array.isArray(options)) {
                return options;
            }
            if (options.width !== undefined && options.height !== undefined) {
                return new AMap.Size(options.width, options.height);
            }
            if (options.w !== undefined && options.h !== undefined) {
                return new AMap.Size(options.w, options.h);
            }
            return null;
        };
        SizeService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        SizeService.ctorParameters = function () { return []; };
        /** @nocollapse */ SizeService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function SizeService_Factory() { return new SizeService(); }, token: SizeService, providedIn: "root" });
        return SizeService;
    }());

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/icon.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var IconService = /** @class */ (function () {
        function IconService(pixels, sizes) {
            this.pixels = pixels;
            this.sizes = sizes;
        }
        /**
         * @param {?} options
         * @return {?}
         */
        IconService.prototype.create = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (!options) {
                return null;
            }
            if (typeof options === 'string') {
                return options;
            }
            if (options instanceof AMap.Icon) {
                return options;
            }
            /** @type {?} */
            var iconOption = {};
            var size = options.size, image = options.image, imageOffset = options.imageOffset, imageSize = options.imageSize;
            if (size !== undefined) {
                iconOption.size = this.sizes.create(size);
            }
            if (image !== undefined) {
                iconOption.image = image;
            }
            if (imageOffset !== undefined) {
                iconOption.imageOffset = this.pixels.create(imageOffset);
            }
            if (imageSize !== undefined) {
                iconOption.imageSize = this.sizes.create(imageSize);
            }
            return new AMap.Icon(iconOption);
        };
        IconService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        IconService.ctorParameters = function () { return [
            { type: PixelService },
            { type: SizeService }
        ]; };
        /** @nocollapse */ IconService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function IconService_Factory() { return new IconService(core.ɵɵinject(PixelService), core.ɵɵinject(SizeService)); }, token: IconService, providedIn: "root" });
        return IconService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        IconService.prototype.pixels;
        /**
         * @type {?}
         * @private
         */
        IconService.prototype.sizes;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/marker-label.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var MarkerLabelService = /** @class */ (function () {
        function MarkerLabelService(pixel) {
            this.pixel = pixel;
        }
        /**
         * @param {?} options
         * @return {?}
         */
        MarkerLabelService.prototype.create = /**
         * @param {?} options
         * @return {?}
         */
        function (options) {
            if (options) {
                /** @type {?} */
                var label = {};
                if (options.content !== undefined) {
                    label.content = options.content;
                }
                if (options.offset !== undefined) {
                    if (options.offset instanceof AMap.Pixel) {
                        label.offset = options.offset;
                    }
                    else {
                        label.offset = this.pixel.create(options.offset);
                    }
                }
                if (options.direction !== undefined) {
                    label.direction = options.direction;
                }
                return label;
            }
            return null;
        };
        MarkerLabelService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        MarkerLabelService.ctorParameters = function () { return [
            { type: PixelService }
        ]; };
        /** @nocollapse */ MarkerLabelService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function MarkerLabelService_Factory() { return new MarkerLabelService(core.ɵɵinject(PixelService)); }, token: MarkerLabelService, providedIn: "root" });
        return MarkerLabelService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        MarkerLabelService.prototype.pixel;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: components/amap-info-window/amap-info-window.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$6 = 'AmapInfoWindow';
    var AmapInfoWindowService = /** @class */ (function () {
        function AmapInfoWindowService(amaps, logger, ngZone) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.infoWindow$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取信息窗体
         */
        /**
         * 获取信息窗体
         * @return {?}
         */
        AmapInfoWindowService.prototype.get = /**
         * 获取信息窗体
         * @return {?}
         */
        function () {
            return this.infoWindow$.asObservable();
        };
        /**
         * 创建 AMap.InfoWindow
         * @param options 选项
         */
        /**
         * 创建 AMap.InfoWindow
         * @param {?} options 选项
         * @return {?}
         */
        AmapInfoWindowService.prototype.create = /**
         * 创建 AMap.InfoWindow
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                _this.map = m;
                _this.infoWindow = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.InfoWindow(options); }));
                _this.logger.d(TAG$6, 'new InfoWindow created.');
                _this.infoWindow$.next(_this.infoWindow);
                _this.infoWindow$.complete();
                return _this.infoWindow;
            })));
        };
        /**
         * 销毁
         */
        /**
         * 销毁
         * @return {?}
         */
        AmapInfoWindowService.prototype.destroy = /**
         * 销毁
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} w
             * @return {?}
             */
            function (w) {
                w.close();
                _this.logger.d(TAG$6, 'InfoWindow destroyed.');
                _this.infoWindow = null;
                _this.map = null;
            }));
        };
        /**
         * 打开
         */
        /**
         * 打开
         * @param {?=} position
         * @return {?}
         */
        AmapInfoWindowService.prototype.open = /**
         * 打开
         * @param {?=} position
         * @return {?}
         */
        function (position) {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} w
             * @return {?}
             */
            function (w) { return w.open(_this.map, position); }));
        };
        /**
         * 在覆盖物上打开窗体
         */
        /**
         * 在覆盖物上打开窗体
         * @param {?} marker
         * @return {?}
         */
        AmapInfoWindowService.prototype.openOnMark = /**
         * 在覆盖物上打开窗体
         * @param {?} marker
         * @return {?}
         */
        function (marker) {
            var _this = this;
            rxjs.zip(marker, this.get()).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], w = _b[1];
                w.open(_this.map, m.getPosition());
            }));
        };
        /**
         * 关闭
         */
        /**
         * 关闭
         * @return {?}
         */
        AmapInfoWindowService.prototype.close = /**
         * 关闭
         * @return {?}
         */
        function () {
            this.get().subscribe((/**
             * @param {?} w
             * @return {?}
             */
            function (w) { return w.close(); }));
        };
        AmapInfoWindowService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapInfoWindowService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapInfoWindowService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowService.prototype.map;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowService.prototype.infoWindow;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowService.prototype.infoWindow$;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: components/amap-info-window/amap-info-window.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$7 = 'amap-info-window';
    /** @type {?} */
    var ALL_OPTIONS$1 = [
        'isCustom',
        'autoMove',
        'closeWhenClickMap',
        'content',
        'size',
        'anchor',
        'offset',
        'position',
        'showShadow',
    ];
    var AmapInfoWindowComponent = /** @class */ (function () {
        function AmapInfoWindowComponent(os, binder, amaps, el, logger, pixels, sizes, ngZone) {
            this.os = os;
            this.binder = binder;
            this.amaps = amaps;
            this.el = el;
            this.logger = logger;
            this.pixels = pixels;
            this.sizes = sizes;
            this.ngZone = ngZone;
            /**
             * 额外：是否开启
             */
            this.isOpen = false;
            // ---- Events ----
            this.naReady = new core.EventEmitter();
            this.isOpenChange = new core.EventEmitter();
            this.inited = false;
            /** @type {?} */
            var w = this.os.get();
            this.naOpen = this.binder.bindEvent(w, 'open');
            this.naClose = this.binder.bindEvent(w, 'close');
            this.naChange = this.binder.bindEvent(w, 'change');
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapInfoWindowComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var iw = this.get();
            if (!this.inited) {
                this.amaps.get().subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.logger.d(TAG$7, 'initializing ...');
                    // bind isOpenChange events:
                    _this.subscriptions = _this.binder.bindEvent(iw, 'open').subscribe((/**
                     * @return {?}
                     */
                    function () {
                        if (!_this.isOpen) {
                            _this.isOpen = true;
                            _this.isOpenChange.emit(true);
                        }
                    }));
                    _this.subscriptions.add(_this.binder.bindEvent(iw, 'close').subscribe((/**
                     * @return {?}
                     */
                    function () {
                        if (_this.isOpen) {
                            _this.isOpen = false;
                            _this.isOpenChange.emit(false);
                        }
                    })));
                    _this.content = _this.content
                        ? _this.content
                        : _this.el.nativeElement.querySelector('.amap-info-window-content');
                    /** @type {?} */
                    var options = getOptions(_this, ALL_OPTIONS$1);
                    if (_this.offset) {
                        options.offset = _this.pixels.create(_this.offset);
                    }
                    if (_this.size) {
                        options.size = _this.sizes.create(_this.size);
                    }
                    _this.logger.d(TAG$7, 'options:', options);
                    _this.os.create(options).subscribe((/**
                     * @param {?} m
                     * @return {?}
                     */
                    function (m) {
                        _this.ngZone.run((/**
                         * @return {?}
                         */
                        function () {
                            _this.toggleOpen();
                            _this.naReady.emit(m);
                        }));
                        _this.logger.d(TAG$7, 'InfoWindow is ready.');
                    }));
                    _this.inited = true;
                }));
            }
            else {
                filter.has('isOpen').subscribe((/**
                 * @return {?}
                 */
                function () { return _this.toggleOpen(); }));
                rxjs.zip(filter.has('content'), iw).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], w = _b[1];
                    return w.setContent(v);
                }));
                rxjs.zip(filter.notEmpty('position'), iw).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], w = _b[1];
                    return w.setPosition(v);
                }));
                rxjs.zip(filter.notEmpty('size'), iw).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], w = _b[1];
                    return w.setSize(_this.sizes.create(v));
                }));
                rxjs.zip(filter.notEmpty('anchor'), iw).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], w = _b[1];
                    return w.setAnchor(v);
                }));
            }
        };
        /**
         * @return {?}
         */
        AmapInfoWindowComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.subscriptions) {
                this.subscriptions.unsubscribe();
            }
            this.os.destroy();
        };
        /**
         * 获取已创建的 AMap.InfoWindow 对象
         */
        /**
         * 获取已创建的 AMap.InfoWindow 对象
         * @return {?}
         */
        AmapInfoWindowComponent.prototype.get = /**
         * 获取已创建的 AMap.InfoWindow 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        /**
         * 开关窗体
         */
        /**
         * 开关窗体
         * @return {?}
         */
        AmapInfoWindowComponent.prototype.toggleOpen = /**
         * 开关窗体
         * @return {?}
         */
        function () {
            this.logger.d(TAG$7, 'toggle open');
            this.isOpen ? this.open() : this.close();
        };
        /**
         * 打开窗体
         */
        /**
         * 打开窗体
         * @return {?}
         */
        AmapInfoWindowComponent.prototype.open = /**
         * 打开窗体
         * @return {?}
         */
        function () {
            if (this.hostMarker) {
                this.os.openOnMark(this.hostMarker);
            }
            else {
                this.os.open();
            }
        };
        /**
         * 关闭窗体
         */
        /**
         * 关闭窗体
         * @return {?}
         */
        AmapInfoWindowComponent.prototype.close = /**
         * 关闭窗体
         * @return {?}
         */
        function () {
            this.os.close();
        };
        AmapInfoWindowComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'amap-info-window',
                        template: "<div class='amap-info-window-inner'></div>\n<div class='amap-info-window-content'>\n  <ng-content></ng-content>\n</div>",
                        providers: [AmapInfoWindowService],
                        styles: [""]
                    }] }
        ];
        /** @nocollapse */
        AmapInfoWindowComponent.ctorParameters = function () { return [
            { type: AmapInfoWindowService },
            { type: EventBinderService },
            { type: AMapService },
            { type: core.ElementRef },
            { type: LoggerService },
            { type: PixelService },
            { type: SizeService },
            { type: core.NgZone }
        ]; };
        AmapInfoWindowComponent.propDecorators = {
            isCustom: [{ type: core.Input }],
            autoMove: [{ type: core.Input }],
            closeWhenClickMap: [{ type: core.Input }],
            content: [{ type: core.Input }],
            size: [{ type: core.Input }],
            anchor: [{ type: core.Input }],
            offset: [{ type: core.Input }],
            position: [{ type: core.Input }],
            showShadow: [{ type: core.Input }],
            isOpen: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naOpen: [{ type: core.Output }],
            naClose: [{ type: core.Output }],
            naChange: [{ type: core.Output }],
            isOpenChange: [{ type: core.Output }]
        };
        return AmapInfoWindowComponent;
    }());
    if (false) {
        /**
         * 是否自定义窗体
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.isCustom;
        /**
         * 是否自动调整窗体到视野内
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.autoMove;
        /**
         * 控制是否在鼠标点击地图后关闭信息窗体
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.closeWhenClickMap;
        /**
         * 显示内容
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.content;
        /**
         * 信息窗体尺寸
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.size;
        /**
         * 信息窗体锚点
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.anchor;
        /**
         * 信息窗体显示位置偏移量
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.offset;
        /**
         * 信息窗体显示基点位置
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.position;
        /**
         * 是否显示信息窗体阴影
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.showShadow;
        /**
         * 额外：是否开启
         * @type {?}
         */
        AmapInfoWindowComponent.prototype.isOpen;
        /** @type {?} */
        AmapInfoWindowComponent.prototype.naReady;
        /** @type {?} */
        AmapInfoWindowComponent.prototype.naOpen;
        /** @type {?} */
        AmapInfoWindowComponent.prototype.naClose;
        /** @type {?} */
        AmapInfoWindowComponent.prototype.naChange;
        /** @type {?} */
        AmapInfoWindowComponent.prototype.isOpenChange;
        /** @type {?} */
        AmapInfoWindowComponent.prototype.hostMarker;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowComponent.prototype.inited;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowComponent.prototype.subscriptions;
        /**
         * @type {?}
         * @protected
         */
        AmapInfoWindowComponent.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapInfoWindowComponent.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowComponent.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowComponent.prototype.el;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowComponent.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowComponent.prototype.pixels;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowComponent.prototype.sizes;
        /**
         * @type {?}
         * @private
         */
        AmapInfoWindowComponent.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-marker/amap-marker.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$8 = 'amap-marker';
    /** @type {?} */
    var ALL_OPTIONS$2 = __spread(OverlayOptions, [
        'position',
        'anchor',
        'offset',
        'icon',
        'content',
        'topWhenClick',
        'raiseOnDrag',
        'visible',
        'zIndex',
        'angle',
        'autoRotation',
        'animation',
        'shadow',
        'title',
        'shape',
        'label',
    ]);
    var AmapMarkerDirective = /** @class */ (function (_super) {
        __extends(AmapMarkerDirective, _super);
        function AmapMarkerDirective(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.amaps = amaps;
            _this.pixels = pixels;
            _this.icons = icons;
            _this.mlabels = mlabels;
            _this.logger = logger;
            _this.ngZone = ngZone;
            /**
             * 额外: 是否隐藏
             */
            _this.hidden = false;
            /**
             * 额外: 是否包含在点聚合中
             */
            _this.inCluster = false;
            /**
             * 额外: 点击时是否显示信息窗体
             */
            _this.openInfoWindow = true;
            // amap-marker events:
            _this.naReady = new core.EventEmitter();
            // amap info window:
            _this.infoWindowComponent = new core.QueryList();
            _this.inited = false;
            /** @type {?} */
            var target = _this.os.get();
            _this.naMouseOut = _this.binder.bindEvent(target, 'mouseout');
            _this.naDragStart = _this.binder.bindEvent(target, 'dragstart');
            _this.naDragging = _this.binder.bindEvent(target, 'dragging');
            _this.naDragEnd = _this.binder.bindEvent(target, 'dragend');
            _this.naMoving = _this.binder.bindEvent(target, 'moving');
            _this.naMoveEnd = _this.binder.bindEvent(target, 'moveend');
            _this.naMoveAlong = _this.binder.bindEvent(target, 'movealong');
            return _this;
        }
        /**
         * @return {?}
         */
        AmapMarkerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapMarkerDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var marker = this.get();
            if (!this.inited) {
                // do not draw marker when no poistion defined.
                if (!this.position) {
                    return;
                }
                this.amaps.get().subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.logger.d(TAG$8, 'initializing ...');
                    // bind info window events:
                    _this.subscription = _this.binder.bindEvent(marker, 'click').subscribe((/**
                     * @return {?}
                     */
                    function () {
                        if (_this.openInfoWindow) {
                            _this.infoWindowComponent.forEach((/**
                             * @param {?} w
                             * @return {?}
                             */
                            function (w) { return w.open(); }));
                        }
                    }));
                    /** @type {?} */
                    var options = getOptions(_this, ALL_OPTIONS$2);
                    if (_this.icon) {
                        options.icon = _this.icons.create(_this.icon);
                    }
                    if (_this.shadow) {
                        options.shadow = _this.icons.create(_this.shadow);
                    }
                    if (_this.label) {
                        options.label = _this.mlabels.create(_this.label);
                    }
                    if (_this.offset) {
                        options.offset = _this.pixels.create(_this.offset);
                    }
                    _this.logger.d(TAG$8, 'options:', options);
                    _this.os.create(options, !_this.inCluster).subscribe((/**
                     * @param {?} m
                     * @return {?}
                     */
                    function (m) {
                        _this.ngZone.run((/**
                         * @return {?}
                         */
                        function () { return _this.naReady.emit(m); }));
                        _this.logger.d(TAG$8, 'marker is ready.');
                    }));
                    _this.inited = true;
                    _this.updateInfoWindow();
                    _this.updateInfoWindowPosition();
                }));
            }
            else {
                rxjs.zip(filter.has('icon'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setIcon(_this.icons.create(v));
                }));
                rxjs.zip(filter.has('shadow'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setShadow(_this.icons.create(v));
                }));
                rxjs.zip(filter.has('label'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setLabel(_this.mlabels.create(v));
                }));
                rxjs.zip(filter.has('title'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setTitle(v);
                }));
                rxjs.zip(filter.has('content'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setContent(v);
                }));
                rxjs.zip(filter.has('extData'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setExtData(v);
                }));
                rxjs.zip(filter.has('clickable'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setClickable(!!v);
                }));
                rxjs.zip(filter.has('draggable'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setDraggable(!!v);
                }));
                rxjs.zip(filter.has('visible'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return (v ? m.show() : m.hide());
                }));
                rxjs.zip(filter.has('cursor'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setCursor(v);
                }));
                rxjs.zip(filter.has('animation'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setAnimation(v);
                }));
                rxjs.zip(filter.has('angle'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setAngle(v);
                }));
                rxjs.zip(filter.has('zIndex'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setzIndex(v);
                }));
                rxjs.zip(filter.has('shape'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setShape(v);
                }));
                rxjs.zip(filter.notEmpty('offset'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setOffset(_this.pixels.create(v));
                }));
                rxjs.zip(filter.notEmpty('position'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setPosition(v);
                }));
            }
            rxjs.zip(filter.has('isTop'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                return m.setTop(!!v);
            }));
            rxjs.zip(filter.has('hidden'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                return (v ? m.hide() : m.show());
            }));
        };
        /**
         * @return {?}
         */
        AmapMarkerDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.updateInfoWindow();
            this.infoWindowComponent.changes.subscribe((/**
             * @return {?}
             */
            function () { return _this.updateInfoWindow(); }));
        };
        /**
         * @private
         * @return {?}
         */
        AmapMarkerDirective.prototype.updateInfoWindow = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.infoWindowComponent && this.inited) {
                if (this.infoWindowComponent.length > 1) {
                    this.logger.e(TAG$8, 'Expected no more than 1 info window.');
                    return;
                }
                /** @type {?} */
                var marker_1 = this.os.get();
                this.infoWindowComponent.forEach((/**
                 * @param {?} component
                 * @return {?}
                 */
                function (component) {
                    component.hostMarker = marker_1;
                }));
            }
        };
        /**
         * @private
         * @return {?}
         */
        AmapMarkerDirective.prototype.updateInfoWindowPosition = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.infoWindowComponent && this.inited) {
                this.infoWindowComponent.forEach((/**
                 * @param {?} component
                 * @return {?}
                 */
                function (component) {
                    component.toggleOpen();
                }));
            }
        };
        /**
         * 获取已创建的 AMap.Marker 对象
         */
        /**
         * 获取已创建的 AMap.Marker 对象
         * @return {?}
         */
        AmapMarkerDirective.prototype.get = /**
         * 获取已创建的 AMap.Marker 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapMarkerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-marker',
                        exportAs: 'marker',
                        providers: [AmapMarkerService],
                    },] }
        ];
        /** @nocollapse */
        AmapMarkerDirective.ctorParameters = function () { return [
            { type: AmapMarkerService },
            { type: EventBinderService },
            { type: AMapService },
            { type: PixelService },
            { type: IconService },
            { type: MarkerLabelService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapMarkerDirective.propDecorators = {
            position: [{ type: core.Input }],
            anchor: [{ type: core.Input }],
            offset: [{ type: core.Input }],
            icon: [{ type: core.Input }],
            content: [{ type: core.Input }],
            topWhenClick: [{ type: core.Input }],
            raiseOnDrag: [{ type: core.Input }],
            visible: [{ type: core.Input }],
            zIndex: [{ type: core.Input }],
            angle: [{ type: core.Input }],
            autoRotation: [{ type: core.Input }],
            animation: [{ type: core.Input }],
            shadow: [{ type: core.Input }],
            title: [{ type: core.Input }],
            shape: [{ type: core.Input }],
            label: [{ type: core.Input }],
            isTop: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            inCluster: [{ type: core.Input }],
            openInfoWindow: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naMouseOut: [{ type: core.Output }],
            naDragStart: [{ type: core.Output }],
            naDragging: [{ type: core.Output }],
            naDragEnd: [{ type: core.Output }],
            naMoving: [{ type: core.Output }],
            naMoveEnd: [{ type: core.Output }],
            naMoveAlong: [{ type: core.Output }],
            infoWindowComponent: [{ type: core.ContentChildren, args: [AmapInfoWindowComponent,] }]
        };
        return AmapMarkerDirective;
    }(AMapOverlay));
    if (false) {
        /**
         * 点标记在地图上显示的位置
         * @type {?}
         */
        AmapMarkerDirective.prototype.position;
        /**
         * 标记锚点
         * @type {?}
         */
        AmapMarkerDirective.prototype.anchor;
        /**
         * 点标记显示位置偏移量
         * @type {?}
         */
        AmapMarkerDirective.prototype.offset;
        /**
         * 需在点标记中显示的图标
         * @type {?}
         */
        AmapMarkerDirective.prototype.icon;
        /**
         * 点标记显示内容
         * @type {?}
         */
        AmapMarkerDirective.prototype.content;
        /**
         * 鼠标点击时marker是否置顶
         * @type {?}
         */
        AmapMarkerDirective.prototype.topWhenClick;
        /**
         * 拖拽点标记时是否开启点标记离开地图的效果
         * @type {?}
         */
        AmapMarkerDirective.prototype.raiseOnDrag;
        /**
         * 点标记是否可见
         * @type {?}
         */
        AmapMarkerDirective.prototype.visible;
        /**
         * 点标记的叠加顺序
         * @type {?}
         */
        AmapMarkerDirective.prototype.zIndex;
        /**
         * 点标记的旋转角度
         * @type {?}
         */
        AmapMarkerDirective.prototype.angle;
        /**
         * 是否自动旋转
         * @type {?}
         */
        AmapMarkerDirective.prototype.autoRotation;
        /**
         * 点标记的动画效果
         * @type {?}
         */
        AmapMarkerDirective.prototype.animation;
        /**
         * 点标记阴影
         * @type {?}
         */
        AmapMarkerDirective.prototype.shadow;
        /**
         * 鼠标滑过点标记时的文字提示
         * @type {?}
         */
        AmapMarkerDirective.prototype.title;
        /**
         * 可点击区域
         * @type {?}
         */
        AmapMarkerDirective.prototype.shape;
        /**
         * 文本标注
         * @type {?}
         */
        AmapMarkerDirective.prototype.label;
        /**
         * 额外: 是否置顶
         * @type {?}
         */
        AmapMarkerDirective.prototype.isTop;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        AmapMarkerDirective.prototype.hidden;
        /**
         * 额外: 是否包含在点聚合中
         * @type {?}
         */
        AmapMarkerDirective.prototype.inCluster;
        /**
         * 额外: 点击时是否显示信息窗体
         * @type {?}
         */
        AmapMarkerDirective.prototype.openInfoWindow;
        /** @type {?} */
        AmapMarkerDirective.prototype.naReady;
        /** @type {?} */
        AmapMarkerDirective.prototype.naMouseOut;
        /** @type {?} */
        AmapMarkerDirective.prototype.naDragStart;
        /** @type {?} */
        AmapMarkerDirective.prototype.naDragging;
        /** @type {?} */
        AmapMarkerDirective.prototype.naDragEnd;
        /** @type {?} */
        AmapMarkerDirective.prototype.naMoving;
        /** @type {?} */
        AmapMarkerDirective.prototype.naMoveEnd;
        /** @type {?} */
        AmapMarkerDirective.prototype.naMoveAlong;
        /** @type {?} */
        AmapMarkerDirective.prototype.infoWindowComponent;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerDirective.prototype.inited;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerDirective.prototype.subscription;
        /**
         * @type {?}
         * @protected
         */
        AmapMarkerDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapMarkerDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerDirective.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerDirective.prototype.pixels;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerDirective.prototype.icons;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerDirective.prototype.mlabels;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: base/amap-shape-overlay.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /**
     * @template T
     */
    var AMapShapeOverlay = /** @class */ (function (_super) {
        __extends(AMapShapeOverlay, _super);
        function AMapShapeOverlay(os, binder) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            /** @type {?} */
            var target = os.get();
            _this.naShow = _this.binder.bindEvent(target, 'show');
            _this.naHide = _this.binder.bindEvent(target, 'hide');
            _this.naChange = _this.binder.bindEvent(target, 'change');
            return _this;
        }
        AMapShapeOverlay.propDecorators = {
            naShow: [{ type: core.Output }],
            naHide: [{ type: core.Output }],
            naChange: [{ type: core.Output }]
        };
        return AMapShapeOverlay;
    }(AMapOverlay));
    if (false) {
        /** @type {?} */
        AMapShapeOverlay.prototype.naShow;
        /** @type {?} */
        AMapShapeOverlay.prototype.naHide;
        /** @type {?} */
        AMapShapeOverlay.prototype.naChange;
        /**
         * @type {?}
         * @protected
         */
        AMapShapeOverlay.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AMapShapeOverlay.prototype.binder;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: base/amap-path-overlay.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PathOverlayOptions = __spread(OverlayOptions, [
        'visible',
        'zIndex',
        'strokeColor',
        'strokeOpacity',
        'strokeWeight',
        'strokeStyle',
        'strokeDasharray',
        'lineJoin',
        'lineCap',
    ]);
    /**
     * @template T
     */
    var AMapPathOverlay = /** @class */ (function (_super) {
        __extends(AMapPathOverlay, _super);
        function AMapPathOverlay(os, binder) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            return _this;
        }
        AMapPathOverlay.propDecorators = {
            visible: [{ type: core.Input }],
            zIndex: [{ type: core.Input }],
            strokeColor: [{ type: core.Input }],
            strokeOpacity: [{ type: core.Input }],
            strokeWeight: [{ type: core.Input }],
            strokeStyle: [{ type: core.Input }],
            strokeDasharray: [{ type: core.Input }],
            lineJoin: [{ type: core.Input }],
            lineCap: [{ type: core.Input }]
        };
        return AMapPathOverlay;
    }(AMapShapeOverlay));
    if (false) {
        /**
         * 是否可见
         * @type {?}
         */
        AMapPathOverlay.prototype.visible;
        /**
         * 覆盖物层级
         * @type {?}
         */
        AMapPathOverlay.prototype.zIndex;
        /**
         * 描边线条颜色
         * @type {?}
         */
        AMapPathOverlay.prototype.strokeColor;
        /**
         * 描边线条透明度
         * @type {?}
         */
        AMapPathOverlay.prototype.strokeOpacity;
        /**
         * 描边宽度
         * @type {?}
         */
        AMapPathOverlay.prototype.strokeWeight;
        /**
         * 描边样式
         * @type {?}
         */
        AMapPathOverlay.prototype.strokeStyle;
        /**
         * 虚线间隔
         * @type {?}
         */
        AMapPathOverlay.prototype.strokeDasharray;
        /**
         * 折线拐点的绘制样式
         * @type {?}
         */
        AMapPathOverlay.prototype.lineJoin;
        /**
         * 折线两端线帽的绘制样式
         * @type {?}
         */
        AMapPathOverlay.prototype.lineCap;
        /**
         * @type {?}
         * @protected
         */
        AMapPathOverlay.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AMapPathOverlay.prototype.binder;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-polyline/amap-polyline.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$9 = 'AmapPolyline';
    var AmapPolylineService = /** @class */ (function () {
        function AmapPolylineService(amaps, logger, ngZone, plugins) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.plugins = plugins;
            this.polyline$ = new rxjs.ReplaySubject(1);
            this.editor$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取折线
         */
        /**
         * 获取折线
         * @return {?}
         */
        AmapPolylineService.prototype.get = /**
         * 获取折线
         * @return {?}
         */
        function () {
            return this.polyline$.asObservable();
        };
        /**
         * 创建折线 AMap.Polyline
         * @param options 选项
         */
        /**
         * 创建折线 AMap.Polyline
         * @param {?} options 选项
         * @return {?}
         */
        AmapPolylineService.prototype.create = /**
         * 创建折线 AMap.Polyline
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                options.map = m;
                _this.polyline = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Polyline(options); }));
                _this.logger.d(TAG$9, 'new Polyline created.');
                _this.polyline$.next(_this.polyline);
                _this.polyline$.complete();
                return _this.polyline;
            })));
        };
        /**
         * 销毁折线
         */
        /**
         * 销毁折线
         * @return {?}
         */
        AmapPolylineService.prototype.destroy = /**
         * 销毁折线
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$9, 'Polyline destroyed.');
                _this.polyline = null;
            }));
        };
        /**
         * @return {?}
         */
        AmapPolylineService.prototype.getEditor = /**
         * @return {?}
         */
        function () {
            // plugin is loading:
            return this.editor$.asObservable();
        };
        /**
         * 加载编辑插件
         */
        /**
         * 加载编辑插件
         * @return {?}
         */
        AmapPolylineService.prototype.loadEditor = /**
         * 加载编辑插件
         * @return {?}
         */
        function () {
            return this.plugins.load('AMap.PolyEditor');
        };
        /**
         * 创建编辑器
         */
        /**
         * 创建编辑器
         * @return {?}
         */
        AmapPolylineService.prototype.createEditor = /**
         * 创建编辑器
         * @return {?}
         */
        function () {
            var _this = this;
            return this.loadEditor().pipe(operators.switchMapTo(rxjs.zip(this.amaps.get(), this.get())), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], p = _b[1];
                _this.editor = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.PolyEditor(m, p); }));
                _this.logger.d(TAG$9, 'new PolyEditor created.');
                _this.editor$.next(_this.editor);
                _this.editor$.complete();
                return _this.editor;
            })));
        };
        /**
         * 开关编辑器
         * @param v 开关选项
         */
        /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        AmapPolylineService.prototype.toggleEditor = /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        function (v) {
            if (v && !this.editor) {
                this.createEditor().subscribe((/**
                 * @param {?} editor
                 * @return {?}
                 */
                function (editor) { return editor.open(); }));
                return;
            }
            if (this.editor) {
                if (v) {
                    this.editor.open();
                }
                else {
                    this.editor.close();
                }
            }
        };
        AmapPolylineService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapPolylineService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone },
            { type: PluginLoaderService }
        ]; };
        return AmapPolylineService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapPolylineService.prototype.polyline;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineService.prototype.polyline$;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineService.prototype.editor;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineService.prototype.editor$;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineService.prototype.ngZone;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineService.prototype.plugins;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-polyline/amap-polyline.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$a = 'amap-polyline';
    /** @type {?} */
    var PolylineOptions = __spread(PathOverlayOptions, [
        'isOutline',
        'outlineColor',
        'geodesic',
        'dirColor',
        'borderWeight',
        'showDir',
        'path',
    ]);
    var AmapPolylineDirective = /** @class */ (function (_super) {
        __extends(AmapPolylineDirective, _super);
        function AmapPolylineDirective(os, binder, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.logger = logger;
            _this.ngZone = ngZone;
            /**
             * 额外: 是否隐藏
             */
            _this.hidden = false;
            /**
             * 额外: 是否开启编辑器
             */
            _this.editor = false;
            // directive events:
            _this.naReady = new core.EventEmitter();
            _this.inited = false;
            /** @type {?} */
            var editor = _this.os.getEditor();
            _this.naEditorAddNode = _this.binder.bindEvent(editor, 'addnode');
            _this.naEditorRemoveNode = _this.binder.bindEvent(editor, 'removenode');
            _this.naEditorAdjust = _this.binder.bindEvent(editor, 'adjust');
            _this.naEditorEnd = _this.binder.bindEvent(editor, 'end');
            return _this;
        }
        /**
         * @return {?}
         */
        AmapPolylineDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapPolylineDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var polyline = this.get();
            if (!this.inited) {
                this.logger.d(TAG$a, 'initializing ...');
                /** @type {?} */
                var options = this.options || getOptions(this, PolylineOptions);
                this.logger.d(TAG$a, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$a, 'polyline is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('path'), polyline).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setPath(v);
                }));
                rxjs.zip(filter.has('options'), polyline).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setOptions(v || {});
                }));
                rxjs.zip(filter.has('extData'), polyline).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setExtData(v);
                }));
            }
            rxjs.zip(filter.has('hidden'), polyline).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                return (v ? p.hide() : p.show());
            }));
            filter.has('editor').subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _this.os.toggleEditor(v); }));
        };
        /**
         * 获取已创建的 AMap.Polyline 对象
         */
        /**
         * 获取已创建的 AMap.Polyline 对象
         * @return {?}
         */
        AmapPolylineDirective.prototype.get = /**
         * 获取已创建的 AMap.Polyline 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapPolylineDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-polyline',
                        exportAs: 'polyline',
                        providers: [AmapPolylineService],
                    },] }
        ];
        /** @nocollapse */
        AmapPolylineDirective.ctorParameters = function () { return [
            { type: AmapPolylineService },
            { type: EventBinderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapPolylineDirective.propDecorators = {
            isOutline: [{ type: core.Input }],
            outlineColor: [{ type: core.Input }],
            geodesic: [{ type: core.Input }],
            dirColor: [{ type: core.Input }],
            borderWeight: [{ type: core.Input }],
            showDir: [{ type: core.Input }],
            path: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            editor: [{ type: core.Input }],
            options: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naEditorAddNode: [{ type: core.Output }],
            naEditorRemoveNode: [{ type: core.Output }],
            naEditorAdjust: [{ type: core.Output }],
            naEditorEnd: [{ type: core.Output }]
        };
        return AmapPolylineDirective;
    }(AMapPathOverlay));
    if (false) {
        /**
         * 线条是否带描边
         * @type {?}
         */
        AmapPolylineDirective.prototype.isOutline;
        /**
         * 线条描边颜色
         * @type {?}
         */
        AmapPolylineDirective.prototype.outlineColor;
        /**
         * 是否绘制成大地线
         * @type {?}
         */
        AmapPolylineDirective.prototype.geodesic;
        /**
         * 方向箭头颜色
         * @type {?}
         */
        AmapPolylineDirective.prototype.dirColor;
        /**
         * 描边的宽度
         * @type {?}
         */
        AmapPolylineDirective.prototype.borderWeight;
        /**
         * 是否延路径显示方向箭头
         * @type {?}
         */
        AmapPolylineDirective.prototype.showDir;
        /**
         * 折线的节点数组
         * @type {?}
         */
        AmapPolylineDirective.prototype.path;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        AmapPolylineDirective.prototype.hidden;
        /**
         * 额外: 是否开启编辑器
         * @type {?}
         */
        AmapPolylineDirective.prototype.editor;
        /**
         * 额外: 会覆盖其他属性的配置方式
         * @type {?}
         */
        AmapPolylineDirective.prototype.options;
        /** @type {?} */
        AmapPolylineDirective.prototype.naReady;
        /** @type {?} */
        AmapPolylineDirective.prototype.naEditorAddNode;
        /** @type {?} */
        AmapPolylineDirective.prototype.naEditorRemoveNode;
        /** @type {?} */
        AmapPolylineDirective.prototype.naEditorAdjust;
        /** @type {?} */
        AmapPolylineDirective.prototype.naEditorEnd;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapPolylineDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapPolylineDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapPolylineDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: components/amap-text/amap-text.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$b = 'AmapText';
    var AmapTextService = /** @class */ (function () {
        function AmapTextService(amaps, logger, ngZone) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.text$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取点标记
         */
        /**
         * 获取点标记
         * @return {?}
         */
        AmapTextService.prototype.get = /**
         * 获取点标记
         * @return {?}
         */
        function () {
            return this.text$.asObservable();
        };
        /**
         * 创建点标记 AMap.Text
         * @param options 选项
         * @param addToMap 是否直接加进地图
         */
        /**
         * 创建点标记 AMap.Text
         * @param {?} options 选项
         * @param {?=} addToMap 是否直接加进地图
         * @return {?}
         */
        AmapTextService.prototype.create = /**
         * 创建点标记 AMap.Text
         * @param {?} options 选项
         * @param {?=} addToMap 是否直接加进地图
         * @return {?}
         */
        function (options, addToMap) {
            var _this = this;
            if (addToMap === void 0) { addToMap = true; }
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                if (addToMap) {
                    options.map = m;
                }
                _this.text = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Text(options); }));
                _this.logger.d(TAG$b, 'new text created.');
                _this.text$.next(_this.text);
                _this.text$.complete();
                return _this.text;
            })));
        };
        /**
         * 销毁点标记
         */
        /**
         * 销毁点标记
         * @return {?}
         */
        AmapTextService.prototype.destroy = /**
         * 销毁点标记
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$b, 'text destroyed.');
                _this.text = null;
            }));
        };
        AmapTextService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapTextService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapTextService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapTextService.prototype.text;
        /**
         * @type {?}
         * @private
         */
        AmapTextService.prototype.text$;
        /**
         * @type {?}
         * @private
         */
        AmapTextService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapTextService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapTextService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: components/amap-text/amap-text.component.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$c = 'amap-text';
    /** @type {?} */
    var ALL_OPTIONS$3 = __spread(OverlayOptions, [
        'text',
        'position',
        'anchor',
        'offset',
        'topWhenClick',
        'raiseOnDrag',
        'visible',
        'zIndex',
        'angle',
        'autoRotation',
        'animation',
        'shadow',
        'title',
        'style',
    ]);
    var AmapTextComponent = /** @class */ (function (_super) {
        __extends(AmapTextComponent, _super);
        function AmapTextComponent(os, binder, amaps, el, pixels, icons, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.amaps = amaps;
            _this.el = el;
            _this.pixels = pixels;
            _this.icons = icons;
            _this.logger = logger;
            _this.ngZone = ngZone;
            /**
             * 额外: 是否隐藏
             */
            _this.hidden = false;
            /**
             * 额外: 是否包含在点聚合中
             */
            _this.inCluster = false;
            /**
             * 额外: 点击时是否显示信息窗体
             */
            _this.openInfoWindow = true;
            // ---- Events ----
            _this.naReady = new core.EventEmitter();
            // amap info window:
            _this.infoWindowComponent = new core.QueryList();
            _this.inited = false;
            /** @type {?} */
            var target = _this.os.get();
            _this.naMouseOut = _this.binder.bindEvent(target, 'mouseout');
            _this.naDragStart = _this.binder.bindEvent(target, 'dragstart');
            _this.naDragging = _this.binder.bindEvent(target, 'dragging');
            _this.naDragEnd = _this.binder.bindEvent(target, 'dragend');
            _this.naMoving = _this.binder.bindEvent(target, 'moving');
            _this.naMoveEnd = _this.binder.bindEvent(target, 'moveend');
            _this.naMoveAlong = _this.binder.bindEvent(target, 'movealong');
            return _this;
        }
        /**
         * @return {?}
         */
        AmapTextComponent.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapTextComponent.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var marker = this.get();
            if (!this.inited) {
                // do not draw text marker when no poistion defined.
                if (!this.position) {
                    return;
                }
                this.amaps.get().subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.logger.d(TAG$c, 'initializing ...');
                    // bind info window events:
                    _this.subscription = _this.binder.bindEvent(marker, 'click').subscribe((/**
                     * @return {?}
                     */
                    function () {
                        if (_this.openInfoWindow) {
                            _this.infoWindowComponent.forEach((/**
                             * @param {?} w
                             * @return {?}
                             */
                            function (w) { return w.open(); }));
                        }
                    }));
                    /** @type {?} */
                    var el = _this.el.nativeElement.querySelector('.amap-text-content');
                    _this.text = _this.text ? _this.text : el.innerText;
                    /** @type {?} */
                    var options = getOptions(_this, ALL_OPTIONS$3);
                    if (_this.shadow) {
                        options.shadow = _this.icons.create(_this.shadow);
                    }
                    if (_this.offset) {
                        options.offset = _this.pixels.create(_this.offset);
                    }
                    _this.logger.d(TAG$c, 'options:', options);
                    _this.os.create(options).subscribe((/**
                     * @param {?} m
                     * @return {?}
                     */
                    function (m) {
                        _this.ngZone.run((/**
                         * @return {?}
                         */
                        function () { return _this.naReady.emit(m); }));
                        _this.logger.d(TAG$c, 'marker is ready.');
                    }));
                    _this.inited = true;
                    _this.updateInfoWindow();
                    _this.updateInfoWindowPosition();
                }));
            }
            else {
                rxjs.zip(filter.has('shadow'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setShadow(_this.icons.create(v));
                }));
                rxjs.zip(filter.has('offset'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setOffset(_this.pixels.create(v));
                }));
                rxjs.zip(filter.has('title'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setTitle(v);
                }));
                rxjs.zip(filter.has('content'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setContent(v);
                }));
                rxjs.zip(filter.has('extData'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setExtData(v);
                }));
                rxjs.zip(filter.has('clickable'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setClickable(!!v);
                }));
                rxjs.zip(filter.has('draggable'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setDraggable(!!v);
                }));
                rxjs.zip(filter.has('visible'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return (v ? m.show() : m.hide());
                }));
                rxjs.zip(filter.has('cursor'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setCursor(v);
                }));
                rxjs.zip(filter.has('animation'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setAnimation(v);
                }));
                rxjs.zip(filter.has('angle'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setAngle(v);
                }));
                rxjs.zip(filter.has('zIndex'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setzIndex(v);
                }));
                rxjs.zip(filter.notEmpty('position'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setPosition(v);
                }));
                rxjs.zip(filter.notEmpty('style'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setStyle(v);
                }));
            }
            rxjs.zip(filter.has('isTop'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                return m.setTop(!!v);
            }));
            rxjs.zip(filter.has('hidden'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                return (v ? m.hide() : m.show());
            }));
        };
        /**
         * @return {?}
         */
        AmapTextComponent.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.updateInfoWindow();
            this.infoWindowComponent.changes.subscribe((/**
             * @return {?}
             */
            function () { return _this.updateInfoWindow(); }));
        };
        /**
         * @private
         * @return {?}
         */
        AmapTextComponent.prototype.updateInfoWindow = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.infoWindowComponent && this.inited) {
                if (this.infoWindowComponent.length > 1) {
                    this.logger.e(TAG$c, 'Expected no more than 1 info window.');
                    return;
                }
                /** @type {?} */
                var marker_1 = this.os.get();
                this.infoWindowComponent.forEach((/**
                 * @param {?} component
                 * @return {?}
                 */
                function (component) {
                    component.hostMarker = marker_1;
                }));
            }
        };
        /**
         * @private
         * @return {?}
         */
        AmapTextComponent.prototype.updateInfoWindowPosition = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.infoWindowComponent && this.inited) {
                this.infoWindowComponent.forEach((/**
                 * @param {?} component
                 * @return {?}
                 */
                function (component) {
                    component.toggleOpen();
                }));
            }
        };
        /**
         * 获取已创建的 AMap.Text 对象
         */
        /**
         * 获取已创建的 AMap.Text 对象
         * @return {?}
         */
        AmapTextComponent.prototype.get = /**
         * 获取已创建的 AMap.Text 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapTextComponent.decorators = [
            { type: core.Component, args: [{
                        selector: 'amap-text',
                        exportAs: 'text',
                        template: "<div class='amap-text-inner'></div>\n<div class='amap-text-content'>\n  <ng-content></ng-content>\n</div>",
                        providers: [AmapTextService]
                    }] }
        ];
        /** @nocollapse */
        AmapTextComponent.ctorParameters = function () { return [
            { type: AmapTextService },
            { type: EventBinderService },
            { type: AMapService },
            { type: core.ElementRef },
            { type: PixelService },
            { type: IconService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapTextComponent.propDecorators = {
            text: [{ type: core.Input }],
            position: [{ type: core.Input }],
            anchor: [{ type: core.Input }],
            offset: [{ type: core.Input }],
            topWhenClick: [{ type: core.Input }],
            raiseOnDrag: [{ type: core.Input }],
            visible: [{ type: core.Input }],
            zIndex: [{ type: core.Input }],
            angle: [{ type: core.Input }],
            autoRotation: [{ type: core.Input }],
            animation: [{ type: core.Input }],
            shadow: [{ type: core.Input }],
            title: [{ type: core.Input }],
            style: [{ type: core.Input }],
            isTop: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            inCluster: [{ type: core.Input }],
            openInfoWindow: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naMouseOut: [{ type: core.Output }],
            naDragStart: [{ type: core.Output }],
            naDragging: [{ type: core.Output }],
            naDragEnd: [{ type: core.Output }],
            naMoving: [{ type: core.Output }],
            naMoveEnd: [{ type: core.Output }],
            naMoveAlong: [{ type: core.Output }],
            infoWindowComponent: [{ type: core.ContentChildren, args: [AmapInfoWindowComponent,] }]
        };
        return AmapTextComponent;
    }(AMapOverlay));
    if (false) {
        /**
         * 点标记显示内容
         * @type {?}
         */
        AmapTextComponent.prototype.text;
        /**
         * 点标记在地图上显示的位置
         * @type {?}
         */
        AmapTextComponent.prototype.position;
        /**
         * 标记锚点
         * @type {?}
         */
        AmapTextComponent.prototype.anchor;
        /**
         * 点标记显示位置偏移量
         * @type {?}
         */
        AmapTextComponent.prototype.offset;
        /**
         * 鼠标点击时marker是否置顶
         * @type {?}
         */
        AmapTextComponent.prototype.topWhenClick;
        /**
         * 拖拽点标记时是否开启点标记离开地图的效果
         * @type {?}
         */
        AmapTextComponent.prototype.raiseOnDrag;
        /**
         * 点标记是否可见
         * @type {?}
         */
        AmapTextComponent.prototype.visible;
        /**
         * 点标记的叠加顺序
         * @type {?}
         */
        AmapTextComponent.prototype.zIndex;
        /**
         * 点标记的旋转角度
         * @type {?}
         */
        AmapTextComponent.prototype.angle;
        /**
         * 是否自动旋转
         * @type {?}
         */
        AmapTextComponent.prototype.autoRotation;
        /**
         * 点标记的动画效果
         * @type {?}
         */
        AmapTextComponent.prototype.animation;
        /**
         * 点标记阴影
         * @type {?}
         */
        AmapTextComponent.prototype.shadow;
        /**
         * 鼠标滑过点标记时的文字提示
         * @type {?}
         */
        AmapTextComponent.prototype.title;
        /**
         * 样式
         * @type {?}
         */
        AmapTextComponent.prototype.style;
        /**
         * 额外: 是否置顶
         * @type {?}
         */
        AmapTextComponent.prototype.isTop;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        AmapTextComponent.prototype.hidden;
        /**
         * 额外: 是否包含在点聚合中
         * @type {?}
         */
        AmapTextComponent.prototype.inCluster;
        /**
         * 额外: 点击时是否显示信息窗体
         * @type {?}
         */
        AmapTextComponent.prototype.openInfoWindow;
        /** @type {?} */
        AmapTextComponent.prototype.naReady;
        /** @type {?} */
        AmapTextComponent.prototype.naMouseOut;
        /** @type {?} */
        AmapTextComponent.prototype.naDragStart;
        /** @type {?} */
        AmapTextComponent.prototype.naDragging;
        /** @type {?} */
        AmapTextComponent.prototype.naDragEnd;
        /** @type {?} */
        AmapTextComponent.prototype.naMoving;
        /** @type {?} */
        AmapTextComponent.prototype.naMoveEnd;
        /** @type {?} */
        AmapTextComponent.prototype.naMoveAlong;
        /** @type {?} */
        AmapTextComponent.prototype.infoWindowComponent;
        /**
         * @type {?}
         * @private
         */
        AmapTextComponent.prototype.inited;
        /**
         * @type {?}
         * @private
         */
        AmapTextComponent.prototype.subscription;
        /**
         * @type {?}
         * @protected
         */
        AmapTextComponent.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapTextComponent.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapTextComponent.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapTextComponent.prototype.el;
        /**
         * @type {?}
         * @private
         */
        AmapTextComponent.prototype.pixels;
        /**
         * @type {?}
         * @private
         */
        AmapTextComponent.prototype.icons;
        /**
         * @type {?}
         * @private
         */
        AmapTextComponent.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapTextComponent.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: base/amap-polygon.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var PolygonOptions = __spread(PathOverlayOptions, ['fillColor', 'fillOpacity', 'path']);
    /**
     * @template T, E
     */
    var AMapPolygon = /** @class */ (function (_super) {
        __extends(AMapPolygon, _super);
        function AMapPolygon(os, binder) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            /**
             * 额外: 是否隐藏
             */
            _this.hidden = false;
            /**
             * 额外: 是否开启编辑器
             */
            _this.editor = false;
            // directive events:
            _this.naReady = new core.EventEmitter();
            /** @type {?} */
            var editor = _this.os.getEditor();
            _this.naEditorAddNode = _this.binder.bindEvent(editor, 'addnode');
            _this.naEditorRemoveNode = _this.binder.bindEvent(editor, 'removenode');
            _this.naEditorAdjust = _this.binder.bindEvent(editor, 'adjust');
            _this.naEditorEnd = _this.binder.bindEvent(editor, 'end');
            return _this;
        }
        AMapPolygon.propDecorators = {
            path: [{ type: core.Input }],
            fillColor: [{ type: core.Input }],
            fillOpacity: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            editor: [{ type: core.Input }],
            options: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naEditorAddNode: [{ type: core.Output }],
            naEditorRemoveNode: [{ type: core.Output }],
            naEditorAdjust: [{ type: core.Output }],
            naEditorEnd: [{ type: core.Output }]
        };
        return AMapPolygon;
    }(AMapPathOverlay));
    if (false) {
        /**
         * 多边形轮廓线的节点坐标数组
         * @type {?}
         */
        AMapPolygon.prototype.path;
        /**
         * 多边形填充颜色
         * @type {?}
         */
        AMapPolygon.prototype.fillColor;
        /**
         * 边形填充透明度
         * @type {?}
         */
        AMapPolygon.prototype.fillOpacity;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        AMapPolygon.prototype.hidden;
        /**
         * 额外: 是否开启编辑器
         * @type {?}
         */
        AMapPolygon.prototype.editor;
        /**
         * 额外: 会覆盖其他属性的配置方式
         * @type {?}
         */
        AMapPolygon.prototype.options;
        /** @type {?} */
        AMapPolygon.prototype.naReady;
        /** @type {?} */
        AMapPolygon.prototype.naEditorAddNode;
        /** @type {?} */
        AMapPolygon.prototype.naEditorRemoveNode;
        /** @type {?} */
        AMapPolygon.prototype.naEditorAdjust;
        /** @type {?} */
        AMapPolygon.prototype.naEditorEnd;
        /**
         * @type {?}
         * @protected
         */
        AMapPolygon.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AMapPolygon.prototype.binder;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-polygon/amap-polygon.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$d = 'AmapPolygon';
    var AmapPolygonService = /** @class */ (function () {
        function AmapPolygonService(amaps, logger, ngZone, plugins) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.plugins = plugins;
            this.polygon$ = new rxjs.ReplaySubject(1);
            this.editor$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取折线
         */
        /**
         * 获取折线
         * @return {?}
         */
        AmapPolygonService.prototype.get = /**
         * 获取折线
         * @return {?}
         */
        function () {
            return this.polygon$.asObservable();
        };
        /**
         * 创建折线 AMap.Polygon
         * @param options 选项
         */
        /**
         * 创建折线 AMap.Polygon
         * @param {?} options 选项
         * @return {?}
         */
        AmapPolygonService.prototype.create = /**
         * 创建折线 AMap.Polygon
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                options.map = m;
                _this.polygon = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Polygon(options); }));
                _this.logger.d(TAG$d, 'new Polygon created.');
                _this.polygon$.next(_this.polygon);
                _this.polygon$.complete();
                return _this.polygon;
            })));
        };
        /**
         * 销毁折线
         */
        /**
         * 销毁折线
         * @return {?}
         */
        AmapPolygonService.prototype.destroy = /**
         * 销毁折线
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$d, 'Polygon destroyed.');
                _this.polygon = null;
            }));
        };
        /**
         * @return {?}
         */
        AmapPolygonService.prototype.getEditor = /**
         * @return {?}
         */
        function () {
            // plugin is loading:
            return this.editor$.asObservable();
        };
        /**
         * 加载编辑插件
         */
        /**
         * 加载编辑插件
         * @return {?}
         */
        AmapPolygonService.prototype.loadEditor = /**
         * 加载编辑插件
         * @return {?}
         */
        function () {
            return this.plugins.load('AMap.PolyEditor');
        };
        /**
         * 创建编辑器
         */
        /**
         * 创建编辑器
         * @return {?}
         */
        AmapPolygonService.prototype.createEditor = /**
         * 创建编辑器
         * @return {?}
         */
        function () {
            var _this = this;
            return this.loadEditor().pipe(operators.switchMapTo(rxjs.zip(this.amaps.get(), this.get())), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], p = _b[1];
                _this.editor = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.PolyEditor(m, p); }));
                _this.logger.d(TAG$d, 'new PolyEditor created.');
                _this.editor$.next(_this.editor);
                _this.editor$.complete();
                return _this.editor;
            })));
        };
        /**
         * 开关编辑器
         * @param v 开关选项
         */
        /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        AmapPolygonService.prototype.toggleEditor = /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        function (v) {
            if (v && !this.editor) {
                this.createEditor().subscribe((/**
                 * @param {?} editor
                 * @return {?}
                 */
                function (editor) { return editor.open(); }));
                return;
            }
            if (this.editor) {
                if (v) {
                    this.editor.open();
                }
                else {
                    this.editor.close();
                }
            }
        };
        AmapPolygonService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapPolygonService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone },
            { type: PluginLoaderService }
        ]; };
        return AmapPolygonService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapPolygonService.prototype.polygon;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonService.prototype.polygon$;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonService.prototype.editor;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonService.prototype.editor$;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonService.prototype.ngZone;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonService.prototype.plugins;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-polygon/amap-polygon.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$e = 'amap-polygon';
    var AmapPolygonDirective = /** @class */ (function (_super) {
        __extends(AmapPolygonDirective, _super);
        function AmapPolygonDirective(os, binder, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.logger = logger;
            _this.ngZone = ngZone;
            _this.inited = false;
            return _this;
        }
        /**
         * @return {?}
         */
        AmapPolygonDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapPolygonDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var polygon = this.get();
            if (!this.inited) {
                this.logger.d(TAG$e, 'initializing ...');
                /** @type {?} */
                var options = this.options || getOptions(this, PolygonOptions);
                this.logger.d(TAG$e, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$e, 'polygon is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('path'), polygon).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setPath(v);
                }));
                rxjs.zip(filter.has('options'), polygon).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setOptions(v || {});
                }));
                rxjs.zip(filter.has('extData'), polygon).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setExtData(v);
                }));
            }
            rxjs.zip(filter.has('hidden'), polygon).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                return (v ? p.hide() : p.show());
            }));
            filter.has('editor').subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _this.os.toggleEditor(v); }));
        };
        /**
         * 获取已创建的 AMap.Polygon 对象
         */
        /**
         * 获取已创建的 AMap.Polygon 对象
         * @return {?}
         */
        AmapPolygonDirective.prototype.get = /**
         * 获取已创建的 AMap.Polygon 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapPolygonDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-polygon',
                        exportAs: 'polygon',
                        providers: [AmapPolygonService],
                    },] }
        ];
        /** @nocollapse */
        AmapPolygonDirective.ctorParameters = function () { return [
            { type: AmapPolygonService },
            { type: EventBinderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapPolygonDirective;
    }(AMapPolygon));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapPolygonDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapPolygonDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapPolygonDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapPolygonDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-bezier-curve/amap-bezier-curve.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$f = 'AmapBezierCurve';
    var AmapBezierCurveService = /** @class */ (function () {
        function AmapBezierCurveService(amaps, logger, ngZone, plugins) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.plugins = plugins;
            this.bezierCurve$ = new rxjs.ReplaySubject(1);
            this.editor$ = new rxjs.ReplaySubject(1);
            this.polyEditor$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取贝瑟尔曲线
         */
        /**
         * 获取贝瑟尔曲线
         * @return {?}
         */
        AmapBezierCurveService.prototype.get = /**
         * 获取贝瑟尔曲线
         * @return {?}
         */
        function () {
            return this.bezierCurve$.asObservable();
        };
        /**
         * 创建贝瑟尔曲线 AMap.BezierCurve
         * @param options 选项
         */
        /**
         * 创建贝瑟尔曲线 AMap.BezierCurve
         * @param {?} options 选项
         * @return {?}
         */
        AmapBezierCurveService.prototype.create = /**
         * 创建贝瑟尔曲线 AMap.BezierCurve
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                options.map = m;
                _this.bezierCurve = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.BezierCurve(options); }));
                _this.logger.d(TAG$f, 'new BezierCurve created.');
                _this.bezierCurve$.next(_this.bezierCurve);
                _this.bezierCurve$.complete();
                return _this.bezierCurve;
            })));
        };
        /**
         * 销毁贝瑟尔曲线
         */
        /**
         * 销毁贝瑟尔曲线
         * @return {?}
         */
        AmapBezierCurveService.prototype.destroy = /**
         * 销毁贝瑟尔曲线
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$f, 'BezierCurve destroyed.');
                _this.bezierCurve = null;
            }));
        };
        /**
         * @return {?}
         */
        AmapBezierCurveService.prototype.getEditor = /**
         * @return {?}
         */
        function () {
            // plugin is loading:
            return this.editor$.asObservable();
        };
        /**
         * @return {?}
         */
        AmapBezierCurveService.prototype.getPolyEditor = /**
         * @return {?}
         */
        function () {
            return this.polyEditor$.asObservable();
        };
        /**
         * 加载编辑插件
         */
        /**
         * 加载编辑插件
         * @return {?}
         */
        AmapBezierCurveService.prototype.loadEditor = /**
         * 加载编辑插件
         * @return {?}
         */
        function () {
            return this.plugins.load('AMap.BezierCurveEditor');
        };
        /**
         * @return {?}
         */
        AmapBezierCurveService.prototype.loadPolyEditor = /**
         * @return {?}
         */
        function () {
            return this.plugins.load('AMap.PolyEditor');
        };
        /**
         * 创建编辑器
         */
        /**
         * 创建编辑器
         * @return {?}
         */
        AmapBezierCurveService.prototype.createEditor = /**
         * 创建编辑器
         * @return {?}
         */
        function () {
            var _this = this;
            return this.loadEditor().pipe(operators.switchMapTo(rxjs.zip(this.amaps.get(), this.get())), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], p = _b[1];
                _this.editor = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.BezierCurveEditor(m, p); }));
                _this.logger.d(TAG$f, 'new BezierCurveEditor created.');
                _this.editor$.next(_this.editor);
                _this.editor$.complete();
                return _this.editor;
            })));
        };
        /**
         * @return {?}
         */
        AmapBezierCurveService.prototype.createPolyEditor = /**
         * @return {?}
         */
        function () {
            var _this = this;
            return this.loadPolyEditor().pipe(operators.switchMapTo(rxjs.zip(this.amaps.get(), this.get())), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], p = _b[1];
                _this.polyEditor = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.PolyEditor(m, p); }));
                _this.logger.d(TAG$f, 'new PolyEditor created.');
                _this.polyEditor$.next(_this.polyEditor);
                _this.polyEditor$.complete();
                return _this.polyEditor;
            })));
        };
        /**
         * 开关编辑器
         * @param v 开关选项
         */
        /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        AmapBezierCurveService.prototype.toggleEditor = /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        function (v) {
            if (v && !this.editor) {
                this.createEditor().subscribe((/**
                 * @param {?} editor
                 * @return {?}
                 */
                function (editor) { return editor.open(); }));
                return;
            }
            if (this.editor) {
                if (v) {
                    this.editor.open();
                }
                else {
                    this.editor.close();
                }
            }
        };
        /**
         * @param {?} v
         * @return {?}
         */
        AmapBezierCurveService.prototype.togglePolyEditor = /**
         * @param {?} v
         * @return {?}
         */
        function (v) {
            if (v && !this.polyEditor) {
                this.createPolyEditor().subscribe((/**
                 * @param {?} editor
                 * @return {?}
                 */
                function (editor) { return editor.open(); }));
                return;
            }
            if (this.polyEditor) {
                if (v) {
                    this.polyEditor.open();
                }
                else {
                    this.polyEditor.close();
                }
            }
        };
        AmapBezierCurveService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapBezierCurveService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone },
            { type: PluginLoaderService }
        ]; };
        return AmapBezierCurveService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.bezierCurve;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.bezierCurve$;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.editor;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.editor$;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.polyEditor;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.polyEditor$;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.ngZone;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveService.prototype.plugins;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-bezier-curve/amap-bezier-curve.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$g = 'amap-bezier-curve';
    /** @type {?} */
    var BezierCurveOptions = __spread(PathOverlayOptions, [
        'isOutline',
        'outlineColor',
        'dirColor',
        'borderWeight',
        'showDir',
        'path',
    ]);
    var AmapBezierCurveDirective = /** @class */ (function (_super) {
        __extends(AmapBezierCurveDirective, _super);
        function AmapBezierCurveDirective(os, binder, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.logger = logger;
            _this.ngZone = ngZone;
            /**
             * 额外: 是否隐藏
             */
            _this.hidden = false;
            /**
             * 额外: 是否开启曲线编辑器
             */
            _this.editor = false;
            /**
             * 额外: 是否开启折线编辑器
             */
            _this.polyEditor = false;
            // directive events:
            _this.naReady = new core.EventEmitter();
            _this.inited = false;
            /** @type {?} */
            var editor = _this.os.getEditor();
            /** @type {?} */
            var polyEditor = _this.os.getPolyEditor();
            _this.naEditorAddNode = _this.binder.bindEvent(editor, 'addnode');
            _this.naEditorRemoveNode = _this.binder.bindEvent(editor, 'removenode');
            _this.naEditorAdjust = _this.binder.bindEvent(editor, 'adjust');
            _this.naEditorEnd = _this.binder.bindEvent(editor, 'end');
            _this.naPolyEditorAddNode = _this.binder.bindEvent(polyEditor, 'addnode');
            _this.naPolyEditorRemoveNode = _this.binder.bindEvent(polyEditor, 'removenode');
            _this.naPolyEditorAdjust = _this.binder.bindEvent(polyEditor, 'adjust');
            _this.naPolyEditorEnd = _this.binder.bindEvent(polyEditor, 'end');
            return _this;
        }
        /**
         * @return {?}
         */
        AmapBezierCurveDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapBezierCurveDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var bezierCurve = this.get();
            if (!this.inited) {
                this.logger.d(TAG$g, 'initializing ...');
                /** @type {?} */
                var options = this.options || getOptions(this, BezierCurveOptions);
                this.logger.d(TAG$g, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$g, 'bezierCurve is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('path'), bezierCurve).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setPath(v);
                }));
                rxjs.zip(filter.has('options'), bezierCurve).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setOptions(v || {});
                }));
                rxjs.zip(filter.has('extData'), bezierCurve).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setExtData(v);
                }));
            }
            rxjs.zip(filter.has('hidden'), bezierCurve).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                return v ? p.hide() : p.show();
            }));
            filter.has('editor').subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _this.os.toggleEditor(v); }));
            filter.has('polyEditor').subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _this.os.togglePolyEditor(v); }));
        };
        /**
         * 获取已创建的 AMap.BezierCurve 对象
         */
        /**
         * 获取已创建的 AMap.BezierCurve 对象
         * @return {?}
         */
        AmapBezierCurveDirective.prototype.get = /**
         * 获取已创建的 AMap.BezierCurve 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapBezierCurveDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-bezier-curve',
                        exportAs: 'bezier-curve',
                        providers: [AmapBezierCurveService],
                    },] }
        ];
        /** @nocollapse */
        AmapBezierCurveDirective.ctorParameters = function () { return [
            { type: AmapBezierCurveService },
            { type: EventBinderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapBezierCurveDirective.propDecorators = {
            isOutline: [{ type: core.Input }],
            outlineColor: [{ type: core.Input }],
            dirColor: [{ type: core.Input }],
            borderWeight: [{ type: core.Input }],
            showDir: [{ type: core.Input }],
            path: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            editor: [{ type: core.Input }],
            polyEditor: [{ type: core.Input }],
            options: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naEditorAddNode: [{ type: core.Output }],
            naEditorRemoveNode: [{ type: core.Output }],
            naEditorAdjust: [{ type: core.Output }],
            naEditorEnd: [{ type: core.Output }],
            naPolyEditorAddNode: [{ type: core.Output }],
            naPolyEditorRemoveNode: [{ type: core.Output }],
            naPolyEditorAdjust: [{ type: core.Output }],
            naPolyEditorEnd: [{ type: core.Output }]
        };
        return AmapBezierCurveDirective;
    }(AMapPathOverlay));
    if (false) {
        /**
         * 线条是否带描边
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.isOutline;
        /**
         * 线条描边颜色
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.outlineColor;
        /**
         * 方向箭头颜色
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.dirColor;
        /**
         * 描边的宽度
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.borderWeight;
        /**
         * 是否延路径显示方向箭头
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.showDir;
        /**
         * 贝瑟尔曲线的路径
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.path;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.hidden;
        /**
         * 额外: 是否开启曲线编辑器
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.editor;
        /**
         * 额外: 是否开启折线编辑器
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.polyEditor;
        /**
         * 额外: 会覆盖其他属性的配置方式
         * @type {?}
         */
        AmapBezierCurveDirective.prototype.options;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naReady;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naEditorAddNode;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naEditorRemoveNode;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naEditorAdjust;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naEditorEnd;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naPolyEditorAddNode;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naPolyEditorRemoveNode;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naPolyEditorAdjust;
        /** @type {?} */
        AmapBezierCurveDirective.prototype.naPolyEditorEnd;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapBezierCurveDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapBezierCurveDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapBezierCurveDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-rectangle/amap-rectangle.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$h = 'AmapRectangle';
    var AmapRectangleService = /** @class */ (function () {
        function AmapRectangleService(amaps, logger, ngZone, plugins) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.plugins = plugins;
            this.rectangle$ = new rxjs.ReplaySubject(1);
            this.editor$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取矩形
         */
        /**
         * 获取矩形
         * @return {?}
         */
        AmapRectangleService.prototype.get = /**
         * 获取矩形
         * @return {?}
         */
        function () {
            return this.rectangle$.asObservable();
        };
        /**
         * 创建矩形 AMap.Rectangle
         * @param options 选项
         */
        /**
         * 创建矩形 AMap.Rectangle
         * @param {?} options 选项
         * @return {?}
         */
        AmapRectangleService.prototype.create = /**
         * 创建矩形 AMap.Rectangle
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                options.map = m;
                _this.rectangle = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Rectangle(options); }));
                _this.logger.d(TAG$h, 'new Rectangle created.');
                _this.rectangle$.next(_this.rectangle);
                _this.rectangle$.complete();
                return _this.rectangle;
            })));
        };
        /**
         * 销毁矩形
         */
        /**
         * 销毁矩形
         * @return {?}
         */
        AmapRectangleService.prototype.destroy = /**
         * 销毁矩形
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$h, 'Rectangle destroyed.');
                _this.rectangle = null;
            }));
        };
        /**
         * @return {?}
         */
        AmapRectangleService.prototype.getEditor = /**
         * @return {?}
         */
        function () {
            // plugin is loading:
            return this.editor$.asObservable();
        };
        /**
         * 加载编辑插件
         */
        /**
         * 加载编辑插件
         * @return {?}
         */
        AmapRectangleService.prototype.loadEditor = /**
         * 加载编辑插件
         * @return {?}
         */
        function () {
            return this.plugins.load('AMap.RectangleEditor');
        };
        /**
         * 创建编辑器
         */
        /**
         * 创建编辑器
         * @return {?}
         */
        AmapRectangleService.prototype.createEditor = /**
         * 创建编辑器
         * @return {?}
         */
        function () {
            var _this = this;
            return this.loadEditor().pipe(operators.switchMapTo(rxjs.zip(this.amaps.get(), this.get())), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], p = _b[1];
                _this.editor = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.RectangleEditor(m, p); }));
                _this.logger.d(TAG$h, 'new RectangleEditor created.');
                _this.editor$.next(_this.editor);
                _this.editor$.complete();
                return _this.editor;
            })));
        };
        /**
         * 开关编辑器
         * @param v 开关选项
         */
        /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        AmapRectangleService.prototype.toggleEditor = /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        function (v) {
            if (v && !this.editor) {
                this.createEditor().subscribe((/**
                 * @param {?} editor
                 * @return {?}
                 */
                function (editor) { return editor.open(); }));
                return;
            }
            if (this.editor) {
                if (v) {
                    this.editor.open();
                }
                else {
                    this.editor.close();
                }
            }
        };
        AmapRectangleService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapRectangleService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone },
            { type: PluginLoaderService }
        ]; };
        return AmapRectangleService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapRectangleService.prototype.rectangle;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleService.prototype.rectangle$;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleService.prototype.editor;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleService.prototype.editor$;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleService.prototype.ngZone;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleService.prototype.plugins;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-rectangle/amap-rectangle.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$i = 'amap-rectangle';
    /** @type {?} */
    var RectangleOptions = __spread(PolygonOptions, ['bounds']);
    var AmapRectangleDirective = /** @class */ (function (_super) {
        __extends(AmapRectangleDirective, _super);
        function AmapRectangleDirective(os, binder, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.logger = logger;
            _this.ngZone = ngZone;
            _this.inited = false;
            return _this;
        }
        /**
         * @return {?}
         */
        AmapRectangleDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapRectangleDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var rectangle = this.get();
            if (!this.inited) {
                this.logger.d(TAG$i, 'initializing ...');
                /** @type {?} */
                var options = this.options || getOptions(this, RectangleOptions);
                this.logger.d(TAG$i, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$i, 'rectangle is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('path'), rectangle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setPath(v);
                }));
                rxjs.zip(filter.has('options'), rectangle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setOptions(v || {});
                }));
                rxjs.zip(filter.has('bounds'), rectangle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setBounds(v);
                }));
                rxjs.zip(filter.has('extData'), rectangle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setExtData(v);
                }));
            }
            rxjs.zip(filter.has('hidden'), rectangle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                return (v ? p.hide() : p.show());
            }));
            filter.has('editor').subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _this.os.toggleEditor(v); }));
        };
        /**
         * 获取已创建的 AMap.Rectangle 对象
         */
        /**
         * 获取已创建的 AMap.Rectangle 对象
         * @return {?}
         */
        AmapRectangleDirective.prototype.get = /**
         * 获取已创建的 AMap.Rectangle 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapRectangleDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-rectangle',
                        exportAs: 'rectangle',
                        providers: [AmapRectangleService],
                    },] }
        ];
        /** @nocollapse */
        AmapRectangleDirective.ctorParameters = function () { return [
            { type: AmapRectangleService },
            { type: EventBinderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapRectangleDirective.propDecorators = {
            bounds: [{ type: core.Input }],
            options: [{ type: core.Input }]
        };
        return AmapRectangleDirective;
    }(AMapPolygon));
    if (false) {
        /**
         * 矩形的范围
         * @type {?}
         */
        AmapRectangleDirective.prototype.bounds;
        /**
         * 额外: 会覆盖其他属性的配置方式
         * @type {?}
         */
        AmapRectangleDirective.prototype.options;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapRectangleDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapRectangleDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapRectangleDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: base/amap-circle.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var CircleOptions = [
        'zIndex',
        'center',
        'bubble',
        'cursor',
        'radius',
        'strokeColor',
        'strokeOpacity',
        'strokeWeight',
        'fillColor',
        'fillOpacity',
        'strokeStyle',
        'extData',
        'strokeDasharray',
    ];
    /**
     * @template T
     */
    var AMapCircle = /** @class */ (function (_super) {
        __extends(AMapCircle, _super);
        function AMapCircle(os, binder) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            /**
             * 额外: 是否隐藏
             */
            _this.hidden = false;
            /**
             * 额外: 是否开启编辑器
             */
            _this.editor = false;
            // directive events:
            _this.naReady = new core.EventEmitter();
            return _this;
        }
        AMapCircle.propDecorators = {
            zIndex: [{ type: core.Input }],
            center: [{ type: core.Input }],
            radius: [{ type: core.Input }],
            strokeColor: [{ type: core.Input }],
            strokeOpacity: [{ type: core.Input }],
            strokeWeight: [{ type: core.Input }],
            fillColor: [{ type: core.Input }],
            fillOpacity: [{ type: core.Input }],
            strokeStyle: [{ type: core.Input }],
            strokeDasharray: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            editor: [{ type: core.Input }],
            options: [{ type: core.Input }],
            naReady: [{ type: core.Output }]
        };
        return AMapCircle;
    }(AMapShapeOverlay));
    if (false) {
        /**
         * 层叠顺序，默认zIndex:10
         * @type {?}
         */
        AMapCircle.prototype.zIndex;
        /**
         * 圆心位置
         * @type {?}
         */
        AMapCircle.prototype.center;
        /**
         * 圆半径，单位:米
         * @type {?}
         */
        AMapCircle.prototype.radius;
        /**
         * 线条颜色，使用16进制颜色代码赋值。默认值为#006600
         * @type {?}
         */
        AMapCircle.prototype.strokeColor;
        /**
         * 轮廓线透明度，取值范围[0,1]，0表示完全透明，1表示不透明。默认为0.9
         * @type {?}
         */
        AMapCircle.prototype.strokeOpacity;
        /**
         * 轮廓线宽度
         * @type {?}
         */
        AMapCircle.prototype.strokeWeight;
        /**
         * 圆形填充颜色,使用16进制颜色代码赋值。默认值为#006600
         * @type {?}
         */
        AMapCircle.prototype.fillColor;
        /**
         * 圆形填充透明度，取值范围[0,1]，0表示完全透明，1表示不透明。默认为0.9
         * @type {?}
         */
        AMapCircle.prototype.fillOpacity;
        /**
         * 轮廓线样式，实线:solid，虚线:dashed
         * @type {?}
         */
        AMapCircle.prototype.strokeStyle;
        /**
         * 勾勒形状轮廓的虚线和间隙的样式
         * @type {?}
         */
        AMapCircle.prototype.strokeDasharray;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        AMapCircle.prototype.hidden;
        /**
         * 额外: 是否开启编辑器
         * @type {?}
         */
        AMapCircle.prototype.editor;
        /**
         * 额外: 会覆盖其他属性的配置方式
         * @type {?}
         */
        AMapCircle.prototype.options;
        /** @type {?} */
        AMapCircle.prototype.naReady;
        /**
         * @type {?}
         * @protected
         */
        AMapCircle.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AMapCircle.prototype.binder;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-circle/amap-circle.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$j = 'AmapCircle';
    var AmapCircleService = /** @class */ (function () {
        function AmapCircleService(amaps, logger, ngZone, plugins) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.plugins = plugins;
            this.circle$ = new rxjs.ReplaySubject(1);
            this.editor$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取圆形
         */
        /**
         * 获取圆形
         * @return {?}
         */
        AmapCircleService.prototype.get = /**
         * 获取圆形
         * @return {?}
         */
        function () {
            return this.circle$.asObservable();
        };
        /**
         * 创建圆形 AMap.Circle
         * @param options 选项
         */
        /**
         * 创建圆形 AMap.Circle
         * @param {?} options 选项
         * @return {?}
         */
        AmapCircleService.prototype.create = /**
         * 创建圆形 AMap.Circle
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                options.map = m;
                _this.circle = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Circle(options); }));
                _this.logger.d(TAG$j, 'new Circle created.');
                _this.circle$.next(_this.circle);
                _this.circle$.complete();
                return _this.circle;
            })));
        };
        /**
         * 销毁圆形
         */
        /**
         * 销毁圆形
         * @return {?}
         */
        AmapCircleService.prototype.destroy = /**
         * 销毁圆形
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$j, 'Circle destroyed.');
                _this.circle = null;
            }));
        };
        /**
         * @return {?}
         */
        AmapCircleService.prototype.getEditor = /**
         * @return {?}
         */
        function () {
            // plugin is loading:
            return this.editor$.asObservable();
        };
        /**
         * 加载编辑插件
         */
        /**
         * 加载编辑插件
         * @return {?}
         */
        AmapCircleService.prototype.loadEditor = /**
         * 加载编辑插件
         * @return {?}
         */
        function () {
            return this.plugins.load('AMap.CircleEditor');
        };
        /**
         * 创建编辑器
         */
        /**
         * 创建编辑器
         * @return {?}
         */
        AmapCircleService.prototype.createEditor = /**
         * 创建编辑器
         * @return {?}
         */
        function () {
            var _this = this;
            return this.loadEditor().pipe(operators.switchMapTo(rxjs.zip(this.amaps.get(), this.get())), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], p = _b[1];
                _this.editor = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.CircleEditor(m, p); }));
                _this.logger.d(TAG$j, 'new CircleEditor created.');
                _this.editor$.next(_this.editor);
                _this.editor$.complete();
                return _this.editor;
            })));
        };
        /**
         * 开关编辑器
         * @param v 开关选项
         */
        /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        AmapCircleService.prototype.toggleEditor = /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        function (v) {
            if (v && !this.editor) {
                this.createEditor().subscribe((/**
                 * @param {?} editor
                 * @return {?}
                 */
                function (editor) { return editor.open(); }));
                return;
            }
            if (this.editor) {
                if (v) {
                    this.editor.open();
                }
                else {
                    this.editor.close();
                }
            }
        };
        AmapCircleService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapCircleService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone },
            { type: PluginLoaderService }
        ]; };
        return AmapCircleService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapCircleService.prototype.circle;
        /**
         * @type {?}
         * @private
         */
        AmapCircleService.prototype.circle$;
        /**
         * @type {?}
         * @private
         */
        AmapCircleService.prototype.editor;
        /**
         * @type {?}
         * @private
         */
        AmapCircleService.prototype.editor$;
        /**
         * @type {?}
         * @private
         */
        AmapCircleService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapCircleService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapCircleService.prototype.ngZone;
        /**
         * @type {?}
         * @private
         */
        AmapCircleService.prototype.plugins;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-circle/amap-circle.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$k = 'amap-circle';
    var AmapCircleDirective = /** @class */ (function (_super) {
        __extends(AmapCircleDirective, _super);
        function AmapCircleDirective(os, binder, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.logger = logger;
            _this.ngZone = ngZone;
            _this.inited = false;
            /** @type {?} */
            var editor = _this.os.getEditor();
            _this.naEditorAddNode = _this.binder.bindEvent(editor, 'addnode');
            _this.naEditorRemoveNode = _this.binder.bindEvent(editor, 'removenode');
            _this.naEditorAdjust = _this.binder.bindEvent(editor, 'adjust');
            _this.naEditorEnd = _this.binder.bindEvent(editor, 'end');
            return _this;
        }
        /**
         * @return {?}
         */
        AmapCircleDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapCircleDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var circle = this.get();
            if (!this.inited) {
                this.logger.d(TAG$k, 'initializing ...');
                /** @type {?} */
                var options = this.options || getOptions(this, CircleOptions);
                this.logger.d(TAG$k, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$k, 'circle is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('center'), circle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setCenter(v);
                }));
                rxjs.zip(filter.has('options'), circle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setOptions(v || {});
                }));
                rxjs.zip(filter.has('radius'), circle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setRadius(v);
                }));
                rxjs.zip(filter.has('extData'), circle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setExtData(v);
                }));
            }
            rxjs.zip(filter.has('hidden'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                return (v ? p.hide() : p.show());
            }));
            filter.has('editor').subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _this.os.toggleEditor(v); }));
        };
        /**
         * 获取已创建的 AMap.Circle 对象
         */
        /**
         * 获取已创建的 AMap.Circle 对象
         * @return {?}
         */
        AmapCircleDirective.prototype.get = /**
         * 获取已创建的 AMap.Circle 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapCircleDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-circle',
                        exportAs: 'circle',
                        providers: [AmapCircleService],
                    },] }
        ];
        /** @nocollapse */
        AmapCircleDirective.ctorParameters = function () { return [
            { type: AmapCircleService },
            { type: EventBinderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapCircleDirective.propDecorators = {
            naEditorAddNode: [{ type: core.Output }],
            naEditorRemoveNode: [{ type: core.Output }],
            naEditorAdjust: [{ type: core.Output }],
            naEditorEnd: [{ type: core.Output }]
        };
        return AmapCircleDirective;
    }(AMapCircle));
    if (false) {
        /** @type {?} */
        AmapCircleDirective.prototype.naEditorAddNode;
        /** @type {?} */
        AmapCircleDirective.prototype.naEditorRemoveNode;
        /** @type {?} */
        AmapCircleDirective.prototype.naEditorAdjust;
        /** @type {?} */
        AmapCircleDirective.prototype.naEditorEnd;
        /**
         * @type {?}
         * @private
         */
        AmapCircleDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapCircleDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapCircleDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapCircleDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapCircleDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-circle-marker/amap-circle-marker.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$l = 'AmapCircleMarker';
    var AmapCircleMarkerService = /** @class */ (function () {
        function AmapCircleMarkerService(amaps, logger, ngZone) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.circle$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取圆点标记
         */
        /**
         * 获取圆点标记
         * @return {?}
         */
        AmapCircleMarkerService.prototype.get = /**
         * 获取圆点标记
         * @return {?}
         */
        function () {
            return this.circle$.asObservable();
        };
        /**
         * 创建圆点标记 AMap.CircleMarker
         * @param options 选项
         */
        /**
         * 创建圆点标记 AMap.CircleMarker
         * @param {?} options 选项
         * @return {?}
         */
        AmapCircleMarkerService.prototype.create = /**
         * 创建圆点标记 AMap.CircleMarker
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                options.map = m;
                _this.circle = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.CircleMarker(options); }));
                _this.logger.d(TAG$l, 'new CircleMarker created.');
                _this.circle$.next(_this.circle);
                _this.circle$.complete();
                return _this.circle;
            })));
        };
        /**
         * 销毁圆点标记
         */
        /**
         * 销毁圆点标记
         * @return {?}
         */
        AmapCircleMarkerService.prototype.destroy = /**
         * 销毁圆点标记
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$l, 'CircleMarker destroyed.');
                _this.circle = null;
            }));
        };
        AmapCircleMarkerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapCircleMarkerService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapCircleMarkerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapCircleMarkerService.prototype.circle;
        /**
         * @type {?}
         * @private
         */
        AmapCircleMarkerService.prototype.circle$;
        /**
         * @type {?}
         * @private
         */
        AmapCircleMarkerService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapCircleMarkerService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapCircleMarkerService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-circle-marker/amap-circle-marker.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$m = 'amap-circle-marker';
    var AmapCircleMarkerDirective = /** @class */ (function (_super) {
        __extends(AmapCircleMarkerDirective, _super);
        function AmapCircleMarkerDirective(os, binder, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.logger = logger;
            _this.ngZone = ngZone;
            _this.inited = false;
            return _this;
        }
        /**
         * @return {?}
         */
        AmapCircleMarkerDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapCircleMarkerDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var circle = this.get();
            if (!this.inited) {
                this.logger.d(TAG$m, 'initializing ...');
                /** @type {?} */
                var options = this.options || getOptions(this, CircleOptions);
                this.logger.d(TAG$m, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$m, 'circle marker is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('center'), circle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setCenter(v);
                }));
                rxjs.zip(filter.has('options'), circle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setOptions(v || {});
                }));
                rxjs.zip(filter.has('radius'), circle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setRadius(v);
                }));
                rxjs.zip(filter.has('extData'), circle).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setExtData(v);
                }));
            }
            rxjs.zip(filter.has('hidden'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                return (v ? p.hide() : p.show());
            }));
        };
        /**
         * 获取已创建的 AMap.CircleMarker 对象
         */
        /**
         * 获取已创建的 AMap.CircleMarker 对象
         * @return {?}
         */
        AmapCircleMarkerDirective.prototype.get = /**
         * 获取已创建的 AMap.CircleMarker 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapCircleMarkerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-circle-marker',
                        exportAs: 'circle-marker',
                        providers: [AmapCircleMarkerService],
                    },] }
        ];
        /** @nocollapse */
        AmapCircleMarkerDirective.ctorParameters = function () { return [
            { type: AmapCircleMarkerService },
            { type: EventBinderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapCircleMarkerDirective;
    }(AMapCircle));
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapCircleMarkerDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapCircleMarkerDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapCircleMarkerDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapCircleMarkerDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapCircleMarkerDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-ellipse/amap-ellipse.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$n = 'AmapEllipse';
    var AmapEllipseService = /** @class */ (function () {
        function AmapEllipseService(amaps, logger, ngZone, plugins) {
            this.amaps = amaps;
            this.logger = logger;
            this.ngZone = ngZone;
            this.plugins = plugins;
            this.ellipse$ = new rxjs.ReplaySubject(1);
            this.editor$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取椭圆
         */
        /**
         * 获取椭圆
         * @return {?}
         */
        AmapEllipseService.prototype.get = /**
         * 获取椭圆
         * @return {?}
         */
        function () {
            return this.ellipse$.asObservable();
        };
        /**
         * 创建椭圆 AMap.Ellipse
         * @param options 选项
         */
        /**
         * 创建椭圆 AMap.Ellipse
         * @param {?} options 选项
         * @return {?}
         */
        AmapEllipseService.prototype.create = /**
         * 创建椭圆 AMap.Ellipse
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.amaps.get().pipe(operators.map((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                options.map = m;
                _this.ellipse = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Ellipse(options); }));
                _this.logger.d(TAG$n, 'new Ellipse created.');
                _this.ellipse$.next(_this.ellipse);
                _this.ellipse$.complete();
                return _this.ellipse;
            })));
        };
        /**
         * 销毁椭圆
         */
        /**
         * 销毁椭圆
         * @return {?}
         */
        AmapEllipseService.prototype.destroy = /**
         * 销毁椭圆
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$n, 'Ellipse destroyed.');
                _this.ellipse = null;
            }));
        };
        /**
         * @return {?}
         */
        AmapEllipseService.prototype.getEditor = /**
         * @return {?}
         */
        function () {
            // plugin is loading:
            return this.editor$.asObservable();
        };
        /**
         * 加载编辑插件
         */
        /**
         * 加载编辑插件
         * @return {?}
         */
        AmapEllipseService.prototype.loadEditor = /**
         * 加载编辑插件
         * @return {?}
         */
        function () {
            return this.plugins.load('AMap.EllipseEditor');
        };
        /**
         * 创建编辑器
         */
        /**
         * 创建编辑器
         * @return {?}
         */
        AmapEllipseService.prototype.createEditor = /**
         * 创建编辑器
         * @return {?}
         */
        function () {
            var _this = this;
            return this.loadEditor().pipe(operators.switchMapTo(rxjs.zip(this.amaps.get(), this.get())), operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], p = _b[1];
                _this.editor = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.EllipseEditor(m, p); }));
                _this.logger.d(TAG$n, 'new EllipseEditor created.');
                _this.editor$.next(_this.editor);
                _this.editor$.complete();
                return _this.editor;
            })));
        };
        /**
         * 开关编辑器
         * @param v 开关选项
         */
        /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        AmapEllipseService.prototype.toggleEditor = /**
         * 开关编辑器
         * @param {?} v 开关选项
         * @return {?}
         */
        function (v) {
            if (v && !this.editor) {
                this.createEditor().subscribe((/**
                 * @param {?} editor
                 * @return {?}
                 */
                function (editor) { return editor.open(); }));
                return;
            }
            if (this.editor) {
                if (v) {
                    this.editor.open();
                }
                else {
                    this.editor.close();
                }
            }
        };
        AmapEllipseService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapEllipseService.ctorParameters = function () { return [
            { type: AMapService },
            { type: LoggerService },
            { type: core.NgZone },
            { type: PluginLoaderService }
        ]; };
        return AmapEllipseService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapEllipseService.prototype.ellipse;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseService.prototype.ellipse$;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseService.prototype.editor;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseService.prototype.editor$;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseService.prototype.ngZone;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseService.prototype.plugins;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-ellipse/amap-ellipse.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$o = 'amap-ellipse';
    /** @type {?} */
    var EllipseOptions = __spread(PolygonOptions, ['center', 'radius']);
    var AmapEllipseDirective = /** @class */ (function (_super) {
        __extends(AmapEllipseDirective, _super);
        function AmapEllipseDirective(os, binder, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.logger = logger;
            _this.ngZone = ngZone;
            _this.inited = false;
            return _this;
        }
        /**
         * @return {?}
         */
        AmapEllipseDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapEllipseDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var ellipse = this.get();
            if (!this.inited) {
                this.logger.d(TAG$o, 'initializing ...');
                /** @type {?} */
                var options = this.options || getOptions(this, EllipseOptions);
                this.logger.d(TAG$o, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$o, 'ellipse is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('center'), ellipse).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setCenter(v);
                }));
                rxjs.zip(filter.has('options'), ellipse).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setOptions(v || {});
                }));
                rxjs.zip(filter.has('extData'), ellipse).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setExtData(v);
                }));
            }
            rxjs.zip(filter.has('hidden'), ellipse).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                return (v ? p.hide() : p.show());
            }));
            filter.has('editor').subscribe((/**
             * @param {?} v
             * @return {?}
             */
            function (v) { return _this.os.toggleEditor(v); }));
        };
        /**
         * 获取已创建的 AMap.Ellipse 对象
         */
        /**
         * 获取已创建的 AMap.Ellipse 对象
         * @return {?}
         */
        AmapEllipseDirective.prototype.get = /**
         * 获取已创建的 AMap.Ellipse 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapEllipseDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-ellipse',
                        exportAs: 'ellipse',
                        providers: [AmapEllipseService],
                    },] }
        ];
        /** @nocollapse */
        AmapEllipseDirective.ctorParameters = function () { return [
            { type: AmapEllipseService },
            { type: EventBinderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapEllipseDirective.propDecorators = {
            center: [{ type: core.Input }],
            radius: [{ type: core.Input }],
            options: [{ type: core.Input }]
        };
        return AmapEllipseDirective;
    }(AMapPolygon));
    if (false) {
        /**
         * 椭圆的中心
         * @type {?}
         */
        AmapEllipseDirective.prototype.center;
        /**
         * 椭圆半径
         * @type {?}
         */
        AmapEllipseDirective.prototype.radius;
        /**
         * 额外: 会覆盖其他属性的配置方式
         * @type {?}
         */
        AmapEllipseDirective.prototype.options;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapEllipseDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapEllipseDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapEllipseDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-tool-bar/amap-tool-bar.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$p = 'AmapToolBar';
    var AMapToolBar;
    (function (AMapToolBar) {
        /**
         * @record
         */
        function Options() { }
        AMapToolBar.Options = Options;
        if (false) {
            /**
             * 相对于地图容器左上角的偏移量
             * @type {?|undefined}
             */
            Options.prototype.offset;
            /**
             * 控件停靠位置
             * LT:左上角;
             * RT:右上角;
             * LB:左下角;
             * RB:右下角;
             * @type {?|undefined}
             */
            Options.prototype.position;
            /**
             * 标尺键盘是否可见
             * @type {?|undefined}
             */
            Options.prototype.ruler;
            /**
             * 定位失败后，是否开启IP定位
             * @type {?|undefined}
             */
            Options.prototype.noIpLocate;
            /**
             * 是否显示定位按钮
             * @type {?|undefined}
             */
            Options.prototype.locate;
            /**
             * 是否使用精简模式
             * @type {?|undefined}
             */
            Options.prototype.liteStyle;
            /**
             * 方向键盘是否可见
             * @type {?|undefined}
             */
            Options.prototype.direction;
            /**
             * 是否自动定位，即地图初始化加载完成后，是否自动定位的用户所在地，仅在支持HTML5的浏览器中有效
             * @type {?|undefined}
             */
            Options.prototype.autoPosition;
            /**
             * 自定义定位图标，值为Marker对象
             * @type {?|undefined}
             */
            Options.prototype.locationMarker;
            /**
             * 是否使用高德定位sdk用来辅助优化定位效果
             * @type {?|undefined}
             */
            Options.prototype.useNative;
            /** @type {?|undefined} */
            Options.prototype.timeout;
        }
    })(AMapToolBar || (AMapToolBar = {}));
    var AmapToolBarService = /** @class */ (function () {
        function AmapToolBarService(amaps, plugin, logger, ngZone) {
            this.amaps = amaps;
            this.plugin = plugin;
            this.logger = logger;
            this.ngZone = ngZone;
            this.toolBar$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取工具条
         */
        /**
         * 获取工具条
         * @return {?}
         */
        AmapToolBarService.prototype.get = /**
         * 获取工具条
         * @return {?}
         */
        function () {
            return this.toolBar$.asObservable();
        };
        /**
         * 创建工具条 AMap.ToolBar
         * @param options 选项
         */
        /**
         * 创建工具条 AMap.ToolBar
         * @param {?} options 选项
         * @return {?}
         */
        AmapToolBarService.prototype.create = /**
         * 创建工具条 AMap.ToolBar
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return rxjs.zip(this.amaps.get(), this.plugin.load('AMap.ToolBar')).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), m = _b[0];
                _this.toolBar = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.ToolBar(options); }));
                _this.logger.d(TAG$p, 'new toolBar created.');
                m.addControl(_this.toolBar);
                _this.toolBar$.next(_this.toolBar);
                _this.toolBar$.complete();
                return _this.toolBar;
            })));
        };
        /**
         * 销毁工具条
         */
        /**
         * 销毁工具条
         * @return {?}
         */
        AmapToolBarService.prototype.destroy = /**
         * 销毁工具条
         * @return {?}
         */
        function () {
            var _this = this;
            rxjs.zip(this.amaps.get(), this.get()).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), m = _b[0], toolBar = _b[1];
                m.removeControl(toolBar);
                _this.logger.d(TAG$p, 'toolBar destroyed.');
                _this.toolBar = null;
            }));
        };
        AmapToolBarService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapToolBarService.ctorParameters = function () { return [
            { type: AMapService },
            { type: PluginLoaderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapToolBarService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapToolBarService.prototype.toolBar;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarService.prototype.toolBar$;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarService.prototype.plugin;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-tool-bar/amap-tool-bar.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$q = 'amap-tool-bar';
    /** @type {?} */
    var ToolBarOptions = [
        'offset',
        'position',
        'ruler',
        'noIpLocate',
        'locate',
        'liteStyle',
        'direction',
        'autoPosition',
        'locationMarker',
        'useNative',
    ];
    var AmapToolBarDirective = /** @class */ (function () {
        function AmapToolBarDirective(os, binder, amaps, pixels, logger, ngZone) {
            this.os = os;
            this.binder = binder;
            this.amaps = amaps;
            this.pixels = pixels;
            this.logger = logger;
            this.ngZone = ngZone;
            /**
             * 额外: 是否隐藏
             */
            this.hidden = false;
            // amap-tool-bar events:
            this.naReady = new core.EventEmitter();
            this.inited = false;
            /** @type {?} */
            var target = this.os.get();
            this.naShow = this.binder.bindEvent(target, 'show');
            this.naHide = this.binder.bindEvent(target, 'hide');
            this.naLocation = this.binder.bindEvent(target, 'location');
            this.naZoomChanged = this.binder.bindEvent(target, 'zoomchanged');
        }
        /**
         * @return {?}
         */
        AmapToolBarDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @return {?}
         */
        AmapToolBarDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.amaps.get().subscribe((/**
             * @return {?}
             */
            function () {
                _this.logger.d(TAG$q, 'initializing ...');
                /** @type {?} */
                var options = getOptions(_this, ToolBarOptions);
                if (_this.offset) {
                    options.offset = _this.pixels.create(_this.offset);
                }
                _this.logger.d(TAG$q, 'options:', options);
                _this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$q, 'toolbar is ready.');
                }));
                _this.inited = true;
                _this.get().subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.hidden ? m.hide() : m.show();
                }));
            }));
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapToolBarDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var toolbar = this.get();
            if (!this.inited) {
                return;
            }
            rxjs.zip(filter.notEmpty('offset'), toolbar).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                return m.setOffset(_this.pixels.create(v));
            }));
            rxjs.zip(filter.has('hidden'), toolbar).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                return (v ? m.hide() : m.show());
            }));
        };
        /**
         * 获取已创建的 AMap.ToolBar 对象
         */
        /**
         * 获取已创建的 AMap.ToolBar 对象
         * @return {?}
         */
        AmapToolBarDirective.prototype.get = /**
         * 获取已创建的 AMap.ToolBar 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        /**
         * @return {?}
         */
        AmapToolBarDirective.prototype.doLocation = /**
         * @return {?}
         */
        function () {
            this.os.get().subscribe((/**
             * @param {?} toolbar
             * @return {?}
             */
            function (toolbar) {
                toolbar.doLocation();
            }));
        };
        AmapToolBarDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-tool-bar',
                        exportAs: 'tool-bar',
                        providers: [AmapToolBarService],
                    },] }
        ];
        /** @nocollapse */
        AmapToolBarDirective.ctorParameters = function () { return [
            { type: AmapToolBarService },
            { type: EventBinderService },
            { type: AMapService },
            { type: PixelService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapToolBarDirective.propDecorators = {
            offset: [{ type: core.Input }],
            position: [{ type: core.Input }],
            ruler: [{ type: core.Input }],
            noIpLocate: [{ type: core.Input }],
            locate: [{ type: core.Input }],
            liteStyle: [{ type: core.Input }],
            direction: [{ type: core.Input }],
            autoPosition: [{ type: core.Input }],
            locationMarker: [{ type: core.Input }],
            useNative: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naShow: [{ type: core.Output }],
            naHide: [{ type: core.Output }],
            naLocation: [{ type: core.Output }],
            naZoomChanged: [{ type: core.Output }]
        };
        return AmapToolBarDirective;
    }());
    if (false) {
        /**
         * 相对于地图容器左上角的偏移量
         * @type {?}
         */
        AmapToolBarDirective.prototype.offset;
        /**
         * 控件停靠位置
         * LT: 左上角
         * RT: 右上角
         * LB: 左下角
         * RB: 右下角
         * @type {?}
         */
        AmapToolBarDirective.prototype.position;
        /**
         * 标尺键盘是否可见
         * @type {?}
         */
        AmapToolBarDirective.prototype.ruler;
        /**
         * 定位失败后，是否开启 IP 定位
         * @type {?}
         */
        AmapToolBarDirective.prototype.noIpLocate;
        /**
         * 是否显示定位按钮
         * @type {?}
         */
        AmapToolBarDirective.prototype.locate;
        /**
         * 是否使用精简模式
         * @type {?}
         */
        AmapToolBarDirective.prototype.liteStyle;
        /**
         * 方向键盘是否可见
         * @type {?}
         */
        AmapToolBarDirective.prototype.direction;
        /**
         * 是否自动定位，即地图初始化加载完成后，是否自动定位的用户所在地，仅在支持 HTML5 的浏览器中有效
         * @type {?}
         */
        AmapToolBarDirective.prototype.autoPosition;
        /**
         * 自定义定位图标，值为 Marker 对象
         * @type {?}
         */
        AmapToolBarDirective.prototype.locationMarker;
        /**
         * 是否使用高德定位 SDK 用来辅助优化定位效果
         * @type {?}
         */
        AmapToolBarDirective.prototype.useNative;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        AmapToolBarDirective.prototype.hidden;
        /** @type {?} */
        AmapToolBarDirective.prototype.naReady;
        /** @type {?} */
        AmapToolBarDirective.prototype.naShow;
        /** @type {?} */
        AmapToolBarDirective.prototype.naHide;
        /** @type {?} */
        AmapToolBarDirective.prototype.naLocation;
        /** @type {?} */
        AmapToolBarDirective.prototype.naZoomChanged;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapToolBarDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapToolBarDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarDirective.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarDirective.prototype.pixels;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapToolBarDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-marker-clusterer/amap-marker-clusterer.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AMapMarkerClusterer;
    (function (AMapMarkerClusterer) {
        /**
         * @record
         */
        function StyleObject() { }
        AMapMarkerClusterer.StyleObject = StyleObject;
        if (false) {
            /** @type {?|undefined} */
            StyleObject.prototype.url;
            /** @type {?|undefined} */
            StyleObject.prototype.size;
            /** @type {?|undefined} */
            StyleObject.prototype.offset;
            /** @type {?|undefined} */
            StyleObject.prototype.imageOffset;
            /** @type {?|undefined} */
            StyleObject.prototype.textColor;
            /** @type {?|undefined} */
            StyleObject.prototype.textSize;
        }
        /**
         * @record
         */
        function Options() { }
        AMapMarkerClusterer.Options = Options;
        if (false) {
            /**
             * 聚合计算时网格的像素大小，默认60
             * @type {?|undefined}
             */
            Options.prototype.gridSize;
            /**
             * 聚合的最小数量。默认值为2，即小于2个点则不能成为一个聚合
             * @type {?|undefined}
             */
            Options.prototype.minClusterSize;
            /**
             * 最大的聚合级别，大于该级别就不进行相应的聚合。默认值为18
             * @type {?|undefined}
             */
            Options.prototype.maxZoom;
            /**
             * 聚合点的图标位置是否是所有聚合内点的中心点。默认为否
             * @type {?|undefined}
             */
            Options.prototype.averageCenter;
            /**
             * 指定聚合后的点标记的图标样式，可缺省，缺省时为默认样式
             * @type {?|undefined}
             */
            Options.prototype.styles;
            /**
             * 该方法用来实现聚合点的自定义绘制
             * @type {?|undefined}
             */
            Options.prototype.renderClusterMarker;
            /**
             * 点击聚合点时，是否散开，默认值为：true
             * @type {?|undefined}
             */
            Options.prototype.zoomOnClick;
        }
    })(AMapMarkerClusterer || (AMapMarkerClusterer = {}));
    /** @type {?} */
    var TAG$r = 'AmapMarkerCluster';
    var AmapMarkerClustererService = /** @class */ (function () {
        function AmapMarkerClustererService(amaps, plugins, logger, ngZone) {
            this.amaps = amaps;
            this.plugins = plugins;
            this.logger = logger;
            this.ngZone = ngZone;
            this.markerClusterer$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取点聚合
         */
        /**
         * 获取点聚合
         * @return {?}
         */
        AmapMarkerClustererService.prototype.get = /**
         * 获取点聚合
         * @return {?}
         */
        function () {
            return this.markerClusterer$.asObservable();
        };
        /**
         * 创建点聚合 AMap.MarkerClusterer
         * @param options 选项
         */
        /**
         * 创建点聚合 AMap.MarkerClusterer
         * @param {?} options 选项
         * @return {?}
         */
        AmapMarkerClustererService.prototype.create = /**
         * 创建点聚合 AMap.MarkerClusterer
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return rxjs.zip(this.amaps.get(), this.plugins.load('AMap.MarkerClusterer')).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), m = _b[0];
                _this.markerClusterer = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.MarkerClusterer(m, [], options); }));
                _this.logger.d(TAG$r, 'new markerClusterer created.');
                _this.markerClusterer$.next(_this.markerClusterer);
                _this.markerClusterer$.complete();
                return _this.markerClusterer;
            })));
        };
        /**
         * 销毁点聚合
         */
        /**
         * 销毁点聚合
         * @return {?}
         */
        AmapMarkerClustererService.prototype.destroy = /**
         * 销毁点聚合
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.clearMarkers();
                m.setMap(null);
                _this.logger.d(TAG$r, 'markerClusterer destroyed.');
                _this.markerClusterer = null;
            }));
        };
        AmapMarkerClustererService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapMarkerClustererService.ctorParameters = function () { return [
            { type: AMapService },
            { type: PluginLoaderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapMarkerClustererService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererService.prototype.markerClusterer;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererService.prototype.markerClusterer$;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererService.prototype.plugins;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-marker-clusterer/amap-marker-clusterer.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$s = 'amap-marker-clusterer';
    /** @type {?} */
    var MarkerClusterOptions = [
        'gridSize',
        'minClusterSize',
        'maxZoom',
        'averageCenter',
        'styles',
        'renderClusterMarker',
        'zoomOnClick',
    ];
    var AmapMarkerClustererDirective = /** @class */ (function () {
        function AmapMarkerClustererDirective(os, binder, amaps, pixels, sizes, logger, ngZone) {
            this.os = os;
            this.binder = binder;
            this.amaps = amaps;
            this.pixels = pixels;
            this.sizes = sizes;
            this.logger = logger;
            this.ngZone = ngZone;
            // ---- Events ----
            this.naReady = new core.EventEmitter();
            // amap-marker directives:
            this.markerList = new core.QueryList();
            this.inited = false;
            /** @type {?} */
            var target = this.os.get();
            this.naClick = this.binder.bindEvent(target, 'click');
        }
        /**
         * @return {?}
         */
        AmapMarkerClustererDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @return {?}
         */
        AmapMarkerClustererDirective.prototype.ngOnInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.amaps.get().subscribe((/**
             * @return {?}
             */
            function () {
                _this.logger.d(TAG$s, 'initializing ...');
                /** @type {?} */
                var options = getOptions(_this, MarkerClusterOptions);
                if (options.styles) {
                    options.styles = options.styles.map((/**
                     * @param {?} style
                     * @return {?}
                     */
                    function (style) {
                        if (style.size) {
                            style.size = (/** @type {?} */ (_this.sizes.create(style.size)));
                        }
                        if (style.offset) {
                            style.offset = _this.pixels.create(style.offset);
                        }
                        if (style.imageOffset) {
                            style.imageOffset = _this.pixels.create(style.imageOffset);
                        }
                        return style;
                    }));
                }
                _this.logger.d(TAG$s, 'options:', options);
                _this.os.create(options).subscribe();
                _this.inited = true;
            }));
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapMarkerClustererDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            if (!this.inited) {
                return;
            }
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var cluster = this.get();
            rxjs.zip(filter.notEmpty('gridSize'), cluster).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], c = _b[1];
                return c.setGridSize(v);
            }));
            rxjs.zip(filter.notEmpty('minClusterSize'), cluster).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], c = _b[1];
                return c.setMinClusterSize(v);
            }));
            rxjs.zip(filter.has('maxZoom'), cluster).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], c = _b[1];
                return c.setMaxZoom(v);
            }));
            rxjs.zip(filter.has('averageCenter'), cluster).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], c = _b[1];
                return c.setAverageCenter(v);
            }));
            rxjs.zip(filter.has('styles'), cluster).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], c = _b[1];
                return c.setStyles(v);
            }));
        };
        /**
         * @return {?}
         */
        AmapMarkerClustererDirective.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.updateMarkers().subscribe((/**
             * @param {?} c
             * @return {?}
             */
            function (c) {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () { return _this.naReady.emit(c); }));
                _this.logger.d(TAG$s, 'markerClusterer is ready.');
            }));
            this.markerList.changes.subscribe((/**
             * @return {?}
             */
            function () { return _this.updateMarkers().subscribe(); }));
        };
        /**
         * @private
         * @return {?}
         */
        AmapMarkerClustererDirective.prototype.updateMarkers = /**
         * @private
         * @return {?}
         */
        function () {
            return rxjs.zip(rxjs.combineLatest(this.markerList.map((/**
             * @param {?} d
             * @return {?}
             */
            function (d) { return d.get(); }))), this.get()).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), markers = _b[0], cluster = _b[1];
                cluster.setMarkers(markers);
                return cluster;
            })));
        };
        /**
         * 获取已创建的 AMap.MarkerClusterer 对象
         */
        /**
         * 获取已创建的 AMap.MarkerClusterer 对象
         * @return {?}
         */
        AmapMarkerClustererDirective.prototype.get = /**
         * 获取已创建的 AMap.MarkerClusterer 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapMarkerClustererDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-marker-clusterer',
                        exportAs: 'marker-clusterer',
                        providers: [AmapMarkerClustererService],
                    },] }
        ];
        /** @nocollapse */
        AmapMarkerClustererDirective.ctorParameters = function () { return [
            { type: AmapMarkerClustererService },
            { type: EventBinderService },
            { type: AMapService },
            { type: PixelService },
            { type: SizeService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapMarkerClustererDirective.propDecorators = {
            gridSize: [{ type: core.Input }],
            minClusterSize: [{ type: core.Input }],
            maxZoom: [{ type: core.Input }],
            averageCenter: [{ type: core.Input }],
            styles: [{ type: core.Input }],
            renderClusterMarker: [{ type: core.Input }],
            zoomOnClick: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naClick: [{ type: core.Output }],
            markerList: [{ type: core.ContentChildren, args: [AmapMarkerDirective,] }]
        };
        return AmapMarkerClustererDirective;
    }());
    if (false) {
        /**
         * 聚合计算时网格的像素大小，默认60
         * @type {?}
         */
        AmapMarkerClustererDirective.prototype.gridSize;
        /**
         * 聚合的最小数量。默认值为2，即小于2个点则不能成为一个聚合
         * @type {?}
         */
        AmapMarkerClustererDirective.prototype.minClusterSize;
        /**
         * 最大的聚合级别，大于该级别就不进行相应的聚合。默认值为18
         * @type {?}
         */
        AmapMarkerClustererDirective.prototype.maxZoom;
        /**
         * 聚合点的图标位置是否是所有聚合内点的中心点。默认为否
         * @type {?}
         */
        AmapMarkerClustererDirective.prototype.averageCenter;
        /**
         * 指定聚合后的点标记的图标样式，可缺省，缺省时为默认样式
         * @type {?}
         */
        AmapMarkerClustererDirective.prototype.styles;
        /**
         * 该方法用来实现聚合点的自定义绘制
         * @type {?}
         */
        AmapMarkerClustererDirective.prototype.renderClusterMarker;
        /**
         * 点击聚合点时，是否散开，默认值为：true
         * @type {?}
         */
        AmapMarkerClustererDirective.prototype.zoomOnClick;
        /** @type {?} */
        AmapMarkerClustererDirective.prototype.naReady;
        /** @type {?} */
        AmapMarkerClustererDirective.prototype.naClick;
        /** @type {?} */
        AmapMarkerClustererDirective.prototype.markerList;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapMarkerClustererDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        AmapMarkerClustererDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererDirective.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererDirective.prototype.pixels;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererDirective.prototype.sizes;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapMarkerClustererDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-heatmap/amap-heatmap.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$t = 'AmapHeatmap';
    var AMapHeatmap;
    (function (AMapHeatmap) {
        /**
         * @record
         */
        function Options() { }
        AMapHeatmap.Options = Options;
        if (false) {
            /**
             * 热力图中单个点的半径，默认：30，单位：pixel
             * @type {?|undefined}
             */
            Options.prototype.radius;
            /**
             * 热力图的渐变区间
             * @type {?|undefined}
             */
            Options.prototype.gradient;
            /**
             * 热力图透明度数组，取值范围[0,1]，0表示完全透明，1表示不透明
             * 默认：[0,1]
             * @type {?|undefined}
             */
            Options.prototype.opacity;
            /**
             * 支持的缩放级别范围，取值范围[3-18]
             * 默认：[3,18]
             * @type {?|undefined}
             */
            Options.prototype.zooms;
            /** @type {?|undefined} */
            Options.prototype.rejectMapMask;
            /** @type {?|undefined} */
            Options.prototype.visible;
            /** @type {?|undefined} */
            Options.prototype.radiusUnit;
            /** @type {?|undefined} */
            Options.prototype.blur;
            /** @type {?|undefined} */
            Options.prototype.zIndex;
            /** @type {?|undefined} */
            Options.prototype.renderOnZooming;
            /* Skipping unnamed member:
            ['3d']?: {
                  heightScale?: number;
                  heightBezier?: number[];
                  gridSize?: number;
                  drawGridLine?: boolean;
                };*/
        }
        /**
         * @record
         */
        function Data() { }
        AMapHeatmap.Data = Data;
        if (false) {
            /**
             * 经度
             * @type {?}
             */
            Data.prototype.lng;
            /**
             * 维度
             * @type {?}
             */
            Data.prototype.lat;
            /**
             * 权重
             * @type {?}
             */
            Data.prototype.count;
        }
        /**
         * @record
         */
        function DataSet() { }
        AMapHeatmap.DataSet = DataSet;
        if (false) {
            /**
             * 权重的最大值
             * @type {?|undefined}
             */
            DataSet.prototype.max;
            /**
             * 坐标数据集
             * @type {?}
             */
            DataSet.prototype.data;
        }
    })(AMapHeatmap || (AMapHeatmap = {}));
    var AmapHeatmapService = /** @class */ (function () {
        function AmapHeatmapService(amaps, plugin, logger, ngZone) {
            this.amaps = amaps;
            this.plugin = plugin;
            this.logger = logger;
            this.ngZone = ngZone;
            this.heatmap$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取热力图
         */
        /**
         * 获取热力图
         * @return {?}
         */
        AmapHeatmapService.prototype.get = /**
         * 获取热力图
         * @return {?}
         */
        function () {
            return this.heatmap$.asObservable();
        };
        /**
         * 创建热力图 AMap.Heatmap
         * @param options 选项
         */
        /**
         * 创建热力图 AMap.Heatmap
         * @param {?} options 选项
         * @return {?}
         */
        AmapHeatmapService.prototype.create = /**
         * 创建热力图 AMap.Heatmap
         * @param {?} options 选项
         * @return {?}
         */
        function (options) {
            var _this = this;
            return rxjs.zip(this.amaps.get(), this.plugin.load('AMap.Heatmap')).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 1), m = _b[0];
                _this.heatmap = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Heatmap(m, options); }));
                _this.logger.d(TAG$t, 'new Heatmap created.');
                _this.heatmap$.next(_this.heatmap);
                _this.heatmap$.complete();
                return _this.heatmap;
            })));
        };
        /**
         * 销毁热力图
         */
        /**
         * 销毁热力图
         * @return {?}
         */
        AmapHeatmapService.prototype.destroy = /**
         * 销毁热力图
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} heatmap
             * @return {?}
             */
            function (heatmap) {
                heatmap.setMap(null);
                _this.logger.d(TAG$t, 'Heatmap destroyed.');
                _this.heatmap = null;
            }));
        };
        AmapHeatmapService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapHeatmapService.ctorParameters = function () { return [
            { type: AMapService },
            { type: PluginLoaderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return AmapHeatmapService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapService.prototype.heatmap;
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapService.prototype.heatmap$;
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapService.prototype.plugin;
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/amap-heatmap/amap-heatmap.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$u = 'amap-heatmap';
    /** @type {?} */
    var HeatmapOptions = ['radius', 'gradient', 'opacity', 'zooms'];
    var AmapHeatmapDirective = /** @class */ (function () {
        function AmapHeatmapDirective(os, logger, ngZone) {
            this.os = os;
            this.logger = logger;
            this.ngZone = ngZone;
            /**
             * 额外: 是否隐藏
             */
            this.hidden = false;
            // ---- Events ----
            this.naReady = new core.EventEmitter();
            this.inited = false;
        }
        /**
         * @return {?}
         */
        AmapHeatmapDirective.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        AmapHeatmapDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var heatmap = this.get();
            if (!this.inited) {
                this.logger.d(TAG$u, 'initializing ...');
                /** @type {?} */
                var options = this.options || getOptions(this, HeatmapOptions);
                this.logger.d(TAG$u, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$u, 'heatmap is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('options'), heatmap).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setOptions(v || {});
                }));
            }
            rxjs.zip(filter.notEmpty('dataset'), heatmap).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                p.setDataSet(v);
            }));
            rxjs.zip(filter.has('hidden'), heatmap).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], p = _b[1];
                return (v ? p.hide() : p.show());
            }));
        };
        /**
         * 获取已创建的 AMap.Heatmap 对象
         */
        /**
         * 获取已创建的 AMap.Heatmap 对象
         * @return {?}
         */
        AmapHeatmapDirective.prototype.get = /**
         * 获取已创建的 AMap.Heatmap 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        AmapHeatmapDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'amap-heatmap',
                        exportAs: 'heatmap',
                        providers: [AmapHeatmapService],
                    },] }
        ];
        /** @nocollapse */
        AmapHeatmapDirective.ctorParameters = function () { return [
            { type: AmapHeatmapService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        AmapHeatmapDirective.propDecorators = {
            radius: [{ type: core.Input }],
            gradient: [{ type: core.Input }],
            opacity: [{ type: core.Input }],
            zooms: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            options: [{ type: core.Input }],
            dataset: [{ type: core.Input }],
            naReady: [{ type: core.Output }]
        };
        return AmapHeatmapDirective;
    }());
    if (false) {
        /**
         * 热力图中单个点的半径，默认：30，单位：pixel
         * @type {?}
         */
        AmapHeatmapDirective.prototype.radius;
        /**
         * 热力图的渐变区间
         * @type {?}
         */
        AmapHeatmapDirective.prototype.gradient;
        /**
         * 热力图透明度数组，取值范围[0,1]，0表示完全透明，1表示不透明
         * 默认：[0,1]
         * @type {?}
         */
        AmapHeatmapDirective.prototype.opacity;
        /**
         * 支持的缩放级别范围，取值范围[3-18]
         * 默认：[3,18]
         * @type {?}
         */
        AmapHeatmapDirective.prototype.zooms;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        AmapHeatmapDirective.prototype.hidden;
        /**
         * 额外: 会覆盖其他属性的配置方式
         * @type {?}
         */
        AmapHeatmapDirective.prototype.options;
        /**
         * 额外: 坐标数据集
         * @type {?}
         */
        AmapHeatmapDirective.prototype.dataset;
        /** @type {?} */
        AmapHeatmapDirective.prototype.naReady;
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        AmapHeatmapDirective.prototype.os;
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapHeatmapDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/amap-plugin-loader.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$v = 'PluginLoader';
    var AmapPluginLoaderService = /** @class */ (function () {
        function AmapPluginLoaderService(mapLoader, logger) {
            this.mapLoader = mapLoader;
            this.logger = logger;
            this.state = new Map();
        }
        /**
         * 加载一个或多个插件
         */
        /**
         * 加载一个或多个插件
         * @param {?} name
         * @return {?}
         */
        AmapPluginLoaderService.prototype.load = /**
         * 加载一个或多个插件
         * @param {?} name
         * @return {?}
         */
        function (name) {
            var _this = this;
            /** @type {?} */
            var pKey = '';
            if (Array.isArray(name)) {
                pKey = name.join(',');
            }
            else {
                pKey = name;
            }
            if (this.state.has(pKey)) {
                return this.state.get(pKey).asObservable();
            }
            this.logger.d(TAG$v, 'loading plugin:', pKey, '...');
            return this.mapLoader.load().pipe(operators.switchMap((/**
             * @return {?}
             */
            function () {
                /** @type {?} */
                var loading$ = new rxjs.ReplaySubject(1);
                AMap.plugin(name, (/**
                 * @return {?}
                 */
                function () {
                    _this.logger.d(TAG$v, 'loading plugin:', pKey, 'COMPLETE');
                    loading$.next();
                    loading$.complete();
                }));
                _this.state.set(pKey, loading$);
                return loading$.asObservable();
            })));
        };
        AmapPluginLoaderService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapPluginLoaderService.ctorParameters = function () { return [
            { type: AMapLoaderService },
            { type: LoggerService }
        ]; };
        return AmapPluginLoaderService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapPluginLoaderService.prototype.state;
        /**
         * @type {?}
         * @private
         */
        AmapPluginLoaderService.prototype.mapLoader;
        /**
         * @type {?}
         * @private
         */
        AmapPluginLoaderService.prototype.logger;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: services/amap-autocomplete/amap-autocomplete.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$w = 'AmapAutocomplete';
    var AMapAutocomplete;
    (function (AMapAutocomplete) {
        /**
         * @record
         */
        function Options() { }
        AMapAutocomplete.Options = Options;
        if (false) {
            /**
             * 输入提示时限定POI类型，多个类型用“|”分隔
             * @type {?|undefined}
             */
            Options.prototype.type;
            /**
             * 输入提示时限定城市
             * @type {?|undefined}
             */
            Options.prototype.city;
            /**
             * 返回的数据类型
             * @type {?|undefined}
             */
            Options.prototype.datatype;
            /**
             * 是否强制限制在设置的城市内搜索
             * @type {?|undefined}
             */
            Options.prototype.citylimit;
            /**
             * 指定输入框
             * @type {?|undefined}
             */
            Options.prototype.input;
            /**
             * 指定输出面板
             * @type {?|undefined}
             */
            Options.prototype.output;
            /**
             * 是否在input位于页面较下方的时候自动将输入面板显示在input上方以避免被遮挡
             * @type {?|undefined}
             */
            Options.prototype.outPutDirAuto;
        }
        /**
         * @record
         */
        function Tip() { }
        AMapAutocomplete.Tip = Tip;
        if (false) {
            /**
             * 名称
             * @type {?}
             */
            Tip.prototype.name;
            /**
             * 所属区域
             * @type {?}
             */
            Tip.prototype.district;
            /**
             * 区域编码
             * @type {?}
             */
            Tip.prototype.adcode;
            /**
             * 地址
             * @type {?}
             */
            Tip.prototype.address;
            /**
             * 城市
             * @type {?}
             */
            Tip.prototype.city;
            /**
             * ID
             * @type {?}
             */
            Tip.prototype.id;
            /**
             * 坐标经纬度
             * @type {?}
             */
            Tip.prototype.location;
            /**
             * 类型编码
             * @type {?}
             */
            Tip.prototype.typecode;
        }
        /**
         * @record
         */
        function SearchResult() { }
        AMapAutocomplete.SearchResult = SearchResult;
        if (false) {
            /**
             * 查询状态说明
             * @type {?}
             */
            SearchResult.prototype.info;
            /**
             * 输入提示条数
             * @type {?}
             */
            SearchResult.prototype.count;
            /**
             * 输入提示列表
             * @type {?}
             */
            SearchResult.prototype.tips;
        }
    })(AMapAutocomplete || (AMapAutocomplete = {}));
    /**
     * @record
     */
    function AutocompleteSearchResult() { }
    if (false) {
        /** @type {?} */
        AutocompleteSearchResult.prototype.status;
        /** @type {?} */
        AutocompleteSearchResult.prototype.result;
    }
    var AmapAutocompleteService = /** @class */ (function () {
        function AmapAutocompleteService(plugin, binder, logger, ngZone) {
            this.plugin = plugin;
            this.binder = binder;
            this.logger = logger;
            this.ngZone = ngZone;
            this.ac$ = new rxjs.ReplaySubject(1);
        }
        /**
         * 获取插件
         */
        /**
         * 获取插件
         * @return {?}
         */
        AmapAutocompleteService.prototype.get = /**
         * 获取插件
         * @return {?}
         */
        function () {
            return this.ac$.asObservable();
        };
        /**
         * 侦听事件
         */
        /**
         * 侦听事件
         * @param {?} event
         * @return {?}
         */
        AmapAutocompleteService.prototype.on = /**
         * 侦听事件
         * @param {?} event
         * @return {?}
         */
        function (event) {
            return this.binder.bindEvent(this.get(), event);
        };
        /**
         * 创建插件
         */
        /**
         * 创建插件
         * @param {?} options
         * @return {?}
         */
        AmapAutocompleteService.prototype.create = /**
         * 创建插件
         * @param {?} options
         * @return {?}
         */
        function (options) {
            var _this = this;
            return this.plugin.load('AMap.Autocomplete').pipe(operators.map((/**
             * @return {?}
             */
            function () {
                _this.ac = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AMap.Autocomplete(options); }));
                _this.logger.d(TAG$w, 'new autocomplete created.');
                _this.ac$.next(_this.ac);
                _this.ac$.complete();
                return _this.ac;
            })));
        };
        /**
         * 搜索
         */
        /**
         * 搜索
         * @param {?} address
         * @return {?}
         */
        AmapAutocompleteService.prototype.search = /**
         * 搜索
         * @param {?} address
         * @return {?}
         */
        function (address) {
            return this.get().pipe(operators.switchMap((/**
             * @param {?} ac
             * @return {?}
             */
            function (ac) {
                return new rxjs.Observable((/**
                 * @param {?} observer
                 * @return {?}
                 */
                function (observer) {
                    ac.search(address, (/**
                     * @param {?} status
                     * @param {?} result
                     * @return {?}
                     */
                    function (status, result) {
                        observer.next({ status: status, result: result });
                        observer.complete();
                    }));
                }));
            })));
        };
        AmapAutocompleteService.decorators = [
            { type: core.Injectable, args: [{
                        providedIn: 'root',
                    },] }
        ];
        /** @nocollapse */
        AmapAutocompleteService.ctorParameters = function () { return [
            { type: AmapPluginLoaderService },
            { type: EventBinderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        /** @nocollapse */ AmapAutocompleteService.ngInjectableDef = core.ɵɵdefineInjectable({ factory: function AmapAutocompleteService_Factory() { return new AmapAutocompleteService(core.ɵɵinject(AmapPluginLoaderService), core.ɵɵinject(EventBinderService), core.ɵɵinject(LoggerService), core.ɵɵinject(core.NgZone)); }, token: AmapAutocompleteService, providedIn: "root" });
        return AmapAutocompleteService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapAutocompleteService.prototype.ac;
        /**
         * @type {?}
         * @private
         */
        AmapAutocompleteService.prototype.ac$;
        /**
         * @type {?}
         * @private
         */
        AmapAutocompleteService.prototype.plugin;
        /**
         * @type {?}
         * @private
         */
        AmapAutocompleteService.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        AmapAutocompleteService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        AmapAutocompleteService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/input-amap-autocomplete/input-amap-autocomplete.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$x = 'amap-autocomplete';
    /** @type {?} */
    var AutocompleteOptions = ['type', 'city', 'datatype', 'citylimit'];
    var InputAmapAutocompleteDirective = /** @class */ (function () {
        function InputAmapAutocompleteDirective(os, binder, el, logger, ngZone) {
            this.os = os;
            this.binder = binder;
            this.el = el;
            this.logger = logger;
            this.ngZone = ngZone;
            // ---- Events ----
            this.naReady = new core.EventEmitter();
            this.inited = false;
            /** @type {?} */
            var target = this.os.get();
            this.naComplete = this.binder.bindEvent(target, 'complete');
            this.naSelect = this.binder.bindEvent(target, 'select');
            this.naChoose = this.binder.bindEvent(target, 'choose');
            this.naError = this.binder.bindEvent(target, 'error');
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        InputAmapAutocompleteDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var plugin = this.os.get();
            if (!this.inited) {
                this.logger.d(TAG$x, 'initializing ...');
                /** @type {?} */
                var options = getOptions(this, AutocompleteOptions);
                options.input = this.el.nativeElement;
                this.logger.d(TAG$x, 'options:', options);
                this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG$x, 'autocomplete is ready.');
                }));
                this.inited = true;
            }
            else {
                rxjs.zip(filter.has('city'), plugin).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setCity(v);
                }));
                rxjs.zip(filter.has('type'), plugin).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setType(v);
                }));
                rxjs.zip(filter.has('citylimit'), plugin).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], p = _b[1];
                    return p.setCityLimit(v);
                }));
            }
        };
        InputAmapAutocompleteDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'input[amapAutocomplete]',
                    },] }
        ];
        /** @nocollapse */
        InputAmapAutocompleteDirective.ctorParameters = function () { return [
            { type: AmapAutocompleteService },
            { type: EventBinderService },
            { type: core.ElementRef },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        InputAmapAutocompleteDirective.propDecorators = {
            type: [{ type: core.Input }],
            city: [{ type: core.Input }],
            datatype: [{ type: core.Input }],
            citylimit: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naComplete: [{ type: core.Output }],
            naSelect: [{ type: core.Output }],
            naChoose: [{ type: core.Output }],
            naError: [{ type: core.Output }]
        };
        return InputAmapAutocompleteDirective;
    }());
    if (false) {
        /**
         * 输入提示时限定POI类型，多个类型用“|”分隔
         * @type {?}
         */
        InputAmapAutocompleteDirective.prototype.type;
        /**
         * 输入提示时限定城市
         * @type {?}
         */
        InputAmapAutocompleteDirective.prototype.city;
        /**
         * 返回的数据类型
         * @type {?}
         */
        InputAmapAutocompleteDirective.prototype.datatype;
        /**
         * 是否强制限制在设置的城市内搜索
         * @type {?}
         */
        InputAmapAutocompleteDirective.prototype.citylimit;
        /** @type {?} */
        InputAmapAutocompleteDirective.prototype.naReady;
        /** @type {?} */
        InputAmapAutocompleteDirective.prototype.naComplete;
        /** @type {?} */
        InputAmapAutocompleteDirective.prototype.naSelect;
        /** @type {?} */
        InputAmapAutocompleteDirective.prototype.naChoose;
        /** @type {?} */
        InputAmapAutocompleteDirective.prototype.naError;
        /**
         * @type {?}
         * @private
         */
        InputAmapAutocompleteDirective.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        InputAmapAutocompleteDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        InputAmapAutocompleteDirective.prototype.binder;
        /**
         * @type {?}
         * @private
         */
        InputAmapAutocompleteDirective.prototype.el;
        /**
         * @type {?}
         * @private
         */
        InputAmapAutocompleteDirective.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        InputAmapAutocompleteDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: shared/amap-ui-loader.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var TAG$y = 'AMapUILoader';
    var AmapUILoaderService = /** @class */ (function () {
        function AmapUILoaderService(amap, logger) {
            this.amap = amap;
            this.logger = logger;
            this.state = new Map();
        }
        /**
         * @param {?} name
         * @return {?}
         */
        AmapUILoaderService.prototype.load = /**
         * @param {?} name
         * @return {?}
         */
        function (name) {
            var _this = this;
            /** @type {?} */
            var pKey = '';
            if (Array.isArray(name)) {
                pKey = name.join(',');
            }
            else {
                pKey = name;
            }
            if (this.state.has(pKey)) {
                return this.state.get(pKey).asObservable();
            }
            this.logger.d(TAG$y, 'loading ui:', pKey, '...');
            /** @type {?} */
            var loading$ = new rxjs.ReplaySubject(1);
            this.amap.load().subscribe({
                next: (/**
                 * @return {?}
                 */
                function () {
                    _this.amap.loadUI().subscribe({
                        next: (/**
                         * @return {?}
                         */
                        function () {
                            AMapUI.loadUI(Array.isArray(name) ? name : [name], (/**
                             * @param {?} u
                             * @return {?}
                             */
                            function (u) {
                                _this.logger.d(TAG$y, 'loading ui:', pKey, 'COMPLETE');
                                loading$.next(u);
                                loading$.complete();
                            }));
                            _this.state.set(pKey, loading$);
                        }),
                    });
                }),
            });
            return loading$.asObservable();
        };
        AmapUILoaderService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        AmapUILoaderService.ctorParameters = function () { return [
            { type: AMapLoaderService },
            { type: LoggerService }
        ]; };
        return AmapUILoaderService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        AmapUILoaderService.prototype.state;
        /**
         * @type {?}
         * @private
         */
        AmapUILoaderService.prototype.amap;
        /**
         * @type {?}
         * @private
         */
        AmapUILoaderService.prototype.logger;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/ui-simple-marker/ui-simple-marker.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AMapUISimpleMarker;
    (function (AMapUISimpleMarker) {
        /**
         * @record
         * @template ExtraData
         */
        function Options() { }
        AMapUISimpleMarker.Options = Options;
        if (false) {
            /**
             * 样式主题
             * @type {?|undefined}
             */
            Options.prototype.iconTheme;
            /**
             * 背景图标样式
             * @type {?|undefined}
             */
            Options.prototype.iconStyle;
            /**
             * 图标前景文字
             * @type {?|undefined}
             */
            Options.prototype.iconLabel;
            /**
             * 是否显示定位点
             * @type {?|undefined}
             */
            Options.prototype.showPositionPoint;
            /**
             * 内建的Dom容器上附带的class，多个class name用空格分开
             * @type {?|undefined}
             */
            Options.prototype.containerClassNames;
        }
    })(AMapUISimpleMarker || (AMapUISimpleMarker = {}));
    /** @type {?} */
    var TAG$z = 'UISimpleMarker';
    var UISimpleMarkerService = /** @class */ (function () {
        function UISimpleMarkerService(amaps, uiLoader, logger, ngZone) {
            this.amaps = amaps;
            this.uiLoader = uiLoader;
            this.logger = logger;
            this.ngZone = ngZone;
            this.marker$ = new rxjs.ReplaySubject(1);
            this.ui = (/** @type {?} */ (this.uiLoader.load('overlay/SimpleMarker')));
        }
        /**
         * 获取点标记
         */
        /**
         * 获取点标记
         * @return {?}
         */
        UISimpleMarkerService.prototype.get = /**
         * 获取点标记
         * @return {?}
         */
        function () {
            return this.marker$.asObservable();
        };
        /**
         * 创建点标记 AMap.SimpleMarker
         * @param options 选项
         * @param addToMap 是否直接加进地图
         */
        /**
         * 创建点标记 AMap.SimpleMarker
         * @param {?} options 选项
         * @param {?=} addToMap 是否直接加进地图
         * @return {?}
         */
        UISimpleMarkerService.prototype.create = /**
         * 创建点标记 AMap.SimpleMarker
         * @param {?} options 选项
         * @param {?=} addToMap 是否直接加进地图
         * @return {?}
         */
        function (options, addToMap) {
            var _this = this;
            if (addToMap === void 0) { addToMap = true; }
            return rxjs.zip(this.ui, this.amaps.get()).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), SimpleMarker = _b[0], m = _b[1];
                if (addToMap) {
                    options.map = m;
                }
                _this.marker = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new SimpleMarker(options); }));
                _this.logger.d(TAG$z, 'new simple marker created.');
                _this.marker$.next(_this.marker);
                _this.marker$.complete();
                return _this.marker;
            })));
        };
        /**
         * 销毁点标记
         */
        /**
         * 销毁点标记
         * @return {?}
         */
        UISimpleMarkerService.prototype.destroy = /**
         * 销毁点标记
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$z, 'simple marker destroyed.');
                _this.marker = null;
            }));
        };
        UISimpleMarkerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UISimpleMarkerService.ctorParameters = function () { return [
            { type: AMapService },
            { type: AmapUILoaderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return UISimpleMarkerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        UISimpleMarkerService.prototype.marker;
        /**
         * @type {?}
         * @private
         */
        UISimpleMarkerService.prototype.marker$;
        /**
         * @type {?}
         * @private
         */
        UISimpleMarkerService.prototype.ui;
        /**
         * @type {?}
         * @private
         */
        UISimpleMarkerService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        UISimpleMarkerService.prototype.uiLoader;
        /**
         * @type {?}
         * @private
         */
        UISimpleMarkerService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        UISimpleMarkerService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/ui-simple-marker/ui-simple-marker.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var SimpleMarkerOptions = __spread(OverlayOptions, [
        // Marker options without cotent
        'position',
        'anchor',
        'offset',
        'icon',
        'topWhenClick',
        'raiseOnDrag',
        'visible',
        'zIndex',
        'angle',
        'autoRotation',
        'animation',
        'shadow',
        'title',
        'shape',
        'label',
        // Own options
        'iconTheme',
        'iconStyle',
        'iconLabel',
        'showPositionPoint',
        'containerClassNames',
    ]);
    var UISimpleMarker = /** @class */ (function (_super) {
        __extends(UISimpleMarker, _super);
        function UISimpleMarker(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
            var _this = _super.call(this, os, binder) || this;
            _this.os = os;
            _this.binder = binder;
            _this.amaps = amaps;
            _this.pixels = pixels;
            _this.icons = icons;
            _this.mlabels = mlabels;
            _this.logger = logger;
            _this.ngZone = ngZone;
            _this.TAG = 'ui-simple-marker';
            /**
             * 额外: 是否隐藏
             */
            _this.hidden = false;
            /**
             * 额外: 是否包含在点聚合中
             */
            _this.inCluster = false;
            /**
             * 额外: 点击时是否显示信息窗体
             */
            _this.openInfoWindow = true;
            // amap-marker events:
            _this.naReady = new core.EventEmitter();
            // amap info window:
            _this.infoWindowComponent = new core.QueryList();
            _this.inited = false;
            /** @type {?} */
            var target = _this.os.get();
            _this.naMouseOut = _this.binder.bindEvent(target, 'mouseout');
            _this.naDragStart = _this.binder.bindEvent(target, 'dragstart');
            _this.naDragging = _this.binder.bindEvent(target, 'dragging');
            _this.naDragEnd = _this.binder.bindEvent(target, 'dragend');
            _this.naMoving = _this.binder.bindEvent(target, 'moving');
            _this.naMoveEnd = _this.binder.bindEvent(target, 'moveend');
            _this.naMoveAlong = _this.binder.bindEvent(target, 'movealong');
            return _this;
        }
        /**
         * @return {?}
         */
        UISimpleMarker.prototype.ngOnDestroy = /**
         * @return {?}
         */
        function () {
            if (this.subscription) {
                this.subscription.unsubscribe();
            }
            this.os.destroy();
        };
        /**
         * @param {?} changes
         * @return {?}
         */
        UISimpleMarker.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            var _this = this;
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var marker = this.get();
            if (!this.inited) {
                // do not draw marker when no poistion defined.
                if (!this.position) {
                    return;
                }
                this.amaps.get().subscribe((/**
                 * @return {?}
                 */
                function () {
                    _this.logger.d(_this.TAG, 'initializing ...');
                    // bind info window events:
                    _this.subscription = _this.binder.bindEvent(marker, 'click').subscribe((/**
                     * @return {?}
                     */
                    function () {
                        if (_this.openInfoWindow) {
                            _this.infoWindowComponent.forEach((/**
                             * @param {?} w
                             * @return {?}
                             */
                            function (w) { return w.open(); }));
                        }
                    }));
                    /** @type {?} */
                    var options = _this.getOptions();
                    if (_this.icon) {
                        options.icon = _this.icons.create(_this.icon);
                    }
                    if (_this.shadow) {
                        options.shadow = _this.icons.create(_this.shadow);
                    }
                    if (_this.label) {
                        options.label = _this.mlabels.create(_this.label);
                    }
                    if (_this.offset) {
                        options.offset = _this.pixels.create(_this.offset);
                    }
                    _this.logger.d(_this.TAG, 'options:', options);
                    _this.os.create(options).subscribe((/**
                     * @param {?} m
                     * @return {?}
                     */
                    function (m) {
                        _this.ngZone.run((/**
                         * @return {?}
                         */
                        function () { return _this.naReady.emit(m); }));
                        _this.logger.d(_this.TAG, 'marker is ready.');
                    }));
                    _this.inited = true;
                    _this.updateInfoWindow();
                    _this.updateInfoWindowPosition();
                }));
            }
            else {
                rxjs.zip(filter.has('icon'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setIcon(_this.icons.create(v));
                }));
                rxjs.zip(filter.has('shadow'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setShadow(_this.icons.create(v));
                }));
                rxjs.zip(filter.has('label'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setLabel(_this.mlabels.create(v));
                }));
                rxjs.zip(filter.has('title'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setTitle(v);
                }));
                rxjs.zip(filter.has('extData'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setExtData(v);
                }));
                rxjs.zip(filter.has('clickable'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setClickable(!!v);
                }));
                rxjs.zip(filter.has('draggable'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setDraggable(!!v);
                }));
                rxjs.zip(filter.has('visible'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return (v ? m.show() : m.hide());
                }));
                rxjs.zip(filter.has('cursor'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setCursor(v);
                }));
                rxjs.zip(filter.has('animation'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setAnimation(v);
                }));
                rxjs.zip(filter.has('angle'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setAngle(v);
                }));
                rxjs.zip(filter.has('zIndex'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setzIndex(v);
                }));
                rxjs.zip(filter.has('shape'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setShape(v);
                }));
                rxjs.zip(filter.notEmpty('offset'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setOffset(_this.pixels.create(v));
                }));
                rxjs.zip(filter.notEmpty('position'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setPosition(v);
                }));
                rxjs.zip(filter.has('showPositionPoint'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    if (!!v) {
                        m.showPositionPoint();
                    }
                    else {
                        m.hidePositionPoint();
                    }
                }));
                rxjs.zip(filter.notEmpty('iconStyle'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    if (changes.iconTheme && changes.iconTheme.currentValue) {
                        m.setIconThemeAndStyle(changes.iconTheme.currentValue, v);
                    }
                    else {
                        m.setIconStyle(v);
                    }
                }));
                rxjs.zip(filter.notEmpty('iconLabel'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setIconLabel(v);
                }));
                rxjs.zip(filter.notEmpty('containerClassNames'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setContainerClassNames(v);
                }));
            }
            rxjs.zip(filter.has('isTop'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                return m.setTop(!!v);
            }));
            rxjs.zip(filter.has('hidden'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), v = _b[0], m = _b[1];
                return (v ? m.hide() : m.show());
            }));
        };
        /**
         * @return {?}
         */
        UISimpleMarker.prototype.ngAfterContentInit = /**
         * @return {?}
         */
        function () {
            var _this = this;
            this.updateInfoWindow();
            this.infoWindowComponent.changes.subscribe((/**
             * @return {?}
             */
            function () { return _this.updateInfoWindow(); }));
        };
        /**
         * @private
         * @return {?}
         */
        UISimpleMarker.prototype.updateInfoWindow = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.infoWindowComponent && this.inited) {
                if (this.infoWindowComponent.length > 1) {
                    this.logger.e(this.TAG, 'Expected no more than 1 info window.');
                    return;
                }
                /** @type {?} */
                var marker_1 = this.os.get();
                this.infoWindowComponent.forEach((/**
                 * @param {?} component
                 * @return {?}
                 */
                function (component) {
                    component.hostMarker = marker_1;
                }));
            }
        };
        /**
         * @private
         * @return {?}
         */
        UISimpleMarker.prototype.updateInfoWindowPosition = /**
         * @private
         * @return {?}
         */
        function () {
            if (this.infoWindowComponent && this.inited) {
                this.infoWindowComponent.forEach((/**
                 * @param {?} component
                 * @return {?}
                 */
                function (component) {
                    component.toggleOpen();
                }));
            }
        };
        /**
         * @return {?}
         */
        UISimpleMarker.prototype.getOptions = /**
         * @return {?}
         */
        function () {
            return getOptions(this, SimpleMarkerOptions);
        };
        /**
         * 获取已创建的 AMapUI 对象
         */
        /**
         * 获取已创建的 AMapUI 对象
         * @return {?}
         */
        UISimpleMarker.prototype.get = /**
         * 获取已创建的 AMapUI 对象
         * @return {?}
         */
        function () {
            return this.os.get();
        };
        UISimpleMarker.propDecorators = {
            iconTheme: [{ type: core.Input }],
            iconStyle: [{ type: core.Input }],
            iconLabel: [{ type: core.Input }],
            showPositionPoint: [{ type: core.Input }],
            containerClassNames: [{ type: core.Input }],
            position: [{ type: core.Input }],
            anchor: [{ type: core.Input }],
            offset: [{ type: core.Input }],
            icon: [{ type: core.Input }],
            topWhenClick: [{ type: core.Input }],
            raiseOnDrag: [{ type: core.Input }],
            visible: [{ type: core.Input }],
            zIndex: [{ type: core.Input }],
            angle: [{ type: core.Input }],
            autoRotation: [{ type: core.Input }],
            animation: [{ type: core.Input }],
            shadow: [{ type: core.Input }],
            title: [{ type: core.Input }],
            shape: [{ type: core.Input }],
            label: [{ type: core.Input }],
            isTop: [{ type: core.Input }],
            hidden: [{ type: core.Input }],
            inCluster: [{ type: core.Input }],
            openInfoWindow: [{ type: core.Input }],
            naReady: [{ type: core.Output }],
            naMouseOut: [{ type: core.Output }],
            naDragStart: [{ type: core.Output }],
            naDragging: [{ type: core.Output }],
            naDragEnd: [{ type: core.Output }],
            naMoving: [{ type: core.Output }],
            naMoveEnd: [{ type: core.Output }],
            naMoveAlong: [{ type: core.Output }],
            infoWindowComponent: [{ type: core.ContentChildren, args: [AmapInfoWindowComponent,] }]
        };
        return UISimpleMarker;
    }(AMapOverlay));
    if (false) {
        /** @type {?} */
        UISimpleMarker.prototype.TAG;
        /**
         * 样式主题
         * @type {?}
         */
        UISimpleMarker.prototype.iconTheme;
        /**
         * 背景图标样式
         * @type {?}
         */
        UISimpleMarker.prototype.iconStyle;
        /**
         * 图标前景文字
         * @type {?}
         */
        UISimpleMarker.prototype.iconLabel;
        /**
         * 是否显示定位点
         * @type {?}
         */
        UISimpleMarker.prototype.showPositionPoint;
        /**
         * 内建的Dom容器上附带的class，多个class name用空格分开
         * @type {?}
         */
        UISimpleMarker.prototype.containerClassNames;
        /**
         * 点标记在地图上显示的位置
         * @type {?}
         */
        UISimpleMarker.prototype.position;
        /**
         * 标记锚点
         * @type {?}
         */
        UISimpleMarker.prototype.anchor;
        /**
         * 点标记显示位置偏移量
         * @type {?}
         */
        UISimpleMarker.prototype.offset;
        /**
         * 需在点标记中显示的图标
         * @type {?}
         */
        UISimpleMarker.prototype.icon;
        /**
         * 鼠标点击时marker是否置顶
         * @type {?}
         */
        UISimpleMarker.prototype.topWhenClick;
        /**
         * 拖拽点标记时是否开启点标记离开地图的效果
         * @type {?}
         */
        UISimpleMarker.prototype.raiseOnDrag;
        /**
         * 点标记是否可见
         * @type {?}
         */
        UISimpleMarker.prototype.visible;
        /**
         * 点标记的叠加顺序
         * @type {?}
         */
        UISimpleMarker.prototype.zIndex;
        /**
         * 点标记的旋转角度
         * @type {?}
         */
        UISimpleMarker.prototype.angle;
        /**
         * 是否自动旋转
         * @type {?}
         */
        UISimpleMarker.prototype.autoRotation;
        /**
         * 点标记的动画效果
         * @type {?}
         */
        UISimpleMarker.prototype.animation;
        /**
         * 点标记阴影
         * @type {?}
         */
        UISimpleMarker.prototype.shadow;
        /**
         * 鼠标滑过点标记时的文字提示
         * @type {?}
         */
        UISimpleMarker.prototype.title;
        /**
         * 可点击区域
         * @type {?}
         */
        UISimpleMarker.prototype.shape;
        /**
         * 文本标注
         * @type {?}
         */
        UISimpleMarker.prototype.label;
        /**
         * 额外: 是否置顶
         * @type {?}
         */
        UISimpleMarker.prototype.isTop;
        /**
         * 额外: 是否隐藏
         * @type {?}
         */
        UISimpleMarker.prototype.hidden;
        /**
         * 额外: 是否包含在点聚合中
         * @type {?}
         */
        UISimpleMarker.prototype.inCluster;
        /**
         * 额外: 点击时是否显示信息窗体
         * @type {?}
         */
        UISimpleMarker.prototype.openInfoWindow;
        /** @type {?} */
        UISimpleMarker.prototype.naReady;
        /** @type {?} */
        UISimpleMarker.prototype.naMouseOut;
        /** @type {?} */
        UISimpleMarker.prototype.naDragStart;
        /** @type {?} */
        UISimpleMarker.prototype.naDragging;
        /** @type {?} */
        UISimpleMarker.prototype.naDragEnd;
        /** @type {?} */
        UISimpleMarker.prototype.naMoving;
        /** @type {?} */
        UISimpleMarker.prototype.naMoveEnd;
        /** @type {?} */
        UISimpleMarker.prototype.naMoveAlong;
        /** @type {?} */
        UISimpleMarker.prototype.infoWindowComponent;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.inited;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.subscription;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.binder;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.amaps;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.pixels;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.icons;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.mlabels;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.logger;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarker.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/ui-simple-marker/ui-simple-marker.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var UISimpleMarkerDirective = /** @class */ (function (_super) {
        __extends(UISimpleMarkerDirective, _super);
        function UISimpleMarkerDirective(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
            var _this = _super.call(this, os, binder, amaps, pixels, icons, mlabels, logger, ngZone) || this;
            _this.os = os;
            _this.binder = binder;
            _this.amaps = amaps;
            _this.pixels = pixels;
            _this.icons = icons;
            _this.mlabels = mlabels;
            _this.logger = logger;
            _this.ngZone = ngZone;
            return _this;
        }
        UISimpleMarkerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'ui-simple-marker',
                        exportAs: 'simpleMarker',
                        providers: [UISimpleMarkerService],
                    },] }
        ];
        /** @nocollapse */
        UISimpleMarkerDirective.ctorParameters = function () { return [
            { type: UISimpleMarkerService },
            { type: EventBinderService },
            { type: AMapService },
            { type: PixelService },
            { type: IconService },
            { type: MarkerLabelService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return UISimpleMarkerDirective;
    }(UISimpleMarker));
    if (false) {
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarkerDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarkerDirective.prototype.binder;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarkerDirective.prototype.amaps;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarkerDirective.prototype.pixels;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarkerDirective.prototype.icons;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarkerDirective.prototype.mlabels;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarkerDirective.prototype.logger;
        /**
         * @type {?}
         * @protected
         */
        UISimpleMarkerDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/ui-awesome-marker/ui-awesome-marker.service.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var AMapUIAwesomeMarker;
    (function (AMapUIAwesomeMarker) {
        /**
         * @record
         * @template ExtraData
         */
        function Options() { }
        AMapUIAwesomeMarker.Options = Options;
        if (false) {
            /**
             * icon 的名称，可用的 icons 参见 Font Awesome 官网
             * @type {?|undefined}
             */
            Options.prototype.awesomeIcon;
            /**
             * 返回字体节点上的 classNames
             * @type {?|undefined}
             */
            Options.prototype.getClassnamesOfAwesomeIcon;
        }
    })(AMapUIAwesomeMarker || (AMapUIAwesomeMarker = {}));
    /** @type {?} */
    var TAG$A = 'UIAwesomeMarker';
    var UIAwesomeMarkerService = /** @class */ (function () {
        function UIAwesomeMarkerService(amaps, uiLoader, logger, ngZone) {
            this.amaps = amaps;
            this.uiLoader = uiLoader;
            this.logger = logger;
            this.ngZone = ngZone;
            this.marker$ = new rxjs.ReplaySubject(1);
            this.ui = (/** @type {?} */ (this.uiLoader.load('overlay/AwesomeMarker')));
        }
        /**
         * 获取点标记
         */
        /**
         * 获取点标记
         * @return {?}
         */
        UIAwesomeMarkerService.prototype.get = /**
         * 获取点标记
         * @return {?}
         */
        function () {
            return this.marker$.asObservable();
        };
        /**
         * 创建点标记 AMap.AwesomeMarker
         * @param options 选项
         * @param addToMap 是否直接加进地图
         */
        /**
         * 创建点标记 AMap.AwesomeMarker
         * @param {?} options 选项
         * @param {?=} addToMap 是否直接加进地图
         * @return {?}
         */
        UIAwesomeMarkerService.prototype.create = /**
         * 创建点标记 AMap.AwesomeMarker
         * @param {?} options 选项
         * @param {?=} addToMap 是否直接加进地图
         * @return {?}
         */
        function (options, addToMap) {
            var _this = this;
            if (addToMap === void 0) { addToMap = true; }
            return rxjs.zip(this.ui, this.amaps.get()).pipe(operators.map((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = __read(_a, 2), AwesomeMarker = _b[0], m = _b[1];
                if (addToMap) {
                    options.map = m;
                }
                _this.marker = _this.ngZone.runOutsideAngular((/**
                 * @return {?}
                 */
                function () { return new AwesomeMarker(options); }));
                _this.logger.d(TAG$A, 'new awesome marker created.');
                _this.marker$.next(_this.marker);
                _this.marker$.complete();
                return _this.marker;
            })));
        };
        /**
         * 销毁点标记
         */
        /**
         * 销毁点标记
         * @return {?}
         */
        UIAwesomeMarkerService.prototype.destroy = /**
         * 销毁点标记
         * @return {?}
         */
        function () {
            var _this = this;
            this.get().subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                m.setMap(null);
                _this.logger.d(TAG$A, 'awesome marker destroyed.');
                _this.marker = null;
            }));
        };
        UIAwesomeMarkerService.decorators = [
            { type: core.Injectable }
        ];
        /** @nocollapse */
        UIAwesomeMarkerService.ctorParameters = function () { return [
            { type: AMapService },
            { type: AmapUILoaderService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        return UIAwesomeMarkerService;
    }());
    if (false) {
        /**
         * @type {?}
         * @private
         */
        UIAwesomeMarkerService.prototype.marker;
        /**
         * @type {?}
         * @private
         */
        UIAwesomeMarkerService.prototype.marker$;
        /**
         * @type {?}
         * @private
         */
        UIAwesomeMarkerService.prototype.ui;
        /**
         * @type {?}
         * @private
         */
        UIAwesomeMarkerService.prototype.amaps;
        /**
         * @type {?}
         * @private
         */
        UIAwesomeMarkerService.prototype.uiLoader;
        /**
         * @type {?}
         * @private
         */
        UIAwesomeMarkerService.prototype.logger;
        /**
         * @type {?}
         * @private
         */
        UIAwesomeMarkerService.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: directives/ui-awesome-marker/ui-awesome-marker.directive.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    /** @type {?} */
    var AwesomeMarkerOptions = __spread(SimpleMarkerOptions, ['awesomeIcon', 'getClassnamesOfAwesomeIcon']);
    var UIAwesomeMarkerDirective = /** @class */ (function (_super) {
        __extends(UIAwesomeMarkerDirective, _super);
        function UIAwesomeMarkerDirective(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
            var _this = _super.call(this, os, binder, amaps, pixels, icons, mlabels, logger, ngZone) || this;
            _this.os = os;
            _this.binder = binder;
            _this.amaps = amaps;
            _this.pixels = pixels;
            _this.icons = icons;
            _this.mlabels = mlabels;
            _this.logger = logger;
            _this.ngZone = ngZone;
            _this.TAG = 'ui-awesome-marker';
            return _this;
        }
        /**
         * @param {?} changes
         * @return {?}
         */
        UIAwesomeMarkerDirective.prototype.ngOnChanges = /**
         * @param {?} changes
         * @return {?}
         */
        function (changes) {
            _super.prototype.ngOnChanges.call(this, changes);
            /** @type {?} */
            var filter = ChangeFilter.of(changes);
            /** @type {?} */
            var marker = this.get();
            if (this.inited) {
                rxjs.zip(filter.has('awesomeIcon'), marker).subscribe((/**
                 * @param {?} __0
                 * @return {?}
                 */
                function (_a) {
                    var _b = __read(_a, 2), v = _b[0], m = _b[1];
                    return m.setAwesomeIcon(v);
                }));
            }
        };
        /**
         * @return {?}
         */
        UIAwesomeMarkerDirective.prototype.getOptions = /**
         * @return {?}
         */
        function () {
            return getOptions(this, AwesomeMarkerOptions);
        };
        UIAwesomeMarkerDirective.decorators = [
            { type: core.Directive, args: [{
                        selector: 'ui-awesome-marker',
                        exportAs: 'awesomeMarker',
                        providers: [UIAwesomeMarkerService],
                    },] }
        ];
        /** @nocollapse */
        UIAwesomeMarkerDirective.ctorParameters = function () { return [
            { type: UIAwesomeMarkerService },
            { type: EventBinderService },
            { type: AMapService },
            { type: PixelService },
            { type: IconService },
            { type: MarkerLabelService },
            { type: LoggerService },
            { type: core.NgZone }
        ]; };
        UIAwesomeMarkerDirective.propDecorators = {
            awesomeIcon: [{ type: core.Input }],
            getClassnamesOfAwesomeIcon: [{ type: core.Input }]
        };
        return UIAwesomeMarkerDirective;
    }(UISimpleMarker));
    if (false) {
        /** @type {?} */
        UIAwesomeMarkerDirective.prototype.TAG;
        /**
         * icon 的名称，可用的 icons 参见 Font Awesome 官网
         * @type {?}
         */
        UIAwesomeMarkerDirective.prototype.awesomeIcon;
        /**
         * 返回字体节点上的 classNames
         * @type {?}
         */
        UIAwesomeMarkerDirective.prototype.getClassnamesOfAwesomeIcon;
        /**
         * @type {?}
         * @protected
         */
        UIAwesomeMarkerDirective.prototype.os;
        /**
         * @type {?}
         * @protected
         */
        UIAwesomeMarkerDirective.prototype.binder;
        /**
         * @type {?}
         * @protected
         */
        UIAwesomeMarkerDirective.prototype.amaps;
        /**
         * @type {?}
         * @protected
         */
        UIAwesomeMarkerDirective.prototype.pixels;
        /**
         * @type {?}
         * @protected
         */
        UIAwesomeMarkerDirective.prototype.icons;
        /**
         * @type {?}
         * @protected
         */
        UIAwesomeMarkerDirective.prototype.mlabels;
        /**
         * @type {?}
         * @protected
         */
        UIAwesomeMarkerDirective.prototype.logger;
        /**
         * @type {?}
         * @protected
         */
        UIAwesomeMarkerDirective.prototype.ngZone;
    }

    /**
     * @fileoverview added by tsickle
     * Generated from: ngx-amap.module.ts
     * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
     */
    var NgxAmapModule = /** @class */ (function () {
        function NgxAmapModule() {
        }
        /**
         * @param {?=} mapConfig
         * @return {?}
         */
        NgxAmapModule.forRoot = /**
         * @param {?=} mapConfig
         * @return {?}
         */
        function (mapConfig) {
            return {
                ngModule: NgxAmapModule,
                providers: [
                    { provide: NGX_AMAP_CONFIG, useValue: mapConfig || {} },
                    {
                        provide: LoggerService,
                        useClass: mapConfig && mapConfig.debug ? DebugLoggerService : LoggerService,
                    },
                    AMapLoaderService,
                    AmapPluginLoaderService,
                    AmapUILoaderService,
                    EventBinderService,
                ],
            };
        };
        NgxAmapModule.decorators = [
            { type: core.NgModule, args: [{
                        declarations: [
                            NgxAmapComponent,
                            AmapMarkerDirective,
                            AmapPolylineDirective,
                            AmapInfoWindowComponent,
                            AmapTextComponent,
                            AmapPolygonDirective,
                            AmapBezierCurveDirective,
                            AmapRectangleDirective,
                            AmapCircleDirective,
                            AmapCircleMarkerDirective,
                            AmapEllipseDirective,
                            AmapToolBarDirective,
                            AmapMarkerClustererDirective,
                            AmapHeatmapDirective,
                            InputAmapAutocompleteDirective,
                            UISimpleMarkerDirective,
                            UIAwesomeMarkerDirective,
                        ],
                        imports: [],
                        exports: [
                            NgxAmapComponent,
                            AmapMarkerDirective,
                            AmapPolylineDirective,
                            AmapInfoWindowComponent,
                            AmapTextComponent,
                            AmapPolygonDirective,
                            AmapBezierCurveDirective,
                            AmapRectangleDirective,
                            AmapCircleDirective,
                            AmapCircleMarkerDirective,
                            AmapEllipseDirective,
                            AmapToolBarDirective,
                            AmapMarkerClustererDirective,
                            AmapHeatmapDirective,
                            InputAmapAutocompleteDirective,
                            UISimpleMarkerDirective,
                            UIAwesomeMarkerDirective,
                        ],
                    },] }
        ];
        return NgxAmapModule;
    }());

    exports.AMapLoaderService = AMapLoaderService;
    exports.AmapAutocompleteService = AmapAutocompleteService;
    exports.AmapBezierCurveDirective = AmapBezierCurveDirective;
    exports.AmapCircleDirective = AmapCircleDirective;
    exports.AmapCircleMarkerDirective = AmapCircleMarkerDirective;
    exports.AmapEllipseDirective = AmapEllipseDirective;
    exports.AmapHeatmapDirective = AmapHeatmapDirective;
    exports.AmapInfoWindowComponent = AmapInfoWindowComponent;
    exports.AmapMarkerClustererDirective = AmapMarkerClustererDirective;
    exports.AmapMarkerDirective = AmapMarkerDirective;
    exports.AmapPluginLoaderService = AmapPluginLoaderService;
    exports.AmapPolygonDirective = AmapPolygonDirective;
    exports.AmapPolylineDirective = AmapPolylineDirective;
    exports.AmapRectangleDirective = AmapRectangleDirective;
    exports.AmapTextComponent = AmapTextComponent;
    exports.AmapToolBarDirective = AmapToolBarDirective;
    exports.AmapUILoaderService = AmapUILoaderService;
    exports.EventBinderService = EventBinderService;
    exports.InputAmapAutocompleteDirective = InputAmapAutocompleteDirective;
    exports.NgxAmapComponent = NgxAmapComponent;
    exports.NgxAmapModule = NgxAmapModule;
    exports.UIAwesomeMarkerDirective = UIAwesomeMarkerDirective;
    exports.UISimpleMarkerDirective = UISimpleMarkerDirective;
    exports.ɵa = AMapService;
    exports.ɵba = AmapEllipseService;
    exports.ɵbb = AmapToolBarService;
    exports.ɵbc = AmapMarkerClustererService;
    exports.ɵbd = AmapHeatmapService;
    exports.ɵbe = UISimpleMarker;
    exports.ɵbf = UISimpleMarkerService;
    exports.ɵbg = UIAwesomeMarkerService;
    exports.ɵbh = DebugLoggerService;
    exports.ɵc = NGX_AMAP_CONFIG;
    exports.ɵd = LoggerService;
    exports.ɵe = PluginLoaderService;
    exports.ɵf = AMapOverlay;
    exports.ɵj = AmapMarkerService;
    exports.ɵk = AmapInfoWindowService;
    exports.ɵl = PixelService;
    exports.ɵm = SizeService;
    exports.ɵn = IconService;
    exports.ɵo = MarkerLabelService;
    exports.ɵp = AMapPathOverlay;
    exports.ɵq = AMapShapeOverlay;
    exports.ɵr = AmapPolylineService;
    exports.ɵs = AmapTextService;
    exports.ɵt = AMapPolygon;
    exports.ɵu = AmapPolygonService;
    exports.ɵv = AmapBezierCurveService;
    exports.ɵw = AmapRectangleService;
    exports.ɵx = AMapCircle;
    exports.ɵy = AmapCircleService;
    exports.ɵz = AmapCircleMarkerService;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-amap.umd.js.map
