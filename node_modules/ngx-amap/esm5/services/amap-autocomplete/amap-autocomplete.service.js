/**
 * @fileoverview added by tsickle
 * Generated from: services/amap-autocomplete/amap-autocomplete.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Injectable, NgZone } from '@angular/core';
import { ReplaySubject, Observable } from 'rxjs';
import { map, switchMap } from 'rxjs/operators';
import { AmapPluginLoaderService } from '../../shared/amap-plugin-loader.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { LoggerService } from '../../shared/logger/logger.service';
import * as i0 from "@angular/core";
import * as i1 from "../../shared/amap-plugin-loader.service";
import * as i2 from "../../shared/event-binder.service";
import * as i3 from "../../shared/logger/logger.service";
/** @type {?} */
var TAG = 'AmapAutocomplete';
export var AMapAutocomplete;
(function (AMapAutocomplete) {
    /**
     * @record
     */
    function Options() { }
    AMapAutocomplete.Options = Options;
    if (false) {
        /**
         * 输入提示时限定POI类型，多个类型用“|”分隔
         * @type {?|undefined}
         */
        Options.prototype.type;
        /**
         * 输入提示时限定城市
         * @type {?|undefined}
         */
        Options.prototype.city;
        /**
         * 返回的数据类型
         * @type {?|undefined}
         */
        Options.prototype.datatype;
        /**
         * 是否强制限制在设置的城市内搜索
         * @type {?|undefined}
         */
        Options.prototype.citylimit;
        /**
         * 指定输入框
         * @type {?|undefined}
         */
        Options.prototype.input;
        /**
         * 指定输出面板
         * @type {?|undefined}
         */
        Options.prototype.output;
        /**
         * 是否在input位于页面较下方的时候自动将输入面板显示在input上方以避免被遮挡
         * @type {?|undefined}
         */
        Options.prototype.outPutDirAuto;
    }
    /**
     * @record
     */
    function Tip() { }
    AMapAutocomplete.Tip = Tip;
    if (false) {
        /**
         * 名称
         * @type {?}
         */
        Tip.prototype.name;
        /**
         * 所属区域
         * @type {?}
         */
        Tip.prototype.district;
        /**
         * 区域编码
         * @type {?}
         */
        Tip.prototype.adcode;
        /**
         * 地址
         * @type {?}
         */
        Tip.prototype.address;
        /**
         * 城市
         * @type {?}
         */
        Tip.prototype.city;
        /**
         * ID
         * @type {?}
         */
        Tip.prototype.id;
        /**
         * 坐标经纬度
         * @type {?}
         */
        Tip.prototype.location;
        /**
         * 类型编码
         * @type {?}
         */
        Tip.prototype.typecode;
    }
    /**
     * @record
     */
    function SearchResult() { }
    AMapAutocomplete.SearchResult = SearchResult;
    if (false) {
        /**
         * 查询状态说明
         * @type {?}
         */
        SearchResult.prototype.info;
        /**
         * 输入提示条数
         * @type {?}
         */
        SearchResult.prototype.count;
        /**
         * 输入提示列表
         * @type {?}
         */
        SearchResult.prototype.tips;
    }
})(AMapAutocomplete || (AMapAutocomplete = {}));
/**
 * @record
 */
export function AutocompleteSearchResult() { }
if (false) {
    /** @type {?} */
    AutocompleteSearchResult.prototype.status;
    /** @type {?} */
    AutocompleteSearchResult.prototype.result;
}
var AmapAutocompleteService = /** @class */ (function () {
    function AmapAutocompleteService(plugin, binder, logger, ngZone) {
        this.plugin = plugin;
        this.binder = binder;
        this.logger = logger;
        this.ngZone = ngZone;
        this.ac$ = new ReplaySubject(1);
    }
    /**
     * 获取插件
     */
    /**
     * 获取插件
     * @return {?}
     */
    AmapAutocompleteService.prototype.get = /**
     * 获取插件
     * @return {?}
     */
    function () {
        return this.ac$.asObservable();
    };
    /**
     * 侦听事件
     */
    /**
     * 侦听事件
     * @param {?} event
     * @return {?}
     */
    AmapAutocompleteService.prototype.on = /**
     * 侦听事件
     * @param {?} event
     * @return {?}
     */
    function (event) {
        return this.binder.bindEvent(this.get(), event);
    };
    /**
     * 创建插件
     */
    /**
     * 创建插件
     * @param {?} options
     * @return {?}
     */
    AmapAutocompleteService.prototype.create = /**
     * 创建插件
     * @param {?} options
     * @return {?}
     */
    function (options) {
        var _this = this;
        return this.plugin.load('AMap.Autocomplete').pipe(map((/**
         * @return {?}
         */
        function () {
            _this.ac = _this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return new AMap.Autocomplete(options); }));
            _this.logger.d(TAG, 'new autocomplete created.');
            _this.ac$.next(_this.ac);
            _this.ac$.complete();
            return _this.ac;
        })));
    };
    /**
     * 搜索
     */
    /**
     * 搜索
     * @param {?} address
     * @return {?}
     */
    AmapAutocompleteService.prototype.search = /**
     * 搜索
     * @param {?} address
     * @return {?}
     */
    function (address) {
        return this.get().pipe(switchMap((/**
         * @param {?} ac
         * @return {?}
         */
        function (ac) {
            return new Observable((/**
             * @param {?} observer
             * @return {?}
             */
            function (observer) {
                ac.search(address, (/**
                 * @param {?} status
                 * @param {?} result
                 * @return {?}
                 */
                function (status, result) {
                    observer.next({ status: status, result: result });
                    observer.complete();
                }));
            }));
        })));
    };
    AmapAutocompleteService.decorators = [
        { type: Injectable, args: [{
                    providedIn: 'root',
                },] }
    ];
    /** @nocollapse */
    AmapAutocompleteService.ctorParameters = function () { return [
        { type: AmapPluginLoaderService },
        { type: EventBinderService },
        { type: LoggerService },
        { type: NgZone }
    ]; };
    /** @nocollapse */ AmapAutocompleteService.ngInjectableDef = i0.ɵɵdefineInjectable({ factory: function AmapAutocompleteService_Factory() { return new AmapAutocompleteService(i0.ɵɵinject(i1.AmapPluginLoaderService), i0.ɵɵinject(i2.EventBinderService), i0.ɵɵinject(i3.LoggerService), i0.ɵɵinject(i0.NgZone)); }, token: AmapAutocompleteService, providedIn: "root" });
    return AmapAutocompleteService;
}());
export { AmapAutocompleteService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AmapAutocompleteService.prototype.ac;
    /**
     * @type {?}
     * @private
     */
    AmapAutocompleteService.prototype.ac$;
    /**
     * @type {?}
     * @private
     */
    AmapAutocompleteService.prototype.plugin;
    /**
     * @type {?}
     * @private
     */
    AmapAutocompleteService.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapAutocompleteService.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapAutocompleteService.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,