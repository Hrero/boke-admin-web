/**
 * @fileoverview added by tsickle
 * Generated from: shared/logger/logger.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable } from '@angular/core';
var LoggerService = /** @class */ (function () {
    function LoggerService() {
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    LoggerService.prototype.i = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.log.apply(console, tslib_1.__spread(args));
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    LoggerService.prototype.e = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.error.apply(console, tslib_1.__spread(args));
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    LoggerService.prototype.w = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.warn.apply(console, tslib_1.__spread(args));
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    LoggerService.prototype.d = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        // only stub;
    };
    LoggerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    LoggerService.ctorParameters = function () { return []; };
    return LoggerService;
}());
export { LoggerService };
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYW1hcC8iLCJzb3VyY2VzIjpbInNoYXJlZC9sb2dnZXIvbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUUzQztJQUVFO0lBQWUsQ0FBQzs7Ozs7SUFFaEIseUJBQUM7Ozs7SUFBRDtRQUFFLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQseUJBQWM7O1FBQ2QsT0FBTyxDQUFDLEdBQUcsT0FBWCxPQUFPLG1CQUFRLElBQUksR0FBRTtJQUN2QixDQUFDOzs7OztJQUVELHlCQUFDOzs7O0lBQUQ7UUFBRSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNkLE9BQU8sQ0FBQyxLQUFLLE9BQWIsT0FBTyxtQkFBVSxJQUFJLEdBQUU7SUFDekIsQ0FBQzs7Ozs7SUFFRCx5QkFBQzs7OztJQUFEO1FBQUUsY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFDZCxPQUFPLENBQUMsSUFBSSxPQUFaLE9BQU8sbUJBQVMsSUFBSSxHQUFFO0lBQ3hCLENBQUM7Ozs7O0lBRUQseUJBQUM7Ozs7SUFBRDtRQUFFLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQseUJBQWM7O1FBQ2QsYUFBYTtJQUNmLENBQUM7O2dCQWxCRixVQUFVOzs7O0lBbUJYLG9CQUFDO0NBQUEsQUFuQkQsSUFtQkM7U0FsQlksYUFBYSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEluamVjdGFibGUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIExvZ2dlclNlcnZpY2Uge1xuICBjb25zdHJ1Y3RvcigpIHt9XG5cbiAgaSguLi5hcmdzOiBhbnlbXSkge1xuICAgIGNvbnNvbGUubG9nKC4uLmFyZ3MpO1xuICB9XG5cbiAgZSguLi5hcmdzOiBhbnlbXSkge1xuICAgIGNvbnNvbGUuZXJyb3IoLi4uYXJncyk7XG4gIH1cblxuICB3KC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc29sZS53YXJuKC4uLmFyZ3MpO1xuICB9XG5cbiAgZCguLi5hcmdzOiBhbnlbXSkge1xuICAgIC8vIG9ubHkgc3R1YjtcbiAgfVxufVxuIl19