/**
 * @fileoverview added by tsickle
 * Generated from: shared/logger/debug-logger.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, Inject } from '@angular/core';
import { NGX_AMAP_CONFIG } from '../ngx-amap-config';
var DebugLoggerService = /** @class */ (function () {
    function DebugLoggerService(config) {
        if (config === void 0) { config = {}; }
        this.config = config;
        this.debugTags = [];
        this.debugAll = true;
        if (config.debugTags) {
            if (config.debugTags === '*') {
                this.debugAll = true;
            }
            else {
                this.debugAll = false;
                this.debugTags = config.debugTags.split(',');
            }
        }
    }
    /**
     * @param {...?} args
     * @return {?}
     */
    DebugLoggerService.prototype.i = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.log.apply(console, tslib_1.__spread(args));
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    DebugLoggerService.prototype.e = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.error.apply(console, tslib_1.__spread(args));
    };
    /**
     * @param {...?} args
     * @return {?}
     */
    DebugLoggerService.prototype.w = /**
     * @param {...?} args
     * @return {?}
     */
    function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        console.warn.apply(console, tslib_1.__spread(args));
    };
    /**
     * @param {?} tag
     * @param {...?} args
     * @return {?}
     */
    DebugLoggerService.prototype.d = /**
     * @param {?} tag
     * @param {...?} args
     * @return {?}
     */
    function (tag) {
        var args = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            args[_i - 1] = arguments[_i];
        }
        if (this.debugAll || this.debugTags.includes(tag)) {
            console.log.apply(console, tslib_1.__spread(["[" + tag + "]"], args));
        }
    };
    DebugLoggerService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    DebugLoggerService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGX_AMAP_CONFIG,] }] }
    ]; };
    return DebugLoggerService;
}());
export { DebugLoggerService };
if (false) {
    /** @type {?} */
    DebugLoggerService.prototype.debugTags;
    /** @type {?} */
    DebugLoggerService.prototype.debugAll;
    /**
     * @type {?}
     * @private
     */
    DebugLoggerService.prototype.config;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGVidWctbG9nZ2VyLnNlcnZpY2UuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYW1hcC8iLCJzb3VyY2VzIjpbInNoYXJlZC9sb2dnZXIvZGVidWctbG9nZ2VyLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7O0FBQUEsT0FBTyxFQUFFLFVBQVUsRUFBRSxNQUFNLEVBQUUsTUFBTSxlQUFlLENBQUM7QUFDbkQsT0FBTyxFQUFpQixlQUFlLEVBQUUsTUFBTSxvQkFBb0IsQ0FBQztBQUVwRTtJQUtFLDRCQUE2QyxNQUEwQjtRQUExQix1QkFBQSxFQUFBLFdBQTBCO1FBQTFCLFdBQU0sR0FBTixNQUFNLENBQW9CO1FBSHZFLGNBQVMsR0FBYSxFQUFFLENBQUM7UUFDekIsYUFBUSxHQUFHLElBQUksQ0FBQztRQUdkLElBQUksTUFBTSxDQUFDLFNBQVMsRUFBRTtZQUNwQixJQUFJLE1BQU0sQ0FBQyxTQUFTLEtBQUssR0FBRyxFQUFFO2dCQUM1QixJQUFJLENBQUMsUUFBUSxHQUFHLElBQUksQ0FBQzthQUN0QjtpQkFBTTtnQkFDTCxJQUFJLENBQUMsUUFBUSxHQUFHLEtBQUssQ0FBQztnQkFDdEIsSUFBSSxDQUFDLFNBQVMsR0FBRyxNQUFNLENBQUMsU0FBUyxDQUFDLEtBQUssQ0FBQyxHQUFHLENBQUMsQ0FBQzthQUM5QztTQUNGO0lBQ0gsQ0FBQzs7Ozs7SUFFRCw4QkFBQzs7OztJQUFEO1FBQUUsY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCx5QkFBYzs7UUFDZCxPQUFPLENBQUMsR0FBRyxPQUFYLE9BQU8sbUJBQVEsSUFBSSxHQUFFO0lBQ3ZCLENBQUM7Ozs7O0lBRUQsOEJBQUM7Ozs7SUFBRDtRQUFFLGNBQWM7YUFBZCxVQUFjLEVBQWQscUJBQWMsRUFBZCxJQUFjO1lBQWQseUJBQWM7O1FBQ2QsT0FBTyxDQUFDLEtBQUssT0FBYixPQUFPLG1CQUFVLElBQUksR0FBRTtJQUN6QixDQUFDOzs7OztJQUVELDhCQUFDOzs7O0lBQUQ7UUFBRSxjQUFjO2FBQWQsVUFBYyxFQUFkLHFCQUFjLEVBQWQsSUFBYztZQUFkLHlCQUFjOztRQUNkLE9BQU8sQ0FBQyxJQUFJLE9BQVosT0FBTyxtQkFBUyxJQUFJLEdBQUU7SUFDeEIsQ0FBQzs7Ozs7O0lBRUQsOEJBQUM7Ozs7O0lBQUQsVUFBRSxHQUFXO1FBQUUsY0FBYzthQUFkLFVBQWMsRUFBZCxxQkFBYyxFQUFkLElBQWM7WUFBZCw2QkFBYzs7UUFDM0IsSUFBSSxJQUFJLENBQUMsUUFBUSxJQUFJLElBQUksQ0FBQyxTQUFTLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxFQUFFO1lBQ2pELE9BQU8sQ0FBQyxHQUFHLE9BQVgsT0FBTyxvQkFBSyxNQUFJLEdBQUcsTUFBRyxHQUFLLElBQUksR0FBRTtTQUNsQztJQUNILENBQUM7O2dCQWhDRixVQUFVOzs7O2dEQUtJLE1BQU0sU0FBQyxlQUFlOztJQTRCckMseUJBQUM7Q0FBQSxBQWpDRCxJQWlDQztTQWhDWSxrQkFBa0I7OztJQUM3Qix1Q0FBeUI7O0lBQ3pCLHNDQUFnQjs7Ozs7SUFFSixvQ0FBMkQiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBJbmplY3RhYmxlLCBJbmplY3QgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IE5neEFtYXBDb25maWcsIE5HWF9BTUFQX0NPTkZJRyB9IGZyb20gJy4uL25neC1hbWFwLWNvbmZpZyc7XG5cbkBJbmplY3RhYmxlKClcbmV4cG9ydCBjbGFzcyBEZWJ1Z0xvZ2dlclNlcnZpY2Uge1xuICBkZWJ1Z1RhZ3M6IHN0cmluZ1tdID0gW107XG4gIGRlYnVnQWxsID0gdHJ1ZTtcblxuICBjb25zdHJ1Y3RvcihASW5qZWN0KE5HWF9BTUFQX0NPTkZJRykgcHJpdmF0ZSBjb25maWc6IE5neEFtYXBDb25maWcgPSB7fSkge1xuICAgIGlmIChjb25maWcuZGVidWdUYWdzKSB7XG4gICAgICBpZiAoY29uZmlnLmRlYnVnVGFncyA9PT0gJyonKSB7XG4gICAgICAgIHRoaXMuZGVidWdBbGwgPSB0cnVlO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhpcy5kZWJ1Z0FsbCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRlYnVnVGFncyA9IGNvbmZpZy5kZWJ1Z1RhZ3Muc3BsaXQoJywnKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBpKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc29sZS5sb2coLi4uYXJncyk7XG4gIH1cblxuICBlKC4uLmFyZ3M6IGFueVtdKSB7XG4gICAgY29uc29sZS5lcnJvciguLi5hcmdzKTtcbiAgfVxuXG4gIHcoLi4uYXJnczogYW55W10pIHtcbiAgICBjb25zb2xlLndhcm4oLi4uYXJncyk7XG4gIH1cblxuICBkKHRhZzogc3RyaW5nLCAuLi5hcmdzOiBhbnlbXSkge1xuICAgIGlmICh0aGlzLmRlYnVnQWxsIHx8IHRoaXMuZGVidWdUYWdzLmluY2x1ZGVzKHRhZykpIHtcbiAgICAgIGNvbnNvbGUubG9nKGBbJHt0YWd9XWAsIC4uLmFyZ3MpO1xuICAgIH1cbiAgfVxufVxuIl19