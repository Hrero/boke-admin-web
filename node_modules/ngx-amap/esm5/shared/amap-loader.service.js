/**
 * @fileoverview added by tsickle
 * Generated from: shared/amap-loader.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import { Inject, Injectable } from '@angular/core';
import { LoggerService } from './logger/logger.service';
import { NGX_AMAP_CONFIG } from './ngx-amap-config';
import { ReplaySubject } from 'rxjs';
/** @type {?} */
var TAG = 'AMapLoader';
var AMapLoaderService = /** @class */ (function () {
    function AMapLoaderService(config, logger) {
        if (config === void 0) { config = {}; }
        this.config = config;
        this.logger = logger;
        this.defaultProtocol = 'https';
        this.defaultVersion = '1.4.15';
        this.defaultUIVersion = '1.0.11';
        this.config = config || {};
    }
    /**
     * @return {?}
     */
    AMapLoaderService.prototype.load = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.loading$) {
            return this.loading$.asObservable();
        }
        this.logger.d(TAG, 'loading AMap API ...');
        this.loading$ = new ReplaySubject();
        /** @type {?} */
        var callbackName = '_NgxAmapAPILoader';
        /** @type {?} */
        var script = document.createElement('script');
        script.type = 'text/javascript';
        script.async = true;
        script.defer = true;
        script.src = this.getSrcFromConfig(callbackName);
        script.onerror = (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.logger.e('failed to load AMap API.');
            _this.loading$.error(err);
        });
        window[callbackName] = (/**
         * @return {?}
         */
        function () {
            _this.logger.d(TAG, 'loading AMap API COMPLETE');
            _this.loading$.next();
            _this.loading$.complete();
        });
        document.body.appendChild(script);
        return this.loading$.asObservable();
    };
    /**
     * @return {?}
     */
    AMapLoaderService.prototype.loadUI = /**
     * @return {?}
     */
    function () {
        var _this = this;
        if (this.uiLoading$) {
            return this.uiLoading$.asObservable();
        }
        this.logger.d(TAG, 'loading AMap UI ...');
        this.uiLoading$ = new ReplaySubject();
        /** @type {?} */
        var uiScript = document.createElement('script');
        uiScript.type = 'text/javascript';
        uiScript.async = true;
        uiScript.defer = true;
        uiScript.src = this.getUISrcFromConfig();
        uiScript.onerror = (/**
         * @param {?} err
         * @return {?}
         */
        function (err) {
            _this.logger.e('failed to load AMap API.');
        });
        uiScript.onload = (/**
         * @return {?}
         */
        function () {
            // tslint:disable-next-line: no-string-literal
            window['initAMapUI']();
            _this.logger.d(TAG, 'loading AMap UI COMPLETE');
            _this.uiLoading$.next();
            _this.uiLoading$.complete();
        });
        document.body.appendChild(uiScript);
        return this.uiLoading$.asObservable();
    };
    /**
     * @private
     * @param {?} callbackName
     * @return {?}
     */
    AMapLoaderService.prototype.getSrcFromConfig = /**
     * @private
     * @param {?} callbackName
     * @return {?}
     */
    function (callbackName) {
        /** @type {?} */
        var urlBase = (this.config.protocol || this.defaultProtocol) + "://webapi.amap.com/maps";
        /** @type {?} */
        var queryParams = {
            v: this.config.apiVersion || this.defaultVersion,
            callback: callbackName,
            key: this.config.apiKey,
        };
        /** @type {?} */
        var params = Object.keys(queryParams)
            .filter((/**
         * @param {?} k
         * @return {?}
         */
        function (k) { return queryParams[k] != null; }))
            .filter((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            // remove empty arrays
            return (!Array.isArray(queryParams[k]) ||
                (Array.isArray(queryParams[k]) && queryParams[k].length > 0));
        }))
            .map((/**
         * @param {?} k
         * @return {?}
         */
        function (k) {
            // join arrays as comma seperated strings
            /** @type {?} */
            var i = queryParams[k];
            if (Array.isArray(i)) {
                return { key: k, value: i.join(',') };
            }
            return { key: k, value: queryParams[k] };
        }))
            .map((/**
         * @param {?} entry
         * @return {?}
         */
        function (entry) { return entry.key + "=" + entry.value; }))
            .join('&');
        return urlBase + "?" + params;
    };
    /**
     * @private
     * @return {?}
     */
    AMapLoaderService.prototype.getUISrcFromConfig = /**
     * @private
     * @return {?}
     */
    function () {
        // tslint:disable-next-line: max-line-length
        /** @type {?} */
        var urlBase = (this.config.protocol ||
            this.defaultProtocol) + "://webapi.amap.com/ui/1.0/main-async.js?v=" + (this.config.uiVersion ||
            this.defaultUIVersion);
        return urlBase;
    };
    AMapLoaderService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AMapLoaderService.ctorParameters = function () { return [
        { type: undefined, decorators: [{ type: Inject, args: [NGX_AMAP_CONFIG,] }] },
        { type: LoggerService }
    ]; };
    return AMapLoaderService;
}());
export { AMapLoaderService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.defaultProtocol;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.defaultVersion;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.defaultUIVersion;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.loading$;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.uiLoading$;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.config;
    /**
     * @type {?}
     * @private
     */
    AMapLoaderService.prototype.logger;
}
//# sourceMappingURL=data:application/json;base64,