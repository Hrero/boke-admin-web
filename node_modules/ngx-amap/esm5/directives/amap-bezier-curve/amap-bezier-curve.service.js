/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-bezier-curve/amap-bezier-curve.service.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Injectable, NgZone } from '@angular/core';
import { ReplaySubject, zip } from 'rxjs';
import { map, switchMapTo } from 'rxjs/operators';
import { AMapService } from '../../shared/amap.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { PluginLoaderService } from '../../shared/plugin-loader.service';
/** @type {?} */
var TAG = 'AmapBezierCurve';
var AmapBezierCurveService = /** @class */ (function () {
    function AmapBezierCurveService(amaps, logger, ngZone, plugins) {
        this.amaps = amaps;
        this.logger = logger;
        this.ngZone = ngZone;
        this.plugins = plugins;
        this.bezierCurve$ = new ReplaySubject(1);
        this.editor$ = new ReplaySubject(1);
        this.polyEditor$ = new ReplaySubject(1);
    }
    /**
     * 获取贝瑟尔曲线
     */
    /**
     * 获取贝瑟尔曲线
     * @return {?}
     */
    AmapBezierCurveService.prototype.get = /**
     * 获取贝瑟尔曲线
     * @return {?}
     */
    function () {
        return this.bezierCurve$.asObservable();
    };
    /**
     * 创建贝瑟尔曲线 AMap.BezierCurve
     * @param options 选项
     */
    /**
     * 创建贝瑟尔曲线 AMap.BezierCurve
     * @param {?} options 选项
     * @return {?}
     */
    AmapBezierCurveService.prototype.create = /**
     * 创建贝瑟尔曲线 AMap.BezierCurve
     * @param {?} options 选项
     * @return {?}
     */
    function (options) {
        var _this = this;
        return this.amaps.get().pipe(map((/**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            options.map = m;
            _this.bezierCurve = _this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return new AMap.BezierCurve(options); }));
            _this.logger.d(TAG, 'new BezierCurve created.');
            _this.bezierCurve$.next(_this.bezierCurve);
            _this.bezierCurve$.complete();
            return _this.bezierCurve;
        })));
    };
    /**
     * 销毁贝瑟尔曲线
     */
    /**
     * 销毁贝瑟尔曲线
     * @return {?}
     */
    AmapBezierCurveService.prototype.destroy = /**
     * 销毁贝瑟尔曲线
     * @return {?}
     */
    function () {
        var _this = this;
        this.get().subscribe((/**
         * @param {?} m
         * @return {?}
         */
        function (m) {
            m.setMap(null);
            _this.logger.d(TAG, 'BezierCurve destroyed.');
            _this.bezierCurve = null;
        }));
    };
    /**
     * @return {?}
     */
    AmapBezierCurveService.prototype.getEditor = /**
     * @return {?}
     */
    function () {
        // plugin is loading:
        return this.editor$.asObservable();
    };
    /**
     * @return {?}
     */
    AmapBezierCurveService.prototype.getPolyEditor = /**
     * @return {?}
     */
    function () {
        return this.polyEditor$.asObservable();
    };
    /**
     * 加载编辑插件
     */
    /**
     * 加载编辑插件
     * @return {?}
     */
    AmapBezierCurveService.prototype.loadEditor = /**
     * 加载编辑插件
     * @return {?}
     */
    function () {
        return this.plugins.load('AMap.BezierCurveEditor');
    };
    /**
     * @return {?}
     */
    AmapBezierCurveService.prototype.loadPolyEditor = /**
     * @return {?}
     */
    function () {
        return this.plugins.load('AMap.PolyEditor');
    };
    /**
     * 创建编辑器
     */
    /**
     * 创建编辑器
     * @return {?}
     */
    AmapBezierCurveService.prototype.createEditor = /**
     * 创建编辑器
     * @return {?}
     */
    function () {
        var _this = this;
        return this.loadEditor().pipe(switchMapTo(zip(this.amaps.get(), this.get())), map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), m = _b[0], p = _b[1];
            _this.editor = _this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return new AMap.BezierCurveEditor(m, p); }));
            _this.logger.d(TAG, 'new BezierCurveEditor created.');
            _this.editor$.next(_this.editor);
            _this.editor$.complete();
            return _this.editor;
        })));
    };
    /**
     * @return {?}
     */
    AmapBezierCurveService.prototype.createPolyEditor = /**
     * @return {?}
     */
    function () {
        var _this = this;
        return this.loadPolyEditor().pipe(switchMapTo(zip(this.amaps.get(), this.get())), map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), m = _b[0], p = _b[1];
            _this.polyEditor = _this.ngZone.runOutsideAngular((/**
             * @return {?}
             */
            function () { return new AMap.PolyEditor(m, p); }));
            _this.logger.d(TAG, 'new PolyEditor created.');
            _this.polyEditor$.next(_this.polyEditor);
            _this.polyEditor$.complete();
            return _this.polyEditor;
        })));
    };
    /**
     * 开关编辑器
     * @param v 开关选项
     */
    /**
     * 开关编辑器
     * @param {?} v 开关选项
     * @return {?}
     */
    AmapBezierCurveService.prototype.toggleEditor = /**
     * 开关编辑器
     * @param {?} v 开关选项
     * @return {?}
     */
    function (v) {
        if (v && !this.editor) {
            this.createEditor().subscribe((/**
             * @param {?} editor
             * @return {?}
             */
            function (editor) { return editor.open(); }));
            return;
        }
        if (this.editor) {
            if (v) {
                this.editor.open();
            }
            else {
                this.editor.close();
            }
        }
    };
    /**
     * @param {?} v
     * @return {?}
     */
    AmapBezierCurveService.prototype.togglePolyEditor = /**
     * @param {?} v
     * @return {?}
     */
    function (v) {
        if (v && !this.polyEditor) {
            this.createPolyEditor().subscribe((/**
             * @param {?} editor
             * @return {?}
             */
            function (editor) { return editor.open(); }));
            return;
        }
        if (this.polyEditor) {
            if (v) {
                this.polyEditor.open();
            }
            else {
                this.polyEditor.close();
            }
        }
    };
    AmapBezierCurveService.decorators = [
        { type: Injectable }
    ];
    /** @nocollapse */
    AmapBezierCurveService.ctorParameters = function () { return [
        { type: AMapService },
        { type: LoggerService },
        { type: NgZone },
        { type: PluginLoaderService }
    ]; };
    return AmapBezierCurveService;
}());
export { AmapBezierCurveService };
if (false) {
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.bezierCurve;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.bezierCurve$;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.editor;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.editor$;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.polyEditor;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.polyEditor$;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.ngZone;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveService.prototype.plugins;
}
//# sourceMappingURL=data:application/json;base64,