/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-bezier-curve/amap-bezier-curve.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { PathOverlayOptions, AMapPathOverlay } from '../../base/amap-path-overlay';
import { AmapBezierCurveService } from './amap-bezier-curve.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
var TAG = 'amap-bezier-curve';
/** @type {?} */
var BezierCurveOptions = tslib_1.__spread(PathOverlayOptions, [
    'isOutline',
    'outlineColor',
    'dirColor',
    'borderWeight',
    'showDir',
    'path',
]);
var AmapBezierCurveDirective = /** @class */ (function (_super) {
    tslib_1.__extends(AmapBezierCurveDirective, _super);
    function AmapBezierCurveDirective(os, binder, logger, ngZone) {
        var _this = _super.call(this, os, binder) || this;
        _this.os = os;
        _this.binder = binder;
        _this.logger = logger;
        _this.ngZone = ngZone;
        /**
         * 额外: 是否隐藏
         */
        _this.hidden = false;
        /**
         * 额外: 是否开启曲线编辑器
         */
        _this.editor = false;
        /**
         * 额外: 是否开启折线编辑器
         */
        _this.polyEditor = false;
        // directive events:
        _this.naReady = new EventEmitter();
        _this.inited = false;
        /** @type {?} */
        var editor = _this.os.getEditor();
        /** @type {?} */
        var polyEditor = _this.os.getPolyEditor();
        _this.naEditorAddNode = _this.binder.bindEvent(editor, 'addnode');
        _this.naEditorRemoveNode = _this.binder.bindEvent(editor, 'removenode');
        _this.naEditorAdjust = _this.binder.bindEvent(editor, 'adjust');
        _this.naEditorEnd = _this.binder.bindEvent(editor, 'end');
        _this.naPolyEditorAddNode = _this.binder.bindEvent(polyEditor, 'addnode');
        _this.naPolyEditorRemoveNode = _this.binder.bindEvent(polyEditor, 'removenode');
        _this.naPolyEditorAdjust = _this.binder.bindEvent(polyEditor, 'adjust');
        _this.naPolyEditorEnd = _this.binder.bindEvent(polyEditor, 'end');
        return _this;
    }
    /**
     * @return {?}
     */
    AmapBezierCurveDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.os.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmapBezierCurveDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        /** @type {?} */
        var bezierCurve = this.get();
        if (!this.inited) {
            this.logger.d(TAG, 'initializing ...');
            /** @type {?} */
            var options = this.options || getOptions(this, BezierCurveOptions);
            this.logger.d(TAG, 'options:', options);
            this.os.create(options).subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () { return _this.naReady.emit(m); }));
                _this.logger.d(TAG, 'bezierCurve is ready.');
            }));
            this.inited = true;
        }
        else {
            zip(filter.has('path'), bezierCurve).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setPath(v);
            }));
            zip(filter.has('options'), bezierCurve).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setOptions(v || {});
            }));
            zip(filter.has('extData'), bezierCurve).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setExtData(v);
            }));
        }
        zip(filter.has('hidden'), bezierCurve).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
            return v ? p.hide() : p.show();
        }));
        filter.has('editor').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return _this.os.toggleEditor(v); }));
        filter.has('polyEditor').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return _this.os.togglePolyEditor(v); }));
    };
    /**
     * 获取已创建的 AMap.BezierCurve 对象
     */
    /**
     * 获取已创建的 AMap.BezierCurve 对象
     * @return {?}
     */
    AmapBezierCurveDirective.prototype.get = /**
     * 获取已创建的 AMap.BezierCurve 对象
     * @return {?}
     */
    function () {
        return this.os.get();
    };
    AmapBezierCurveDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'amap-bezier-curve',
                    exportAs: 'bezier-curve',
                    providers: [AmapBezierCurveService],
                },] }
    ];
    /** @nocollapse */
    AmapBezierCurveDirective.ctorParameters = function () { return [
        { type: AmapBezierCurveService },
        { type: EventBinderService },
        { type: LoggerService },
        { type: NgZone }
    ]; };
    AmapBezierCurveDirective.propDecorators = {
        isOutline: [{ type: Input }],
        outlineColor: [{ type: Input }],
        dirColor: [{ type: Input }],
        borderWeight: [{ type: Input }],
        showDir: [{ type: Input }],
        path: [{ type: Input }],
        hidden: [{ type: Input }],
        editor: [{ type: Input }],
        polyEditor: [{ type: Input }],
        options: [{ type: Input }],
        naReady: [{ type: Output }],
        naEditorAddNode: [{ type: Output }],
        naEditorRemoveNode: [{ type: Output }],
        naEditorAdjust: [{ type: Output }],
        naEditorEnd: [{ type: Output }],
        naPolyEditorAddNode: [{ type: Output }],
        naPolyEditorRemoveNode: [{ type: Output }],
        naPolyEditorAdjust: [{ type: Output }],
        naPolyEditorEnd: [{ type: Output }]
    };
    return AmapBezierCurveDirective;
}(AMapPathOverlay));
export { AmapBezierCurveDirective };
if (false) {
    /**
     * 线条是否带描边
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.isOutline;
    /**
     * 线条描边颜色
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.outlineColor;
    /**
     * 方向箭头颜色
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.dirColor;
    /**
     * 描边的宽度
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.borderWeight;
    /**
     * 是否延路径显示方向箭头
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.showDir;
    /**
     * 贝瑟尔曲线的路径
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.path;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.hidden;
    /**
     * 额外: 是否开启曲线编辑器
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.editor;
    /**
     * 额外: 是否开启折线编辑器
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.polyEditor;
    /**
     * 额外: 会覆盖其他属性的配置方式
     * @type {?}
     */
    AmapBezierCurveDirective.prototype.options;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naReady;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naEditorAddNode;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naEditorRemoveNode;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naEditorAdjust;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naEditorEnd;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naPolyEditorAddNode;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naPolyEditorRemoveNode;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naPolyEditorAdjust;
    /** @type {?} */
    AmapBezierCurveDirective.prototype.naPolyEditorEnd;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveDirective.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    AmapBezierCurveDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapBezierCurveDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapBezierCurveDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,