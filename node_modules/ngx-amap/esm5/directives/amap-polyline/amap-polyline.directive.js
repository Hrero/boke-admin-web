/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-polyline/amap-polyline.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { PathOverlayOptions, AMapPathOverlay } from '../../base/amap-path-overlay';
import { AmapPolylineService } from './amap-polyline.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
var TAG = 'amap-polyline';
/** @type {?} */
var PolylineOptions = tslib_1.__spread(PathOverlayOptions, [
    'isOutline',
    'outlineColor',
    'geodesic',
    'dirColor',
    'borderWeight',
    'showDir',
    'path',
]);
var AmapPolylineDirective = /** @class */ (function (_super) {
    tslib_1.__extends(AmapPolylineDirective, _super);
    function AmapPolylineDirective(os, binder, logger, ngZone) {
        var _this = _super.call(this, os, binder) || this;
        _this.os = os;
        _this.binder = binder;
        _this.logger = logger;
        _this.ngZone = ngZone;
        /**
         * 额外: 是否隐藏
         */
        _this.hidden = false;
        /**
         * 额外: 是否开启编辑器
         */
        _this.editor = false;
        // directive events:
        _this.naReady = new EventEmitter();
        _this.inited = false;
        /** @type {?} */
        var editor = _this.os.getEditor();
        _this.naEditorAddNode = _this.binder.bindEvent(editor, 'addnode');
        _this.naEditorRemoveNode = _this.binder.bindEvent(editor, 'removenode');
        _this.naEditorAdjust = _this.binder.bindEvent(editor, 'adjust');
        _this.naEditorEnd = _this.binder.bindEvent(editor, 'end');
        return _this;
    }
    /**
     * @return {?}
     */
    AmapPolylineDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.os.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmapPolylineDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        /** @type {?} */
        var polyline = this.get();
        if (!this.inited) {
            this.logger.d(TAG, 'initializing ...');
            /** @type {?} */
            var options = this.options || getOptions(this, PolylineOptions);
            this.logger.d(TAG, 'options:', options);
            this.os.create(options).subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () { return _this.naReady.emit(m); }));
                _this.logger.d(TAG, 'polyline is ready.');
            }));
            this.inited = true;
        }
        else {
            zip(filter.has('path'), polyline).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setPath(v);
            }));
            zip(filter.has('options'), polyline).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setOptions(v || {});
            }));
            zip(filter.has('extData'), polyline).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setExtData(v);
            }));
        }
        zip(filter.has('hidden'), polyline).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
            return (v ? p.hide() : p.show());
        }));
        filter.has('editor').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return _this.os.toggleEditor(v); }));
    };
    /**
     * 获取已创建的 AMap.Polyline 对象
     */
    /**
     * 获取已创建的 AMap.Polyline 对象
     * @return {?}
     */
    AmapPolylineDirective.prototype.get = /**
     * 获取已创建的 AMap.Polyline 对象
     * @return {?}
     */
    function () {
        return this.os.get();
    };
    AmapPolylineDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'amap-polyline',
                    exportAs: 'polyline',
                    providers: [AmapPolylineService],
                },] }
    ];
    /** @nocollapse */
    AmapPolylineDirective.ctorParameters = function () { return [
        { type: AmapPolylineService },
        { type: EventBinderService },
        { type: LoggerService },
        { type: NgZone }
    ]; };
    AmapPolylineDirective.propDecorators = {
        isOutline: [{ type: Input }],
        outlineColor: [{ type: Input }],
        geodesic: [{ type: Input }],
        dirColor: [{ type: Input }],
        borderWeight: [{ type: Input }],
        showDir: [{ type: Input }],
        path: [{ type: Input }],
        hidden: [{ type: Input }],
        editor: [{ type: Input }],
        options: [{ type: Input }],
        naReady: [{ type: Output }],
        naEditorAddNode: [{ type: Output }],
        naEditorRemoveNode: [{ type: Output }],
        naEditorAdjust: [{ type: Output }],
        naEditorEnd: [{ type: Output }]
    };
    return AmapPolylineDirective;
}(AMapPathOverlay));
export { AmapPolylineDirective };
if (false) {
    /**
     * 线条是否带描边
     * @type {?}
     */
    AmapPolylineDirective.prototype.isOutline;
    /**
     * 线条描边颜色
     * @type {?}
     */
    AmapPolylineDirective.prototype.outlineColor;
    /**
     * 是否绘制成大地线
     * @type {?}
     */
    AmapPolylineDirective.prototype.geodesic;
    /**
     * 方向箭头颜色
     * @type {?}
     */
    AmapPolylineDirective.prototype.dirColor;
    /**
     * 描边的宽度
     * @type {?}
     */
    AmapPolylineDirective.prototype.borderWeight;
    /**
     * 是否延路径显示方向箭头
     * @type {?}
     */
    AmapPolylineDirective.prototype.showDir;
    /**
     * 折线的节点数组
     * @type {?}
     */
    AmapPolylineDirective.prototype.path;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    AmapPolylineDirective.prototype.hidden;
    /**
     * 额外: 是否开启编辑器
     * @type {?}
     */
    AmapPolylineDirective.prototype.editor;
    /**
     * 额外: 会覆盖其他属性的配置方式
     * @type {?}
     */
    AmapPolylineDirective.prototype.options;
    /** @type {?} */
    AmapPolylineDirective.prototype.naReady;
    /** @type {?} */
    AmapPolylineDirective.prototype.naEditorAddNode;
    /** @type {?} */
    AmapPolylineDirective.prototype.naEditorRemoveNode;
    /** @type {?} */
    AmapPolylineDirective.prototype.naEditorAdjust;
    /** @type {?} */
    AmapPolylineDirective.prototype.naEditorEnd;
    /**
     * @type {?}
     * @private
     */
    AmapPolylineDirective.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    AmapPolylineDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapPolylineDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapPolylineDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapPolylineDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,