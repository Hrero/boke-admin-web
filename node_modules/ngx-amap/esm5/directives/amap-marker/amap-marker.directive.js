/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-marker/amap-marker.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter, ContentChildren, QueryList, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { AmapMarkerService } from './amap-marker.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { AMapOverlay, OverlayOptions } from '../../base/amap-overlay';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
import { PixelService } from '../../shared/pixel.service';
import { IconService } from '../../shared/icon.service';
import { MarkerLabelService } from '../../shared/marker-label.service';
import { AmapInfoWindowComponent } from '../../components/amap-info-window/amap-info-window.component';
import { AMapService } from '../../shared/amap.service';
/** @type {?} */
var TAG = 'amap-marker';
/** @type {?} */
var ALL_OPTIONS = tslib_1.__spread(OverlayOptions, [
    'position',
    'anchor',
    'offset',
    'icon',
    'content',
    'topWhenClick',
    'raiseOnDrag',
    'visible',
    'zIndex',
    'angle',
    'autoRotation',
    'animation',
    'shadow',
    'title',
    'shape',
    'label',
]);
var AmapMarkerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(AmapMarkerDirective, _super);
    function AmapMarkerDirective(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
        var _this = _super.call(this, os, binder) || this;
        _this.os = os;
        _this.binder = binder;
        _this.amaps = amaps;
        _this.pixels = pixels;
        _this.icons = icons;
        _this.mlabels = mlabels;
        _this.logger = logger;
        _this.ngZone = ngZone;
        /**
         * 额外: 是否隐藏
         */
        _this.hidden = false;
        /**
         * 额外: 是否包含在点聚合中
         */
        _this.inCluster = false;
        /**
         * 额外: 点击时是否显示信息窗体
         */
        _this.openInfoWindow = true;
        // amap-marker events:
        _this.naReady = new EventEmitter();
        // amap info window:
        _this.infoWindowComponent = new QueryList();
        _this.inited = false;
        /** @type {?} */
        var target = _this.os.get();
        _this.naMouseOut = _this.binder.bindEvent(target, 'mouseout');
        _this.naDragStart = _this.binder.bindEvent(target, 'dragstart');
        _this.naDragging = _this.binder.bindEvent(target, 'dragging');
        _this.naDragEnd = _this.binder.bindEvent(target, 'dragend');
        _this.naMoving = _this.binder.bindEvent(target, 'moving');
        _this.naMoveEnd = _this.binder.bindEvent(target, 'moveend');
        _this.naMoveAlong = _this.binder.bindEvent(target, 'movealong');
        return _this;
    }
    /**
     * @return {?}
     */
    AmapMarkerDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.os.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmapMarkerDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        /** @type {?} */
        var marker = this.get();
        if (!this.inited) {
            // do not draw marker when no poistion defined.
            if (!this.position) {
                return;
            }
            this.amaps.get().subscribe((/**
             * @return {?}
             */
            function () {
                _this.logger.d(TAG, 'initializing ...');
                // bind info window events:
                _this.subscription = _this.binder.bindEvent(marker, 'click').subscribe((/**
                 * @return {?}
                 */
                function () {
                    if (_this.openInfoWindow) {
                        _this.infoWindowComponent.forEach((/**
                         * @param {?} w
                         * @return {?}
                         */
                        function (w) { return w.open(); }));
                    }
                }));
                /** @type {?} */
                var options = getOptions(_this, ALL_OPTIONS);
                if (_this.icon) {
                    options.icon = _this.icons.create(_this.icon);
                }
                if (_this.shadow) {
                    options.shadow = _this.icons.create(_this.shadow);
                }
                if (_this.label) {
                    options.label = _this.mlabels.create(_this.label);
                }
                if (_this.offset) {
                    options.offset = _this.pixels.create(_this.offset);
                }
                _this.logger.d(TAG, 'options:', options);
                _this.os.create(options, !_this.inCluster).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG, 'marker is ready.');
                }));
                _this.inited = true;
                _this.updateInfoWindow();
                _this.updateInfoWindowPosition();
            }));
        }
        else {
            zip(filter.has('icon'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setIcon(_this.icons.create(v));
            }));
            zip(filter.has('shadow'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setShadow(_this.icons.create(v));
            }));
            zip(filter.has('label'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setLabel(_this.mlabels.create(v));
            }));
            zip(filter.has('title'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setTitle(v);
            }));
            zip(filter.has('content'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setContent(v);
            }));
            zip(filter.has('extData'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setExtData(v);
            }));
            zip(filter.has('clickable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setClickable(!!v);
            }));
            zip(filter.has('draggable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setDraggable(!!v);
            }));
            zip(filter.has('visible'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return (v ? m.show() : m.hide());
            }));
            zip(filter.has('cursor'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setCursor(v);
            }));
            zip(filter.has('animation'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setAnimation(v);
            }));
            zip(filter.has('angle'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setAngle(v);
            }));
            zip(filter.has('zIndex'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setzIndex(v);
            }));
            zip(filter.has('shape'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setShape(v);
            }));
            zip(filter.notEmpty('offset'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setOffset(_this.pixels.create(v));
            }));
            zip(filter.notEmpty('position'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setPosition(v);
            }));
        }
        zip(filter.has('isTop'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
            return m.setTop(!!v);
        }));
        zip(filter.has('hidden'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
            return (v ? m.hide() : m.show());
        }));
    };
    /**
     * @return {?}
     */
    AmapMarkerDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateInfoWindow();
        this.infoWindowComponent.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.updateInfoWindow(); }));
    };
    /**
     * @private
     * @return {?}
     */
    AmapMarkerDirective.prototype.updateInfoWindow = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.infoWindowComponent && this.inited) {
            if (this.infoWindowComponent.length > 1) {
                this.logger.e(TAG, 'Expected no more than 1 info window.');
                return;
            }
            /** @type {?} */
            var marker_1 = this.os.get();
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            function (component) {
                component.hostMarker = marker_1;
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    AmapMarkerDirective.prototype.updateInfoWindowPosition = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.infoWindowComponent && this.inited) {
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            function (component) {
                component.toggleOpen();
            }));
        }
    };
    /**
     * 获取已创建的 AMap.Marker 对象
     */
    /**
     * 获取已创建的 AMap.Marker 对象
     * @return {?}
     */
    AmapMarkerDirective.prototype.get = /**
     * 获取已创建的 AMap.Marker 对象
     * @return {?}
     */
    function () {
        return this.os.get();
    };
    AmapMarkerDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'amap-marker',
                    exportAs: 'marker',
                    providers: [AmapMarkerService],
                },] }
    ];
    /** @nocollapse */
    AmapMarkerDirective.ctorParameters = function () { return [
        { type: AmapMarkerService },
        { type: EventBinderService },
        { type: AMapService },
        { type: PixelService },
        { type: IconService },
        { type: MarkerLabelService },
        { type: LoggerService },
        { type: NgZone }
    ]; };
    AmapMarkerDirective.propDecorators = {
        position: [{ type: Input }],
        anchor: [{ type: Input }],
        offset: [{ type: Input }],
        icon: [{ type: Input }],
        content: [{ type: Input }],
        topWhenClick: [{ type: Input }],
        raiseOnDrag: [{ type: Input }],
        visible: [{ type: Input }],
        zIndex: [{ type: Input }],
        angle: [{ type: Input }],
        autoRotation: [{ type: Input }],
        animation: [{ type: Input }],
        shadow: [{ type: Input }],
        title: [{ type: Input }],
        shape: [{ type: Input }],
        label: [{ type: Input }],
        isTop: [{ type: Input }],
        hidden: [{ type: Input }],
        inCluster: [{ type: Input }],
        openInfoWindow: [{ type: Input }],
        naReady: [{ type: Output }],
        naMouseOut: [{ type: Output }],
        naDragStart: [{ type: Output }],
        naDragging: [{ type: Output }],
        naDragEnd: [{ type: Output }],
        naMoving: [{ type: Output }],
        naMoveEnd: [{ type: Output }],
        naMoveAlong: [{ type: Output }],
        infoWindowComponent: [{ type: ContentChildren, args: [AmapInfoWindowComponent,] }]
    };
    return AmapMarkerDirective;
}(AMapOverlay));
export { AmapMarkerDirective };
if (false) {
    /**
     * 点标记在地图上显示的位置
     * @type {?}
     */
    AmapMarkerDirective.prototype.position;
    /**
     * 标记锚点
     * @type {?}
     */
    AmapMarkerDirective.prototype.anchor;
    /**
     * 点标记显示位置偏移量
     * @type {?}
     */
    AmapMarkerDirective.prototype.offset;
    /**
     * 需在点标记中显示的图标
     * @type {?}
     */
    AmapMarkerDirective.prototype.icon;
    /**
     * 点标记显示内容
     * @type {?}
     */
    AmapMarkerDirective.prototype.content;
    /**
     * 鼠标点击时marker是否置顶
     * @type {?}
     */
    AmapMarkerDirective.prototype.topWhenClick;
    /**
     * 拖拽点标记时是否开启点标记离开地图的效果
     * @type {?}
     */
    AmapMarkerDirective.prototype.raiseOnDrag;
    /**
     * 点标记是否可见
     * @type {?}
     */
    AmapMarkerDirective.prototype.visible;
    /**
     * 点标记的叠加顺序
     * @type {?}
     */
    AmapMarkerDirective.prototype.zIndex;
    /**
     * 点标记的旋转角度
     * @type {?}
     */
    AmapMarkerDirective.prototype.angle;
    /**
     * 是否自动旋转
     * @type {?}
     */
    AmapMarkerDirective.prototype.autoRotation;
    /**
     * 点标记的动画效果
     * @type {?}
     */
    AmapMarkerDirective.prototype.animation;
    /**
     * 点标记阴影
     * @type {?}
     */
    AmapMarkerDirective.prototype.shadow;
    /**
     * 鼠标滑过点标记时的文字提示
     * @type {?}
     */
    AmapMarkerDirective.prototype.title;
    /**
     * 可点击区域
     * @type {?}
     */
    AmapMarkerDirective.prototype.shape;
    /**
     * 文本标注
     * @type {?}
     */
    AmapMarkerDirective.prototype.label;
    /**
     * 额外: 是否置顶
     * @type {?}
     */
    AmapMarkerDirective.prototype.isTop;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    AmapMarkerDirective.prototype.hidden;
    /**
     * 额外: 是否包含在点聚合中
     * @type {?}
     */
    AmapMarkerDirective.prototype.inCluster;
    /**
     * 额外: 点击时是否显示信息窗体
     * @type {?}
     */
    AmapMarkerDirective.prototype.openInfoWindow;
    /** @type {?} */
    AmapMarkerDirective.prototype.naReady;
    /** @type {?} */
    AmapMarkerDirective.prototype.naMouseOut;
    /** @type {?} */
    AmapMarkerDirective.prototype.naDragStart;
    /** @type {?} */
    AmapMarkerDirective.prototype.naDragging;
    /** @type {?} */
    AmapMarkerDirective.prototype.naDragEnd;
    /** @type {?} */
    AmapMarkerDirective.prototype.naMoving;
    /** @type {?} */
    AmapMarkerDirective.prototype.naMoveEnd;
    /** @type {?} */
    AmapMarkerDirective.prototype.naMoveAlong;
    /** @type {?} */
    AmapMarkerDirective.prototype.infoWindowComponent;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.inited;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.subscription;
    /**
     * @type {?}
     * @protected
     */
    AmapMarkerDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapMarkerDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.pixels;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.icons;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.mlabels;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,