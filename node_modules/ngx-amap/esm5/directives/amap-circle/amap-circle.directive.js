/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-circle/amap-circle.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Output, EventEmitter, Directive, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { AMapCircle, CircleOptions } from '../../base/amap-circle';
import { AmapCircleService } from './amap-circle.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
var TAG = 'amap-circle';
var AmapCircleDirective = /** @class */ (function (_super) {
    tslib_1.__extends(AmapCircleDirective, _super);
    function AmapCircleDirective(os, binder, logger, ngZone) {
        var _this = _super.call(this, os, binder) || this;
        _this.os = os;
        _this.binder = binder;
        _this.logger = logger;
        _this.ngZone = ngZone;
        _this.inited = false;
        /** @type {?} */
        var editor = _this.os.getEditor();
        _this.naEditorAddNode = _this.binder.bindEvent(editor, 'addnode');
        _this.naEditorRemoveNode = _this.binder.bindEvent(editor, 'removenode');
        _this.naEditorAdjust = _this.binder.bindEvent(editor, 'adjust');
        _this.naEditorEnd = _this.binder.bindEvent(editor, 'end');
        return _this;
    }
    /**
     * @return {?}
     */
    AmapCircleDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.os.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmapCircleDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        /** @type {?} */
        var circle = this.get();
        if (!this.inited) {
            this.logger.d(TAG, 'initializing ...');
            /** @type {?} */
            var options = this.options || getOptions(this, CircleOptions);
            this.logger.d(TAG, 'options:', options);
            this.os.create(options).subscribe((/**
             * @param {?} m
             * @return {?}
             */
            function (m) {
                _this.ngZone.run((/**
                 * @return {?}
                 */
                function () { return _this.naReady.emit(m); }));
                _this.logger.d(TAG, 'circle is ready.');
            }));
            this.inited = true;
        }
        else {
            zip(filter.has('center'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setCenter(v);
            }));
            zip(filter.has('options'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setOptions(v || {});
            }));
            zip(filter.has('radius'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setRadius(v);
            }));
            zip(filter.has('extData'), circle).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
                return p.setExtData(v);
            }));
        }
        zip(filter.has('hidden'), circle).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], p = _b[1];
            return (v ? p.hide() : p.show());
        }));
        filter.has('editor').subscribe((/**
         * @param {?} v
         * @return {?}
         */
        function (v) { return _this.os.toggleEditor(v); }));
    };
    /**
     * 获取已创建的 AMap.Circle 对象
     */
    /**
     * 获取已创建的 AMap.Circle 对象
     * @return {?}
     */
    AmapCircleDirective.prototype.get = /**
     * 获取已创建的 AMap.Circle 对象
     * @return {?}
     */
    function () {
        return this.os.get();
    };
    AmapCircleDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'amap-circle',
                    exportAs: 'circle',
                    providers: [AmapCircleService],
                },] }
    ];
    /** @nocollapse */
    AmapCircleDirective.ctorParameters = function () { return [
        { type: AmapCircleService },
        { type: EventBinderService },
        { type: LoggerService },
        { type: NgZone }
    ]; };
    AmapCircleDirective.propDecorators = {
        naEditorAddNode: [{ type: Output }],
        naEditorRemoveNode: [{ type: Output }],
        naEditorAdjust: [{ type: Output }],
        naEditorEnd: [{ type: Output }]
    };
    return AmapCircleDirective;
}(AMapCircle));
export { AmapCircleDirective };
if (false) {
    /** @type {?} */
    AmapCircleDirective.prototype.naEditorAddNode;
    /** @type {?} */
    AmapCircleDirective.prototype.naEditorRemoveNode;
    /** @type {?} */
    AmapCircleDirective.prototype.naEditorAdjust;
    /** @type {?} */
    AmapCircleDirective.prototype.naEditorEnd;
    /**
     * @type {?}
     * @private
     */
    AmapCircleDirective.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    AmapCircleDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapCircleDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapCircleDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapCircleDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,