/**
 * @fileoverview added by tsickle
 * Generated from: directives/ui-simple-marker/ui-simple-marker.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Input, Output, EventEmitter, ContentChildren, QueryList, } from '@angular/core';
import { zip } from 'rxjs';
import { AMapOverlay, OverlayOptions } from '../../base/amap-overlay';
import { AmapInfoWindowComponent } from '../../components/amap-info-window/amap-info-window.component';
import { getOptions, ChangeFilter } from '../../utils';
/** @type {?} */
export var SimpleMarkerOptions = tslib_1.__spread(OverlayOptions, [
    // Marker options without cotent
    'position',
    'anchor',
    'offset',
    'icon',
    'topWhenClick',
    'raiseOnDrag',
    'visible',
    'zIndex',
    'angle',
    'autoRotation',
    'animation',
    'shadow',
    'title',
    'shape',
    'label',
    // Own options
    'iconTheme',
    'iconStyle',
    'iconLabel',
    'showPositionPoint',
    'containerClassNames',
]);
var UISimpleMarker = /** @class */ (function (_super) {
    tslib_1.__extends(UISimpleMarker, _super);
    function UISimpleMarker(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
        var _this = _super.call(this, os, binder) || this;
        _this.os = os;
        _this.binder = binder;
        _this.amaps = amaps;
        _this.pixels = pixels;
        _this.icons = icons;
        _this.mlabels = mlabels;
        _this.logger = logger;
        _this.ngZone = ngZone;
        _this.TAG = 'ui-simple-marker';
        /**
         * 额外: 是否隐藏
         */
        _this.hidden = false;
        /**
         * 额外: 是否包含在点聚合中
         */
        _this.inCluster = false;
        /**
         * 额外: 点击时是否显示信息窗体
         */
        _this.openInfoWindow = true;
        // amap-marker events:
        _this.naReady = new EventEmitter();
        // amap info window:
        _this.infoWindowComponent = new QueryList();
        _this.inited = false;
        /** @type {?} */
        var target = _this.os.get();
        _this.naMouseOut = _this.binder.bindEvent(target, 'mouseout');
        _this.naDragStart = _this.binder.bindEvent(target, 'dragstart');
        _this.naDragging = _this.binder.bindEvent(target, 'dragging');
        _this.naDragEnd = _this.binder.bindEvent(target, 'dragend');
        _this.naMoving = _this.binder.bindEvent(target, 'moving');
        _this.naMoveEnd = _this.binder.bindEvent(target, 'moveend');
        _this.naMoveAlong = _this.binder.bindEvent(target, 'movealong');
        return _this;
    }
    /**
     * @return {?}
     */
    UISimpleMarker.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.os.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    UISimpleMarker.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        /** @type {?} */
        var marker = this.get();
        if (!this.inited) {
            // do not draw marker when no poistion defined.
            if (!this.position) {
                return;
            }
            this.amaps.get().subscribe((/**
             * @return {?}
             */
            function () {
                _this.logger.d(_this.TAG, 'initializing ...');
                // bind info window events:
                _this.subscription = _this.binder.bindEvent(marker, 'click').subscribe((/**
                 * @return {?}
                 */
                function () {
                    if (_this.openInfoWindow) {
                        _this.infoWindowComponent.forEach((/**
                         * @param {?} w
                         * @return {?}
                         */
                        function (w) { return w.open(); }));
                    }
                }));
                /** @type {?} */
                var options = _this.getOptions();
                if (_this.icon) {
                    options.icon = _this.icons.create(_this.icon);
                }
                if (_this.shadow) {
                    options.shadow = _this.icons.create(_this.shadow);
                }
                if (_this.label) {
                    options.label = _this.mlabels.create(_this.label);
                }
                if (_this.offset) {
                    options.offset = _this.pixels.create(_this.offset);
                }
                _this.logger.d(_this.TAG, 'options:', options);
                _this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(_this.TAG, 'marker is ready.');
                }));
                _this.inited = true;
                _this.updateInfoWindow();
                _this.updateInfoWindowPosition();
            }));
        }
        else {
            zip(filter.has('icon'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setIcon(_this.icons.create(v));
            }));
            zip(filter.has('shadow'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setShadow(_this.icons.create(v));
            }));
            zip(filter.has('label'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setLabel(_this.mlabels.create(v));
            }));
            zip(filter.has('title'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setTitle(v);
            }));
            zip(filter.has('extData'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setExtData(v);
            }));
            zip(filter.has('clickable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setClickable(!!v);
            }));
            zip(filter.has('draggable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setDraggable(!!v);
            }));
            zip(filter.has('visible'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return (v ? m.show() : m.hide());
            }));
            zip(filter.has('cursor'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setCursor(v);
            }));
            zip(filter.has('animation'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setAnimation(v);
            }));
            zip(filter.has('angle'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setAngle(v);
            }));
            zip(filter.has('zIndex'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setzIndex(v);
            }));
            zip(filter.has('shape'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setShape(v);
            }));
            zip(filter.notEmpty('offset'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setOffset(_this.pixels.create(v));
            }));
            zip(filter.notEmpty('position'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setPosition(v);
            }));
            zip(filter.has('showPositionPoint'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                if (!!v) {
                    m.showPositionPoint();
                }
                else {
                    m.hidePositionPoint();
                }
            }));
            zip(filter.notEmpty('iconStyle'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                if (changes.iconTheme && changes.iconTheme.currentValue) {
                    m.setIconThemeAndStyle(changes.iconTheme.currentValue, v);
                }
                else {
                    m.setIconStyle(v);
                }
            }));
            zip(filter.notEmpty('iconLabel'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setIconLabel(v);
            }));
            zip(filter.notEmpty('containerClassNames'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setContainerClassNames(v);
            }));
        }
        zip(filter.has('isTop'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
            return m.setTop(!!v);
        }));
        zip(filter.has('hidden'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
            return (v ? m.hide() : m.show());
        }));
    };
    /**
     * @return {?}
     */
    UISimpleMarker.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateInfoWindow();
        this.infoWindowComponent.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.updateInfoWindow(); }));
    };
    /**
     * @private
     * @return {?}
     */
    UISimpleMarker.prototype.updateInfoWindow = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.infoWindowComponent && this.inited) {
            if (this.infoWindowComponent.length > 1) {
                this.logger.e(this.TAG, 'Expected no more than 1 info window.');
                return;
            }
            /** @type {?} */
            var marker_1 = this.os.get();
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            function (component) {
                component.hostMarker = marker_1;
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    UISimpleMarker.prototype.updateInfoWindowPosition = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.infoWindowComponent && this.inited) {
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            function (component) {
                component.toggleOpen();
            }));
        }
    };
    /**
     * @return {?}
     */
    UISimpleMarker.prototype.getOptions = /**
     * @return {?}
     */
    function () {
        return getOptions(this, SimpleMarkerOptions);
    };
    /**
     * 获取已创建的 AMapUI 对象
     */
    /**
     * 获取已创建的 AMapUI 对象
     * @return {?}
     */
    UISimpleMarker.prototype.get = /**
     * 获取已创建的 AMapUI 对象
     * @return {?}
     */
    function () {
        return this.os.get();
    };
    UISimpleMarker.propDecorators = {
        iconTheme: [{ type: Input }],
        iconStyle: [{ type: Input }],
        iconLabel: [{ type: Input }],
        showPositionPoint: [{ type: Input }],
        containerClassNames: [{ type: Input }],
        position: [{ type: Input }],
        anchor: [{ type: Input }],
        offset: [{ type: Input }],
        icon: [{ type: Input }],
        topWhenClick: [{ type: Input }],
        raiseOnDrag: [{ type: Input }],
        visible: [{ type: Input }],
        zIndex: [{ type: Input }],
        angle: [{ type: Input }],
        autoRotation: [{ type: Input }],
        animation: [{ type: Input }],
        shadow: [{ type: Input }],
        title: [{ type: Input }],
        shape: [{ type: Input }],
        label: [{ type: Input }],
        isTop: [{ type: Input }],
        hidden: [{ type: Input }],
        inCluster: [{ type: Input }],
        openInfoWindow: [{ type: Input }],
        naReady: [{ type: Output }],
        naMouseOut: [{ type: Output }],
        naDragStart: [{ type: Output }],
        naDragging: [{ type: Output }],
        naDragEnd: [{ type: Output }],
        naMoving: [{ type: Output }],
        naMoveEnd: [{ type: Output }],
        naMoveAlong: [{ type: Output }],
        infoWindowComponent: [{ type: ContentChildren, args: [AmapInfoWindowComponent,] }]
    };
    return UISimpleMarker;
}(AMapOverlay));
export { UISimpleMarker };
if (false) {
    /** @type {?} */
    UISimpleMarker.prototype.TAG;
    /**
     * 样式主题
     * @type {?}
     */
    UISimpleMarker.prototype.iconTheme;
    /**
     * 背景图标样式
     * @type {?}
     */
    UISimpleMarker.prototype.iconStyle;
    /**
     * 图标前景文字
     * @type {?}
     */
    UISimpleMarker.prototype.iconLabel;
    /**
     * 是否显示定位点
     * @type {?}
     */
    UISimpleMarker.prototype.showPositionPoint;
    /**
     * 内建的Dom容器上附带的class，多个class name用空格分开
     * @type {?}
     */
    UISimpleMarker.prototype.containerClassNames;
    /**
     * 点标记在地图上显示的位置
     * @type {?}
     */
    UISimpleMarker.prototype.position;
    /**
     * 标记锚点
     * @type {?}
     */
    UISimpleMarker.prototype.anchor;
    /**
     * 点标记显示位置偏移量
     * @type {?}
     */
    UISimpleMarker.prototype.offset;
    /**
     * 需在点标记中显示的图标
     * @type {?}
     */
    UISimpleMarker.prototype.icon;
    /**
     * 鼠标点击时marker是否置顶
     * @type {?}
     */
    UISimpleMarker.prototype.topWhenClick;
    /**
     * 拖拽点标记时是否开启点标记离开地图的效果
     * @type {?}
     */
    UISimpleMarker.prototype.raiseOnDrag;
    /**
     * 点标记是否可见
     * @type {?}
     */
    UISimpleMarker.prototype.visible;
    /**
     * 点标记的叠加顺序
     * @type {?}
     */
    UISimpleMarker.prototype.zIndex;
    /**
     * 点标记的旋转角度
     * @type {?}
     */
    UISimpleMarker.prototype.angle;
    /**
     * 是否自动旋转
     * @type {?}
     */
    UISimpleMarker.prototype.autoRotation;
    /**
     * 点标记的动画效果
     * @type {?}
     */
    UISimpleMarker.prototype.animation;
    /**
     * 点标记阴影
     * @type {?}
     */
    UISimpleMarker.prototype.shadow;
    /**
     * 鼠标滑过点标记时的文字提示
     * @type {?}
     */
    UISimpleMarker.prototype.title;
    /**
     * 可点击区域
     * @type {?}
     */
    UISimpleMarker.prototype.shape;
    /**
     * 文本标注
     * @type {?}
     */
    UISimpleMarker.prototype.label;
    /**
     * 额外: 是否置顶
     * @type {?}
     */
    UISimpleMarker.prototype.isTop;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    UISimpleMarker.prototype.hidden;
    /**
     * 额外: 是否包含在点聚合中
     * @type {?}
     */
    UISimpleMarker.prototype.inCluster;
    /**
     * 额外: 点击时是否显示信息窗体
     * @type {?}
     */
    UISimpleMarker.prototype.openInfoWindow;
    /** @type {?} */
    UISimpleMarker.prototype.naReady;
    /** @type {?} */
    UISimpleMarker.prototype.naMouseOut;
    /** @type {?} */
    UISimpleMarker.prototype.naDragStart;
    /** @type {?} */
    UISimpleMarker.prototype.naDragging;
    /** @type {?} */
    UISimpleMarker.prototype.naDragEnd;
    /** @type {?} */
    UISimpleMarker.prototype.naMoving;
    /** @type {?} */
    UISimpleMarker.prototype.naMoveEnd;
    /** @type {?} */
    UISimpleMarker.prototype.naMoveAlong;
    /** @type {?} */
    UISimpleMarker.prototype.infoWindowComponent;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.subscription;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.binder;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.amaps;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.pixels;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.icons;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.mlabels;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.logger;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarker.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,