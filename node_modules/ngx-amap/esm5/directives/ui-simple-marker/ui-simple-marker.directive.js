/**
 * @fileoverview added by tsickle
 * Generated from: directives/ui-simple-marker/ui-simple-marker.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, NgZone } from '@angular/core';
import { UISimpleMarkerService } from './ui-simple-marker.service';
import { UISimpleMarker } from './ui-simple-marker';
import { EventBinderService } from '../../shared/event-binder.service';
import { AMapService } from '../../shared/amap.service';
import { PixelService } from '../../shared/pixel.service';
import { IconService } from '../../shared/icon.service';
import { MarkerLabelService } from '../../shared/marker-label.service';
import { LoggerService } from '../../shared/logger/logger.service';
var UISimpleMarkerDirective = /** @class */ (function (_super) {
    tslib_1.__extends(UISimpleMarkerDirective, _super);
    function UISimpleMarkerDirective(os, binder, amaps, pixels, icons, mlabels, logger, ngZone) {
        var _this = _super.call(this, os, binder, amaps, pixels, icons, mlabels, logger, ngZone) || this;
        _this.os = os;
        _this.binder = binder;
        _this.amaps = amaps;
        _this.pixels = pixels;
        _this.icons = icons;
        _this.mlabels = mlabels;
        _this.logger = logger;
        _this.ngZone = ngZone;
        return _this;
    }
    UISimpleMarkerDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'ui-simple-marker',
                    exportAs: 'simpleMarker',
                    providers: [UISimpleMarkerService],
                },] }
    ];
    /** @nocollapse */
    UISimpleMarkerDirective.ctorParameters = function () { return [
        { type: UISimpleMarkerService },
        { type: EventBinderService },
        { type: AMapService },
        { type: PixelService },
        { type: IconService },
        { type: MarkerLabelService },
        { type: LoggerService },
        { type: NgZone }
    ]; };
    return UISimpleMarkerDirective;
}(UISimpleMarker));
export { UISimpleMarkerDirective };
if (false) {
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.binder;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.amaps;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.pixels;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.icons;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.mlabels;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.logger;
    /**
     * @type {?}
     * @protected
     */
    UISimpleMarkerDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktc2ltcGxlLW1hcmtlci5kaXJlY3RpdmUuanMiLCJzb3VyY2VSb290Ijoibmc6Ly9uZ3gtYW1hcC8iLCJzb3VyY2VzIjpbImRpcmVjdGl2ZXMvdWktc2ltcGxlLW1hcmtlci91aS1zaW1wbGUtbWFya2VyLmRpcmVjdGl2ZS50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxPQUFPLEVBQUUsU0FBUyxFQUFFLE1BQU0sRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUNsRCxPQUFPLEVBQUUscUJBQXFCLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUNuRSxPQUFPLEVBQUUsY0FBYyxFQUFFLE1BQU0sb0JBQW9CLENBQUM7QUFDcEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLFdBQVcsRUFBRSxNQUFNLDJCQUEyQixDQUFDO0FBQ3hELE9BQU8sRUFBRSxZQUFZLEVBQUUsTUFBTSw0QkFBNEIsQ0FBQztBQUMxRCxPQUFPLEVBQUUsV0FBVyxFQUFFLE1BQU0sMkJBQTJCLENBQUM7QUFDeEQsT0FBTyxFQUFFLGtCQUFrQixFQUFFLE1BQU0sbUNBQW1DLENBQUM7QUFDdkUsT0FBTyxFQUFFLGFBQWEsRUFBRSxNQUFNLG9DQUFvQyxDQUFDO0FBRW5FO0lBSzZDLG1EQUFjO0lBQ3pELGlDQUNZLEVBQXlCLEVBQ3pCLE1BQTBCLEVBQzFCLEtBQWtCLEVBQ2xCLE1BQW9CLEVBQ3BCLEtBQWtCLEVBQ2xCLE9BQTJCLEVBQzNCLE1BQXFCLEVBQ3JCLE1BQWM7UUFSMUIsWUFVRSxrQkFBTSxFQUFFLEVBQUUsTUFBTSxFQUFFLEtBQUssRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRSxNQUFNLEVBQUUsTUFBTSxDQUFDLFNBQ2pFO1FBVlcsUUFBRSxHQUFGLEVBQUUsQ0FBdUI7UUFDekIsWUFBTSxHQUFOLE1BQU0sQ0FBb0I7UUFDMUIsV0FBSyxHQUFMLEtBQUssQ0FBYTtRQUNsQixZQUFNLEdBQU4sTUFBTSxDQUFjO1FBQ3BCLFdBQUssR0FBTCxLQUFLLENBQWE7UUFDbEIsYUFBTyxHQUFQLE9BQU8sQ0FBb0I7UUFDM0IsWUFBTSxHQUFOLE1BQU0sQ0FBZTtRQUNyQixZQUFNLEdBQU4sTUFBTSxDQUFROztJQUcxQixDQUFDOztnQkFqQkYsU0FBUyxTQUFDO29CQUNULFFBQVEsRUFBRSxrQkFBa0I7b0JBQzVCLFFBQVEsRUFBRSxjQUFjO29CQUN4QixTQUFTLEVBQUUsQ0FBQyxxQkFBcUIsQ0FBQztpQkFDbkM7Ozs7Z0JBYlEscUJBQXFCO2dCQUVyQixrQkFBa0I7Z0JBQ2xCLFdBQVc7Z0JBQ1gsWUFBWTtnQkFDWixXQUFXO2dCQUNYLGtCQUFrQjtnQkFDbEIsYUFBYTtnQkFSRixNQUFNOztJQTRCMUIsOEJBQUM7Q0FBQSxBQWxCRCxDQUs2QyxjQUFjLEdBYTFEO1NBYlksdUJBQXVCOzs7Ozs7SUFFaEMscUNBQW1DOzs7OztJQUNuQyx5Q0FBb0M7Ozs7O0lBQ3BDLHdDQUE0Qjs7Ozs7SUFDNUIseUNBQThCOzs7OztJQUM5Qix3Q0FBNEI7Ozs7O0lBQzVCLDBDQUFxQzs7Ozs7SUFDckMseUNBQStCOzs7OztJQUMvQix5Q0FBd0IiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBEaXJlY3RpdmUsIE5nWm9uZSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgVUlTaW1wbGVNYXJrZXJTZXJ2aWNlIH0gZnJvbSAnLi91aS1zaW1wbGUtbWFya2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgVUlTaW1wbGVNYXJrZXIgfSBmcm9tICcuL3VpLXNpbXBsZS1tYXJrZXInO1xuaW1wb3J0IHsgRXZlbnRCaW5kZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2V2ZW50LWJpbmRlci5zZXJ2aWNlJztcbmltcG9ydCB7IEFNYXBTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2FtYXAuc2VydmljZSc7XG5pbXBvcnQgeyBQaXhlbFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvcGl4ZWwuc2VydmljZSc7XG5pbXBvcnQgeyBJY29uU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9pY29uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWFya2VyTGFiZWxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21hcmtlci1sYWJlbC5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2dlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvbG9nZ2VyL2xvZ2dlci5zZXJ2aWNlJztcblxuQERpcmVjdGl2ZSh7XG4gIHNlbGVjdG9yOiAndWktc2ltcGxlLW1hcmtlcicsXG4gIGV4cG9ydEFzOiAnc2ltcGxlTWFya2VyJyxcbiAgcHJvdmlkZXJzOiBbVUlTaW1wbGVNYXJrZXJTZXJ2aWNlXSxcbn0pXG5leHBvcnQgY2xhc3MgVUlTaW1wbGVNYXJrZXJEaXJlY3RpdmUgZXh0ZW5kcyBVSVNpbXBsZU1hcmtlciB7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHByb3RlY3RlZCBvczogVUlTaW1wbGVNYXJrZXJTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBiaW5kZXI6IEV2ZW50QmluZGVyU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgYW1hcHM6IEFNYXBTZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBwaXhlbHM6IFBpeGVsU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgaWNvbnM6IEljb25TZXJ2aWNlLFxuICAgIHByb3RlY3RlZCBtbGFiZWxzOiBNYXJrZXJMYWJlbFNlcnZpY2UsXG4gICAgcHJvdGVjdGVkIGxvZ2dlcjogTG9nZ2VyU2VydmljZSxcbiAgICBwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmUsXG4gICkge1xuICAgIHN1cGVyKG9zLCBiaW5kZXIsIGFtYXBzLCBwaXhlbHMsIGljb25zLCBtbGFiZWxzLCBsb2dnZXIsIG5nWm9uZSk7XG4gIH1cbn1cbiJdfQ==