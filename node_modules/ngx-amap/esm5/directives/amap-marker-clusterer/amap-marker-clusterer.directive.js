/**
 * @fileoverview added by tsickle
 * Generated from: directives/amap-marker-clusterer/amap-marker-clusterer.directive.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Directive, Input, Output, EventEmitter, ContentChildren, QueryList, NgZone, } from '@angular/core';
import { zip, combineLatest } from 'rxjs';
import { map } from 'rxjs/operators';
import { AmapMarkerClustererService } from './amap-marker-clusterer.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
import { PixelService } from '../../shared/pixel.service';
import { SizeService } from '../../shared/size.service';
import { AmapMarkerDirective } from '../amap-marker/amap-marker.directive';
import { AMapService } from '../../shared/amap.service';
/** @type {?} */
var TAG = 'amap-marker-clusterer';
/** @type {?} */
var MarkerClusterOptions = [
    'gridSize',
    'minClusterSize',
    'maxZoom',
    'averageCenter',
    'styles',
    'renderClusterMarker',
    'zoomOnClick',
];
var AmapMarkerClustererDirective = /** @class */ (function () {
    function AmapMarkerClustererDirective(os, binder, amaps, pixels, sizes, logger, ngZone) {
        this.os = os;
        this.binder = binder;
        this.amaps = amaps;
        this.pixels = pixels;
        this.sizes = sizes;
        this.logger = logger;
        this.ngZone = ngZone;
        // ---- Events ----
        this.naReady = new EventEmitter();
        // amap-marker directives:
        this.markerList = new QueryList();
        this.inited = false;
        /** @type {?} */
        var target = this.os.get();
        this.naClick = this.binder.bindEvent(target, 'click');
    }
    /**
     * @return {?}
     */
    AmapMarkerClustererDirective.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        this.os.destroy();
    };
    /**
     * @return {?}
     */
    AmapMarkerClustererDirective.prototype.ngOnInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.amaps.get().subscribe((/**
         * @return {?}
         */
        function () {
            _this.logger.d(TAG, 'initializing ...');
            /** @type {?} */
            var options = getOptions(_this, MarkerClusterOptions);
            if (options.styles) {
                options.styles = options.styles.map((/**
                 * @param {?} style
                 * @return {?}
                 */
                function (style) {
                    if (style.size) {
                        style.size = (/** @type {?} */ (_this.sizes.create(style.size)));
                    }
                    if (style.offset) {
                        style.offset = _this.pixels.create(style.offset);
                    }
                    if (style.imageOffset) {
                        style.imageOffset = _this.pixels.create(style.imageOffset);
                    }
                    return style;
                }));
            }
            _this.logger.d(TAG, 'options:', options);
            _this.os.create(options).subscribe();
            _this.inited = true;
        }));
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmapMarkerClustererDirective.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        if (!this.inited) {
            return;
        }
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        /** @type {?} */
        var cluster = this.get();
        zip(filter.notEmpty('gridSize'), cluster).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], c = _b[1];
            return c.setGridSize(v);
        }));
        zip(filter.notEmpty('minClusterSize'), cluster).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], c = _b[1];
            return c.setMinClusterSize(v);
        }));
        zip(filter.has('maxZoom'), cluster).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], c = _b[1];
            return c.setMaxZoom(v);
        }));
        zip(filter.has('averageCenter'), cluster).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], c = _b[1];
            return c.setAverageCenter(v);
        }));
        zip(filter.has('styles'), cluster).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], c = _b[1];
            return c.setStyles(v);
        }));
    };
    /**
     * @return {?}
     */
    AmapMarkerClustererDirective.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateMarkers().subscribe((/**
         * @param {?} c
         * @return {?}
         */
        function (c) {
            _this.ngZone.run((/**
             * @return {?}
             */
            function () { return _this.naReady.emit(c); }));
            _this.logger.d(TAG, 'markerClusterer is ready.');
        }));
        this.markerList.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.updateMarkers().subscribe(); }));
    };
    /**
     * @private
     * @return {?}
     */
    AmapMarkerClustererDirective.prototype.updateMarkers = /**
     * @private
     * @return {?}
     */
    function () {
        return zip(combineLatest(this.markerList.map((/**
         * @param {?} d
         * @return {?}
         */
        function (d) { return d.get(); }))), this.get()).pipe(map((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), markers = _b[0], cluster = _b[1];
            cluster.setMarkers(markers);
            return cluster;
        })));
    };
    /**
     * 获取已创建的 AMap.MarkerClusterer 对象
     */
    /**
     * 获取已创建的 AMap.MarkerClusterer 对象
     * @return {?}
     */
    AmapMarkerClustererDirective.prototype.get = /**
     * 获取已创建的 AMap.MarkerClusterer 对象
     * @return {?}
     */
    function () {
        return this.os.get();
    };
    AmapMarkerClustererDirective.decorators = [
        { type: Directive, args: [{
                    selector: 'amap-marker-clusterer',
                    exportAs: 'marker-clusterer',
                    providers: [AmapMarkerClustererService],
                },] }
    ];
    /** @nocollapse */
    AmapMarkerClustererDirective.ctorParameters = function () { return [
        { type: AmapMarkerClustererService },
        { type: EventBinderService },
        { type: AMapService },
        { type: PixelService },
        { type: SizeService },
        { type: LoggerService },
        { type: NgZone }
    ]; };
    AmapMarkerClustererDirective.propDecorators = {
        gridSize: [{ type: Input }],
        minClusterSize: [{ type: Input }],
        maxZoom: [{ type: Input }],
        averageCenter: [{ type: Input }],
        styles: [{ type: Input }],
        renderClusterMarker: [{ type: Input }],
        zoomOnClick: [{ type: Input }],
        naReady: [{ type: Output }],
        naClick: [{ type: Output }],
        markerList: [{ type: ContentChildren, args: [AmapMarkerDirective,] }]
    };
    return AmapMarkerClustererDirective;
}());
export { AmapMarkerClustererDirective };
if (false) {
    /**
     * 聚合计算时网格的像素大小，默认60
     * @type {?}
     */
    AmapMarkerClustererDirective.prototype.gridSize;
    /**
     * 聚合的最小数量。默认值为2，即小于2个点则不能成为一个聚合
     * @type {?}
     */
    AmapMarkerClustererDirective.prototype.minClusterSize;
    /**
     * 最大的聚合级别，大于该级别就不进行相应的聚合。默认值为18
     * @type {?}
     */
    AmapMarkerClustererDirective.prototype.maxZoom;
    /**
     * 聚合点的图标位置是否是所有聚合内点的中心点。默认为否
     * @type {?}
     */
    AmapMarkerClustererDirective.prototype.averageCenter;
    /**
     * 指定聚合后的点标记的图标样式，可缺省，缺省时为默认样式
     * @type {?}
     */
    AmapMarkerClustererDirective.prototype.styles;
    /**
     * 该方法用来实现聚合点的自定义绘制
     * @type {?}
     */
    AmapMarkerClustererDirective.prototype.renderClusterMarker;
    /**
     * 点击聚合点时，是否散开，默认值为：true
     * @type {?}
     */
    AmapMarkerClustererDirective.prototype.zoomOnClick;
    /** @type {?} */
    AmapMarkerClustererDirective.prototype.naReady;
    /** @type {?} */
    AmapMarkerClustererDirective.prototype.naClick;
    /** @type {?} */
    AmapMarkerClustererDirective.prototype.markerList;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerClustererDirective.prototype.inited;
    /**
     * @type {?}
     * @protected
     */
    AmapMarkerClustererDirective.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapMarkerClustererDirective.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerClustererDirective.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerClustererDirective.prototype.pixels;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerClustererDirective.prototype.sizes;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerClustererDirective.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapMarkerClustererDirective.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,