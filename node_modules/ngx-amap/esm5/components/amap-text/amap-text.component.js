/**
 * @fileoverview added by tsickle
 * Generated from: components/amap-text/amap-text.component.ts
 * @suppress {checkTypes,constantProperty,extraRequire,missingOverride,missingReturn,unusedPrivateMembers,uselessCode} checked by tsc
 */
import * as tslib_1 from "tslib";
import { Component, Input, Output, EventEmitter, ContentChildren, QueryList, ElementRef, NgZone, } from '@angular/core';
import { zip } from 'rxjs';
import { AmapTextService } from './amap-text.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { AMapOverlay, OverlayOptions } from '../../base/amap-overlay';
import { EventBinderService } from '../../shared/event-binder.service';
import { getOptions, ChangeFilter } from '../../utils';
import { PixelService } from '../../shared/pixel.service';
import { IconService } from '../../shared/icon.service';
import { AmapInfoWindowComponent } from '../amap-info-window/amap-info-window.component';
import { AMapService } from '../../shared/amap.service';
/** @type {?} */
var TAG = 'amap-text';
/** @type {?} */
var ALL_OPTIONS = tslib_1.__spread(OverlayOptions, [
    'text',
    'position',
    'anchor',
    'offset',
    'topWhenClick',
    'raiseOnDrag',
    'visible',
    'zIndex',
    'angle',
    'autoRotation',
    'animation',
    'shadow',
    'title',
    'style',
]);
var AmapTextComponent = /** @class */ (function (_super) {
    tslib_1.__extends(AmapTextComponent, _super);
    function AmapTextComponent(os, binder, amaps, el, pixels, icons, logger, ngZone) {
        var _this = _super.call(this, os, binder) || this;
        _this.os = os;
        _this.binder = binder;
        _this.amaps = amaps;
        _this.el = el;
        _this.pixels = pixels;
        _this.icons = icons;
        _this.logger = logger;
        _this.ngZone = ngZone;
        /**
         * 额外: 是否隐藏
         */
        _this.hidden = false;
        /**
         * 额外: 是否包含在点聚合中
         */
        _this.inCluster = false;
        /**
         * 额外: 点击时是否显示信息窗体
         */
        _this.openInfoWindow = true;
        // ---- Events ----
        _this.naReady = new EventEmitter();
        // amap info window:
        _this.infoWindowComponent = new QueryList();
        _this.inited = false;
        /** @type {?} */
        var target = _this.os.get();
        _this.naMouseOut = _this.binder.bindEvent(target, 'mouseout');
        _this.naDragStart = _this.binder.bindEvent(target, 'dragstart');
        _this.naDragging = _this.binder.bindEvent(target, 'dragging');
        _this.naDragEnd = _this.binder.bindEvent(target, 'dragend');
        _this.naMoving = _this.binder.bindEvent(target, 'moving');
        _this.naMoveEnd = _this.binder.bindEvent(target, 'moveend');
        _this.naMoveAlong = _this.binder.bindEvent(target, 'movealong');
        return _this;
    }
    /**
     * @return {?}
     */
    AmapTextComponent.prototype.ngOnDestroy = /**
     * @return {?}
     */
    function () {
        if (this.subscription) {
            this.subscription.unsubscribe();
        }
        this.os.destroy();
    };
    /**
     * @param {?} changes
     * @return {?}
     */
    AmapTextComponent.prototype.ngOnChanges = /**
     * @param {?} changes
     * @return {?}
     */
    function (changes) {
        var _this = this;
        /** @type {?} */
        var filter = ChangeFilter.of(changes);
        /** @type {?} */
        var marker = this.get();
        if (!this.inited) {
            // do not draw text marker when no poistion defined.
            if (!this.position) {
                return;
            }
            this.amaps.get().subscribe((/**
             * @return {?}
             */
            function () {
                _this.logger.d(TAG, 'initializing ...');
                // bind info window events:
                _this.subscription = _this.binder.bindEvent(marker, 'click').subscribe((/**
                 * @return {?}
                 */
                function () {
                    if (_this.openInfoWindow) {
                        _this.infoWindowComponent.forEach((/**
                         * @param {?} w
                         * @return {?}
                         */
                        function (w) { return w.open(); }));
                    }
                }));
                /** @type {?} */
                var el = _this.el.nativeElement.querySelector('.amap-text-content');
                _this.text = _this.text ? _this.text : el.innerText;
                /** @type {?} */
                var options = getOptions(_this, ALL_OPTIONS);
                if (_this.shadow) {
                    options.shadow = _this.icons.create(_this.shadow);
                }
                if (_this.offset) {
                    options.offset = _this.pixels.create(_this.offset);
                }
                _this.logger.d(TAG, 'options:', options);
                _this.os.create(options).subscribe((/**
                 * @param {?} m
                 * @return {?}
                 */
                function (m) {
                    _this.ngZone.run((/**
                     * @return {?}
                     */
                    function () { return _this.naReady.emit(m); }));
                    _this.logger.d(TAG, 'marker is ready.');
                }));
                _this.inited = true;
                _this.updateInfoWindow();
                _this.updateInfoWindowPosition();
            }));
        }
        else {
            zip(filter.has('shadow'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setShadow(_this.icons.create(v));
            }));
            zip(filter.has('offset'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setOffset(_this.pixels.create(v));
            }));
            zip(filter.has('title'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setTitle(v);
            }));
            zip(filter.has('content'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setContent(v);
            }));
            zip(filter.has('extData'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setExtData(v);
            }));
            zip(filter.has('clickable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setClickable(!!v);
            }));
            zip(filter.has('draggable'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setDraggable(!!v);
            }));
            zip(filter.has('visible'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return (v ? m.show() : m.hide());
            }));
            zip(filter.has('cursor'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setCursor(v);
            }));
            zip(filter.has('animation'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setAnimation(v);
            }));
            zip(filter.has('angle'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setAngle(v);
            }));
            zip(filter.has('zIndex'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setzIndex(v);
            }));
            zip(filter.notEmpty('position'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setPosition(v);
            }));
            zip(filter.notEmpty('style'), marker).subscribe((/**
             * @param {?} __0
             * @return {?}
             */
            function (_a) {
                var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
                return m.setStyle(v);
            }));
        }
        zip(filter.has('isTop'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
            return m.setTop(!!v);
        }));
        zip(filter.has('hidden'), marker).subscribe((/**
         * @param {?} __0
         * @return {?}
         */
        function (_a) {
            var _b = tslib_1.__read(_a, 2), v = _b[0], m = _b[1];
            return (v ? m.hide() : m.show());
        }));
    };
    /**
     * @return {?}
     */
    AmapTextComponent.prototype.ngAfterContentInit = /**
     * @return {?}
     */
    function () {
        var _this = this;
        this.updateInfoWindow();
        this.infoWindowComponent.changes.subscribe((/**
         * @return {?}
         */
        function () { return _this.updateInfoWindow(); }));
    };
    /**
     * @private
     * @return {?}
     */
    AmapTextComponent.prototype.updateInfoWindow = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.infoWindowComponent && this.inited) {
            if (this.infoWindowComponent.length > 1) {
                this.logger.e(TAG, 'Expected no more than 1 info window.');
                return;
            }
            /** @type {?} */
            var marker_1 = this.os.get();
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            function (component) {
                component.hostMarker = marker_1;
            }));
        }
    };
    /**
     * @private
     * @return {?}
     */
    AmapTextComponent.prototype.updateInfoWindowPosition = /**
     * @private
     * @return {?}
     */
    function () {
        if (this.infoWindowComponent && this.inited) {
            this.infoWindowComponent.forEach((/**
             * @param {?} component
             * @return {?}
             */
            function (component) {
                component.toggleOpen();
            }));
        }
    };
    /**
     * 获取已创建的 AMap.Text 对象
     */
    /**
     * 获取已创建的 AMap.Text 对象
     * @return {?}
     */
    AmapTextComponent.prototype.get = /**
     * 获取已创建的 AMap.Text 对象
     * @return {?}
     */
    function () {
        return this.os.get();
    };
    AmapTextComponent.decorators = [
        { type: Component, args: [{
                    selector: 'amap-text',
                    exportAs: 'text',
                    template: "<div class='amap-text-inner'></div>\n<div class='amap-text-content'>\n  <ng-content></ng-content>\n</div>",
                    providers: [AmapTextService]
                }] }
    ];
    /** @nocollapse */
    AmapTextComponent.ctorParameters = function () { return [
        { type: AmapTextService },
        { type: EventBinderService },
        { type: AMapService },
        { type: ElementRef },
        { type: PixelService },
        { type: IconService },
        { type: LoggerService },
        { type: NgZone }
    ]; };
    AmapTextComponent.propDecorators = {
        text: [{ type: Input }],
        position: [{ type: Input }],
        anchor: [{ type: Input }],
        offset: [{ type: Input }],
        topWhenClick: [{ type: Input }],
        raiseOnDrag: [{ type: Input }],
        visible: [{ type: Input }],
        zIndex: [{ type: Input }],
        angle: [{ type: Input }],
        autoRotation: [{ type: Input }],
        animation: [{ type: Input }],
        shadow: [{ type: Input }],
        title: [{ type: Input }],
        style: [{ type: Input }],
        isTop: [{ type: Input }],
        hidden: [{ type: Input }],
        inCluster: [{ type: Input }],
        openInfoWindow: [{ type: Input }],
        naReady: [{ type: Output }],
        naMouseOut: [{ type: Output }],
        naDragStart: [{ type: Output }],
        naDragging: [{ type: Output }],
        naDragEnd: [{ type: Output }],
        naMoving: [{ type: Output }],
        naMoveEnd: [{ type: Output }],
        naMoveAlong: [{ type: Output }],
        infoWindowComponent: [{ type: ContentChildren, args: [AmapInfoWindowComponent,] }]
    };
    return AmapTextComponent;
}(AMapOverlay));
export { AmapTextComponent };
if (false) {
    /**
     * 点标记显示内容
     * @type {?}
     */
    AmapTextComponent.prototype.text;
    /**
     * 点标记在地图上显示的位置
     * @type {?}
     */
    AmapTextComponent.prototype.position;
    /**
     * 标记锚点
     * @type {?}
     */
    AmapTextComponent.prototype.anchor;
    /**
     * 点标记显示位置偏移量
     * @type {?}
     */
    AmapTextComponent.prototype.offset;
    /**
     * 鼠标点击时marker是否置顶
     * @type {?}
     */
    AmapTextComponent.prototype.topWhenClick;
    /**
     * 拖拽点标记时是否开启点标记离开地图的效果
     * @type {?}
     */
    AmapTextComponent.prototype.raiseOnDrag;
    /**
     * 点标记是否可见
     * @type {?}
     */
    AmapTextComponent.prototype.visible;
    /**
     * 点标记的叠加顺序
     * @type {?}
     */
    AmapTextComponent.prototype.zIndex;
    /**
     * 点标记的旋转角度
     * @type {?}
     */
    AmapTextComponent.prototype.angle;
    /**
     * 是否自动旋转
     * @type {?}
     */
    AmapTextComponent.prototype.autoRotation;
    /**
     * 点标记的动画效果
     * @type {?}
     */
    AmapTextComponent.prototype.animation;
    /**
     * 点标记阴影
     * @type {?}
     */
    AmapTextComponent.prototype.shadow;
    /**
     * 鼠标滑过点标记时的文字提示
     * @type {?}
     */
    AmapTextComponent.prototype.title;
    /**
     * 样式
     * @type {?}
     */
    AmapTextComponent.prototype.style;
    /**
     * 额外: 是否置顶
     * @type {?}
     */
    AmapTextComponent.prototype.isTop;
    /**
     * 额外: 是否隐藏
     * @type {?}
     */
    AmapTextComponent.prototype.hidden;
    /**
     * 额外: 是否包含在点聚合中
     * @type {?}
     */
    AmapTextComponent.prototype.inCluster;
    /**
     * 额外: 点击时是否显示信息窗体
     * @type {?}
     */
    AmapTextComponent.prototype.openInfoWindow;
    /** @type {?} */
    AmapTextComponent.prototype.naReady;
    /** @type {?} */
    AmapTextComponent.prototype.naMouseOut;
    /** @type {?} */
    AmapTextComponent.prototype.naDragStart;
    /** @type {?} */
    AmapTextComponent.prototype.naDragging;
    /** @type {?} */
    AmapTextComponent.prototype.naDragEnd;
    /** @type {?} */
    AmapTextComponent.prototype.naMoving;
    /** @type {?} */
    AmapTextComponent.prototype.naMoveEnd;
    /** @type {?} */
    AmapTextComponent.prototype.naMoveAlong;
    /** @type {?} */
    AmapTextComponent.prototype.infoWindowComponent;
    /**
     * @type {?}
     * @private
     */
    AmapTextComponent.prototype.inited;
    /**
     * @type {?}
     * @private
     */
    AmapTextComponent.prototype.subscription;
    /**
     * @type {?}
     * @protected
     */
    AmapTextComponent.prototype.os;
    /**
     * @type {?}
     * @protected
     */
    AmapTextComponent.prototype.binder;
    /**
     * @type {?}
     * @private
     */
    AmapTextComponent.prototype.amaps;
    /**
     * @type {?}
     * @private
     */
    AmapTextComponent.prototype.el;
    /**
     * @type {?}
     * @private
     */
    AmapTextComponent.prototype.pixels;
    /**
     * @type {?}
     * @private
     */
    AmapTextComponent.prototype.icons;
    /**
     * @type {?}
     * @private
     */
    AmapTextComponent.prototype.logger;
    /**
     * @type {?}
     * @private
     */
    AmapTextComponent.prototype.ngZone;
}
//# sourceMappingURL=data:application/json;base64,