/// <reference types="@types/amap-js-api" />
import { OnDestroy, EventEmitter, SimpleChanges, OnChanges, QueryList, AfterContentInit, NgZone } from '@angular/core';
import { AmapMarkerService } from './amap-marker.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { AMapOverlay } from '../../base/amap-overlay';
import { EventBinderService } from '../../shared/event-binder.service';
import { IPixel, IIcon, IMarkerLabel } from '../../interfaces';
import { PixelService } from '../../shared/pixel.service';
import { IconService } from '../../shared/icon.service';
import { MarkerLabelService } from '../../shared/marker-label.service';
import { AmapInfoWindowComponent } from '../../components/amap-info-window/amap-info-window.component';
import { AMapService } from '../../shared/amap.service';
import * as ɵngcc0 from '@angular/core';
export declare class AmapMarkerDirective extends AMapOverlay<AMap.Marker> implements OnChanges, OnDestroy, AfterContentInit {
    protected os: AmapMarkerService;
    protected binder: EventBinderService;
    private amaps;
    private pixels;
    private icons;
    private mlabels;
    private logger;
    private ngZone;
    /**
     * 点标记在地图上显示的位置
     */
    position: AMap.LocationValue;
    /**
     * 标记锚点
     */
    anchor: AMap.Marker.Anchor;
    /**
     * 点标记显示位置偏移量
     */
    offset: AMap.Pixel | IPixel;
    /**
     * 需在点标记中显示的图标
     */
    icon: string | AMap.Icon | IIcon;
    /**
     * 点标记显示内容
     */
    content: string | HTMLElement;
    /**
     * 鼠标点击时marker是否置顶
     */
    topWhenClick: boolean;
    /**
     * 拖拽点标记时是否开启点标记离开地图的效果
     */
    raiseOnDrag: boolean;
    /**
     * 点标记是否可见
     */
    visible: boolean;
    /**
     * 点标记的叠加顺序
     */
    zIndex: number;
    /**
     * 点标记的旋转角度
     */
    angle: number;
    /**
     * 是否自动旋转
     */
    autoRotation: boolean;
    /**
     * 点标记的动画效果
     */
    animation: AMap.AnimationName;
    /**
     * 点标记阴影
     */
    shadow: AMap.Icon | string | IIcon;
    /**
     * 鼠标滑过点标记时的文字提示
     */
    title: string;
    /**
     * 可点击区域
     */
    shape: AMap.MarkerShape;
    /**
     * 文本标注
     */
    label: AMap.Marker.Label | IMarkerLabel;
    /**
     * 额外: 是否置顶
     */
    isTop: boolean;
    /**
     * 额外: 是否隐藏
     */
    hidden: boolean;
    /**
     * 额外: 是否包含在点聚合中
     */
    inCluster: boolean;
    /**
     * 额外: 点击时是否显示信息窗体
     */
    openInfoWindow: boolean;
    naReady: EventEmitter<any>;
    naMouseOut: EventEmitter<any>;
    naDragStart: EventEmitter<any>;
    naDragging: EventEmitter<any>;
    naDragEnd: EventEmitter<any>;
    naMoving: EventEmitter<any>;
    naMoveEnd: EventEmitter<any>;
    naMoveAlong: EventEmitter<any>;
    infoWindowComponent: QueryList<AmapInfoWindowComponent>;
    private inited;
    private subscription;
    constructor(os: AmapMarkerService, binder: EventBinderService, amaps: AMapService, pixels: PixelService, icons: IconService, mlabels: MarkerLabelService, logger: LoggerService, ngZone: NgZone);
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    private updateInfoWindow;
    private updateInfoWindowPosition;
    /**
     * 获取已创建的 AMap.Marker 对象
     */
    get(): import("rxjs").Observable<AMap.Marker<any>>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AmapMarkerDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<AmapMarkerDirective, "amap-marker", ["marker"], { "hidden": "hidden"; "inCluster": "inCluster"; "openInfoWindow": "openInfoWindow"; "position": "position"; "anchor": "anchor"; "offset": "offset"; "icon": "icon"; "content": "content"; "topWhenClick": "topWhenClick"; "raiseOnDrag": "raiseOnDrag"; "visible": "visible"; "zIndex": "zIndex"; "angle": "angle"; "autoRotation": "autoRotation"; "animation": "animation"; "shadow": "shadow"; "title": "title"; "shape": "shape"; "label": "label"; "isTop": "isTop"; }, { "naReady": "naReady"; "naMouseOut": "naMouseOut"; "naDragStart": "naDragStart"; "naDragging": "naDragging"; "naDragEnd": "naDragEnd"; "naMoving": "naMoving"; "naMoveEnd": "naMoveEnd"; "naMoveAlong": "naMoveAlong"; }, ["infoWindowComponent"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hcC1tYXJrZXIuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImFtYXAtbWFya2VyLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbIi8vLyA8cmVmZXJlbmNlIHR5cGVzPVwiQHR5cGVzL2FtYXAtanMtYXBpXCIgLz5cbmltcG9ydCB7IE9uRGVzdHJveSwgRXZlbnRFbWl0dGVyLCBTaW1wbGVDaGFuZ2VzLCBPbkNoYW5nZXMsIFF1ZXJ5TGlzdCwgQWZ0ZXJDb250ZW50SW5pdCwgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbWFwTWFya2VyU2VydmljZSB9IGZyb20gJy4vYW1hcC1tYXJrZXIuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xvZ2dlci9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBBTWFwT3ZlcmxheSB9IGZyb20gJy4uLy4uL2Jhc2UvYW1hcC1vdmVybGF5JztcbmltcG9ydCB7IEV2ZW50QmluZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9ldmVudC1iaW5kZXIuc2VydmljZSc7XG5pbXBvcnQgeyBJUGl4ZWwsIElJY29uLCBJTWFya2VyTGFiZWwgfSBmcm9tICcuLi8uLi9pbnRlcmZhY2VzJztcbmltcG9ydCB7IFBpeGVsU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9waXhlbC5zZXJ2aWNlJztcbmltcG9ydCB7IEljb25TZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2ljb24uc2VydmljZSc7XG5pbXBvcnQgeyBNYXJrZXJMYWJlbFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvbWFya2VyLWxhYmVsLnNlcnZpY2UnO1xuaW1wb3J0IHsgQW1hcEluZm9XaW5kb3dDb21wb25lbnQgfSBmcm9tICcuLi8uLi9jb21wb25lbnRzL2FtYXAtaW5mby13aW5kb3cvYW1hcC1pbmZvLXdpbmRvdy5jb21wb25lbnQnO1xuaW1wb3J0IHsgQU1hcFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvYW1hcC5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFtYXBNYXJrZXJEaXJlY3RpdmUgZXh0ZW5kcyBBTWFwT3ZlcmxheTxBTWFwLk1hcmtlcj4gaW1wbGVtZW50cyBPbkNoYW5nZXMsIE9uRGVzdHJveSwgQWZ0ZXJDb250ZW50SW5pdCB7XG4gICAgcHJvdGVjdGVkIG9zOiBBbWFwTWFya2VyU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgYmluZGVyOiBFdmVudEJpbmRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBhbWFwcztcbiAgICBwcml2YXRlIHBpeGVscztcbiAgICBwcml2YXRlIGljb25zO1xuICAgIHByaXZhdGUgbWxhYmVscztcbiAgICBwcml2YXRlIGxvZ2dlcjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICAvKipcbiAgICAgKiDngrnmoIforrDlnKjlnLDlm77kuIrmmL7npLrnmoTkvY3nva5cbiAgICAgKi9cbiAgICBwb3NpdGlvbjogQU1hcC5Mb2NhdGlvblZhbHVlO1xuICAgIC8qKlxuICAgICAqIOagh+iusOmUmueCuVxuICAgICAqL1xuICAgIGFuY2hvcjogQU1hcC5NYXJrZXIuQW5jaG9yO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOaYvuekuuS9jee9ruWBj+enu+mHj1xuICAgICAqL1xuICAgIG9mZnNldDogQU1hcC5QaXhlbCB8IElQaXhlbDtcbiAgICAvKipcbiAgICAgKiDpnIDlnKjngrnmoIforrDkuK3mmL7npLrnmoTlm77moIdcbiAgICAgKi9cbiAgICBpY29uOiBzdHJpbmcgfCBBTWFwLkljb24gfCBJSWNvbjtcbiAgICAvKipcbiAgICAgKiDngrnmoIforrDmmL7npLrlhoXlrrlcbiAgICAgKi9cbiAgICBjb250ZW50OiBzdHJpbmcgfCBIVE1MRWxlbWVudDtcbiAgICAvKipcbiAgICAgKiDpvKDmoIfngrnlh7vml7ZtYXJrZXLmmK/lkKbnva7pobZcbiAgICAgKi9cbiAgICB0b3BXaGVuQ2xpY2s6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICog5ouW5ou954K55qCH6K6w5pe25piv5ZCm5byA5ZCv54K55qCH6K6w56a75byA5Zyw5Zu+55qE5pWI5p6cXG4gICAgICovXG4gICAgcmFpc2VPbkRyYWc6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICog54K55qCH6K6w5piv5ZCm5Y+v6KeBXG4gICAgICovXG4gICAgdmlzaWJsZTogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDngrnmoIforrDnmoTlj6DliqDpobrluo9cbiAgICAgKi9cbiAgICB6SW5kZXg6IG51bWJlcjtcbiAgICAvKipcbiAgICAgKiDngrnmoIforrDnmoTml4vovazop5LluqZcbiAgICAgKi9cbiAgICBhbmdsZTogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIOaYr+WQpuiHquWKqOaXi+i9rFxuICAgICAqL1xuICAgIGF1dG9Sb3RhdGlvbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDngrnmoIforrDnmoTliqjnlLvmlYjmnpxcbiAgICAgKi9cbiAgICBhbmltYXRpb246IEFNYXAuQW5pbWF0aW9uTmFtZTtcbiAgICAvKipcbiAgICAgKiDngrnmoIforrDpmLTlvbFcbiAgICAgKi9cbiAgICBzaGFkb3c6IEFNYXAuSWNvbiB8IHN0cmluZyB8IElJY29uO1xuICAgIC8qKlxuICAgICAqIOm8oOagh+a7kei/h+eCueagh+iusOaXtueahOaWh+Wtl+aPkOekulxuICAgICAqL1xuICAgIHRpdGxlOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICog5Y+v54K55Ye75Yy65Z+fXG4gICAgICovXG4gICAgc2hhcGU6IEFNYXAuTWFya2VyU2hhcGU7XG4gICAgLyoqXG4gICAgICog5paH5pys5qCH5rOoXG4gICAgICovXG4gICAgbGFiZWw6IEFNYXAuTWFya2VyLkxhYmVsIHwgSU1hcmtlckxhYmVsO1xuICAgIC8qKlxuICAgICAqIOmineWkljog5piv5ZCm572u6aG2XG4gICAgICovXG4gICAgaXNUb3A6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICog6aKd5aSWOiDmmK/lkKbpmpDol49cbiAgICAgKi9cbiAgICBoaWRkZW46IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICog6aKd5aSWOiDmmK/lkKbljIXlkKvlnKjngrnogZrlkIjkuK1cbiAgICAgKi9cbiAgICBpbkNsdXN0ZXI6IGJvb2xlYW47XG4gICAgLyoqXG4gICAgICog6aKd5aSWOiDngrnlh7vml7bmmK/lkKbmmL7npLrkv6Hmga/nqpfkvZNcbiAgICAgKi9cbiAgICBvcGVuSW5mb1dpbmRvdzogYm9vbGVhbjtcbiAgICBuYVJlYWR5OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYU1vdXNlT3V0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYURyYWdTdGFydDogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFEcmFnZ2luZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFEcmFnRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYU1vdmluZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFNb3ZlRW5kOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYU1vdmVBbG9uZzogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgaW5mb1dpbmRvd0NvbXBvbmVudDogUXVlcnlMaXN0PEFtYXBJbmZvV2luZG93Q29tcG9uZW50PjtcbiAgICBwcml2YXRlIGluaXRlZDtcbiAgICBwcml2YXRlIHN1YnNjcmlwdGlvbjtcbiAgICBjb25zdHJ1Y3RvcihvczogQW1hcE1hcmtlclNlcnZpY2UsIGJpbmRlcjogRXZlbnRCaW5kZXJTZXJ2aWNlLCBhbWFwczogQU1hcFNlcnZpY2UsIHBpeGVsczogUGl4ZWxTZXJ2aWNlLCBpY29uczogSWNvblNlcnZpY2UsIG1sYWJlbHM6IE1hcmtlckxhYmVsU2VydmljZSwgbG9nZ2VyOiBMb2dnZXJTZXJ2aWNlLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZUluZm9XaW5kb3c7XG4gICAgcHJpdmF0ZSB1cGRhdGVJbmZvV2luZG93UG9zaXRpb247XG4gICAgLyoqXG4gICAgICog6I635Y+W5bey5Yib5bu655qEIEFNYXAuTWFya2VyIOWvueixoVxuICAgICAqL1xuICAgIGdldCgpOiBpbXBvcnQoXCJyeGpzXCIpLk9ic2VydmFibGU8QU1hcC5NYXJrZXI8YW55Pj47XG59XG4iXX0=