/// <reference types="@types/amap-js-api" />
import { NgZone } from '@angular/core';
import { Observable } from 'rxjs';
import { AMapService } from '../../shared/amap.service';
import { AmapUILoaderService } from '../../shared/amap-ui-loader.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { Getter } from '../../base/interfaces';
import * as ɵngcc0 from '@angular/core';
export declare namespace AMapUISimpleMarker {
    interface Options<ExtraData = any> extends AMap.Marker.Options<ExtraData> {
        /**
         * 样式主题
         */
        iconTheme?: 'default' | 'fresh' | 'numv1' | 'numv2';
        /**
         * 背景图标样式
         */
        iconStyle?: string | object;
        /**
         * 图标前景文字
         */
        iconLabel?: string | object;
        /**
         * 是否显示定位点
         */
        showPositionPoint?: boolean | object;
        /**
         * 内建的Dom容器上附带的class，多个class name用空格分开
         */
        containerClassNames?: string;
    }
}
export declare class UISimpleMarkerService implements Getter<any> {
    private amaps;
    private uiLoader;
    private logger;
    private ngZone;
    private marker;
    private marker$;
    private ui;
    constructor(amaps: AMapService, uiLoader: AmapUILoaderService, logger: LoggerService, ngZone: NgZone);
    /**
     * 获取点标记
     */
    get(): Observable<any>;
    /**
     * 创建点标记 AMap.SimpleMarker
     * @param options 选项
     * @param addToMap 是否直接加进地图
     */
    create(options: AMapUISimpleMarker.Options, addToMap?: boolean): Observable<any>;
    /**
     * 销毁点标记
     */
    destroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UISimpleMarkerService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<UISimpleMarkerService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktc2ltcGxlLW1hcmtlci5zZXJ2aWNlLmQudHMiLCJzb3VyY2VzIjpbInVpLXNpbXBsZS1tYXJrZXIuc2VydmljZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJAdHlwZXMvYW1hcC1qcy1hcGlcIiAvPlxuaW1wb3J0IHsgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSAncnhqcyc7XG5pbXBvcnQgeyBBTWFwU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9hbWFwLnNlcnZpY2UnO1xuaW1wb3J0IHsgQW1hcFVJTG9hZGVyU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9hbWFwLXVpLWxvYWRlci5zZXJ2aWNlJztcbmltcG9ydCB7IExvZ2dlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvbG9nZ2VyL2xvZ2dlci5zZXJ2aWNlJztcbmltcG9ydCB7IEdldHRlciB9IGZyb20gJy4uLy4uL2Jhc2UvaW50ZXJmYWNlcyc7XG5leHBvcnQgZGVjbGFyZSBuYW1lc3BhY2UgQU1hcFVJU2ltcGxlTWFya2VyIHtcbiAgICBpbnRlcmZhY2UgT3B0aW9uczxFeHRyYURhdGEgPSBhbnk+IGV4dGVuZHMgQU1hcC5NYXJrZXIuT3B0aW9uczxFeHRyYURhdGE+IHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOagt+W8j+S4u+mimFxuICAgICAgICAgKi9cbiAgICAgICAgaWNvblRoZW1lPzogJ2RlZmF1bHQnIHwgJ2ZyZXNoJyB8ICdudW12MScgfCAnbnVtdjInO1xuICAgICAgICAvKipcbiAgICAgICAgICog6IOM5pmv5Zu+5qCH5qC35byPXG4gICAgICAgICAqL1xuICAgICAgICBpY29uU3R5bGU/OiBzdHJpbmcgfCBvYmplY3Q7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDlm77moIfliY3mma/mloflrZdcbiAgICAgICAgICovXG4gICAgICAgIGljb25MYWJlbD86IHN0cmluZyB8IG9iamVjdDtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOaYr+WQpuaYvuekuuWumuS9jeeCuVxuICAgICAgICAgKi9cbiAgICAgICAgc2hvd1Bvc2l0aW9uUG9pbnQ/OiBib29sZWFuIHwgb2JqZWN0O1xuICAgICAgICAvKipcbiAgICAgICAgICog5YaF5bu655qERG9t5a655Zmo5LiK6ZmE5bim55qEY2xhc3PvvIzlpJrkuKpjbGFzcyBuYW1l55So56m65qC85YiG5byAXG4gICAgICAgICAqL1xuICAgICAgICBjb250YWluZXJDbGFzc05hbWVzPzogc3RyaW5nO1xuICAgIH1cbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIFVJU2ltcGxlTWFya2VyU2VydmljZSBpbXBsZW1lbnRzIEdldHRlcjxhbnk+IHtcbiAgICBwcml2YXRlIGFtYXBzO1xuICAgIHByaXZhdGUgdWlMb2FkZXI7XG4gICAgcHJpdmF0ZSBsb2dnZXI7XG4gICAgcHJpdmF0ZSBuZ1pvbmU7XG4gICAgcHJpdmF0ZSBtYXJrZXI7XG4gICAgcHJpdmF0ZSBtYXJrZXIkO1xuICAgIHByaXZhdGUgdWk7XG4gICAgY29uc3RydWN0b3IoYW1hcHM6IEFNYXBTZXJ2aWNlLCB1aUxvYWRlcjogQW1hcFVJTG9hZGVyU2VydmljZSwgbG9nZ2VyOiBMb2dnZXJTZXJ2aWNlLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgLyoqXG4gICAgICog6I635Y+W54K55qCH6K6wXG4gICAgICovXG4gICAgZ2V0KCk6IE9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiDliJvlu7rngrnmoIforrAgQU1hcC5TaW1wbGVNYXJrZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyDpgInpoblcbiAgICAgKiBAcGFyYW0gYWRkVG9NYXAg5piv5ZCm55u05o6l5Yqg6L+b5Zyw5Zu+XG4gICAgICovXG4gICAgY3JlYXRlKG9wdGlvbnM6IEFNYXBVSVNpbXBsZU1hcmtlci5PcHRpb25zLCBhZGRUb01hcD86IGJvb2xlYW4pOiBPYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICog6ZSA5q+B54K55qCH6K6wXG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkO1xufVxuIl19