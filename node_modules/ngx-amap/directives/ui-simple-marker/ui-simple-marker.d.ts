/// <reference types="@types/amap-js-api" />
import { OnDestroy, EventEmitter, SimpleChanges, OnChanges, QueryList, AfterContentInit, NgZone } from '@angular/core';
import { Subscription } from 'rxjs';
import { AMapOverlay } from '../../base/amap-overlay';
import { EventBinderService } from '../../shared/event-binder.service';
import { IPixel, IIcon, IMarkerLabel } from '../../interfaces';
import { AmapInfoWindowComponent } from '../../components/amap-info-window/amap-info-window.component';
import { AMapService } from '../../shared/amap.service';
import { WithCreate } from '../../base/interfaces';
import { LoggerService } from '../../shared/logger/logger.service';
import { PixelService } from '../../shared/pixel.service';
import { IconService } from '../../shared/icon.service';
import { MarkerLabelService } from '../../shared/marker-label.service';
import { AMapUISimpleMarker } from './ui-simple-marker.service';
import * as ɵngcc0 from '@angular/core';
export declare const SimpleMarkerOptions: string[];
export declare class UISimpleMarker extends AMapOverlay<any> implements OnDestroy, OnChanges, AfterContentInit {
    protected os: WithCreate<any>;
    protected binder: EventBinderService;
    protected amaps: AMapService;
    protected pixels: PixelService;
    protected icons: IconService;
    protected mlabels: MarkerLabelService;
    protected logger: LoggerService;
    protected ngZone: NgZone;
    TAG: string;
    /**
     * 样式主题
     */
    iconTheme: 'default' | 'fresh' | 'numv1' | 'numv2';
    /**
     * 背景图标样式
     */
    iconStyle: string | object;
    /**
     * 图标前景文字
     */
    iconLabel: string | object;
    /**
     * 是否显示定位点
     */
    showPositionPoint: boolean | object;
    /**
     * 内建的Dom容器上附带的class，多个class name用空格分开
     */
    containerClassNames: string;
    /**
     * 点标记在地图上显示的位置
     */
    position: AMap.LocationValue;
    /**
     * 标记锚点
     */
    anchor: AMap.Marker.Anchor;
    /**
     * 点标记显示位置偏移量
     */
    offset: AMap.Pixel | IPixel;
    /**
     * 需在点标记中显示的图标
     */
    icon: string | AMap.Icon | IIcon;
    /**
     * 鼠标点击时marker是否置顶
     */
    topWhenClick: boolean;
    /**
     * 拖拽点标记时是否开启点标记离开地图的效果
     */
    raiseOnDrag: boolean;
    /**
     * 点标记是否可见
     */
    visible: boolean;
    /**
     * 点标记的叠加顺序
     */
    zIndex: number;
    /**
     * 点标记的旋转角度
     */
    angle: number;
    /**
     * 是否自动旋转
     */
    autoRotation: boolean;
    /**
     * 点标记的动画效果
     */
    animation: AMap.AnimationName;
    /**
     * 点标记阴影
     */
    shadow: AMap.Icon | string | IIcon;
    /**
     * 鼠标滑过点标记时的文字提示
     */
    title: string;
    /**
     * 可点击区域
     */
    shape: AMap.MarkerShape;
    /**
     * 文本标注
     */
    label: AMap.Marker.Label | IMarkerLabel;
    /**
     * 额外: 是否置顶
     */
    isTop: boolean;
    /**
     * 额外: 是否隐藏
     */
    hidden: boolean;
    /**
     * 额外: 是否包含在点聚合中
     */
    inCluster: boolean;
    /**
     * 额外: 点击时是否显示信息窗体
     */
    openInfoWindow: boolean;
    naReady: EventEmitter<any>;
    naMouseOut: EventEmitter<any>;
    naDragStart: EventEmitter<any>;
    naDragging: EventEmitter<any>;
    naDragEnd: EventEmitter<any>;
    naMoving: EventEmitter<any>;
    naMoveEnd: EventEmitter<any>;
    naMoveAlong: EventEmitter<any>;
    infoWindowComponent: QueryList<AmapInfoWindowComponent>;
    protected inited: boolean;
    protected subscription: Subscription;
    constructor(os: WithCreate<any>, binder: EventBinderService, amaps: AMapService, pixels: PixelService, icons: IconService, mlabels: MarkerLabelService, logger: LoggerService, ngZone: NgZone);
    ngOnDestroy(): void;
    ngOnChanges(changes: SimpleChanges): void;
    ngAfterContentInit(): void;
    private updateInfoWindow;
    private updateInfoWindowPosition;
    getOptions(): AMapUISimpleMarker.Options<any>;
    /**
     * 获取已创建的 AMapUI 对象
     */
    get(): import("rxjs").Observable<any>;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<UISimpleMarker, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<UISimpleMarker, never, never, { "hidden": "hidden"; "inCluster": "inCluster"; "openInfoWindow": "openInfoWindow"; "iconTheme": "iconTheme"; "iconStyle": "iconStyle"; "iconLabel": "iconLabel"; "showPositionPoint": "showPositionPoint"; "containerClassNames": "containerClassNames"; "position": "position"; "anchor": "anchor"; "offset": "offset"; "icon": "icon"; "topWhenClick": "topWhenClick"; "raiseOnDrag": "raiseOnDrag"; "visible": "visible"; "zIndex": "zIndex"; "angle": "angle"; "autoRotation": "autoRotation"; "animation": "animation"; "shadow": "shadow"; "title": "title"; "shape": "shape"; "label": "label"; "isTop": "isTop"; }, { "naReady": "naReady"; "naMouseOut": "naMouseOut"; "naDragStart": "naDragStart"; "naDragging": "naDragging"; "naDragEnd": "naDragEnd"; "naMoving": "naMoving"; "naMoveEnd": "naMoveEnd"; "naMoveAlong": "naMoveAlong"; }, ["infoWindowComponent"]>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidWktc2ltcGxlLW1hcmtlci5kLnRzIiwic291cmNlcyI6WyJ1aS1zaW1wbGUtbWFya2VyLmQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUNBIiwic291cmNlc0NvbnRlbnQiOlsiLy8vIDxyZWZlcmVuY2UgdHlwZXM9XCJAdHlwZXMvYW1hcC1qcy1hcGlcIiAvPlxuaW1wb3J0IHsgT25EZXN0cm95LCBFdmVudEVtaXR0ZXIsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgUXVlcnlMaXN0LCBBZnRlckNvbnRlbnRJbml0LCBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IFN1YnNjcmlwdGlvbiB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgQU1hcE92ZXJsYXkgfSBmcm9tICcuLi8uLi9iYXNlL2FtYXAtb3ZlcmxheSc7XG5pbXBvcnQgeyBFdmVudEJpbmRlclNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvZXZlbnQtYmluZGVyLnNlcnZpY2UnO1xuaW1wb3J0IHsgSVBpeGVsLCBJSWNvbiwgSU1hcmtlckxhYmVsIH0gZnJvbSAnLi4vLi4vaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBBbWFwSW5mb1dpbmRvd0NvbXBvbmVudCB9IGZyb20gJy4uLy4uL2NvbXBvbmVudHMvYW1hcC1pbmZvLXdpbmRvdy9hbWFwLWluZm8td2luZG93LmNvbXBvbmVudCc7XG5pbXBvcnQgeyBBTWFwU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9hbWFwLnNlcnZpY2UnO1xuaW1wb3J0IHsgV2l0aENyZWF0ZSB9IGZyb20gJy4uLy4uL2Jhc2UvaW50ZXJmYWNlcyc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xvZ2dlci9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBQaXhlbFNlcnZpY2UgfSBmcm9tICcuLi8uLi9zaGFyZWQvcGl4ZWwuc2VydmljZSc7XG5pbXBvcnQgeyBJY29uU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9pY29uLnNlcnZpY2UnO1xuaW1wb3J0IHsgTWFya2VyTGFiZWxTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL21hcmtlci1sYWJlbC5zZXJ2aWNlJztcbmltcG9ydCB7IEFNYXBVSVNpbXBsZU1hcmtlciB9IGZyb20gJy4vdWktc2ltcGxlLW1hcmtlci5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNvbnN0IFNpbXBsZU1hcmtlck9wdGlvbnM6IHN0cmluZ1tdO1xuZXhwb3J0IGRlY2xhcmUgY2xhc3MgVUlTaW1wbGVNYXJrZXIgZXh0ZW5kcyBBTWFwT3ZlcmxheTxhbnk+IGltcGxlbWVudHMgT25EZXN0cm95LCBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQge1xuICAgIHByb3RlY3RlZCBvczogV2l0aENyZWF0ZTxhbnk+O1xuICAgIHByb3RlY3RlZCBiaW5kZXI6IEV2ZW50QmluZGVyU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgYW1hcHM6IEFNYXBTZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBwaXhlbHM6IFBpeGVsU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgaWNvbnM6IEljb25TZXJ2aWNlO1xuICAgIHByb3RlY3RlZCBtbGFiZWxzOiBNYXJrZXJMYWJlbFNlcnZpY2U7XG4gICAgcHJvdGVjdGVkIGxvZ2dlcjogTG9nZ2VyU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgbmdab25lOiBOZ1pvbmU7XG4gICAgVEFHOiBzdHJpbmc7XG4gICAgLyoqXG4gICAgICog5qC35byP5Li76aKYXG4gICAgICovXG4gICAgaWNvblRoZW1lOiAnZGVmYXVsdCcgfCAnZnJlc2gnIHwgJ251bXYxJyB8ICdudW12Mic7XG4gICAgLyoqXG4gICAgICog6IOM5pmv5Zu+5qCH5qC35byPXG4gICAgICovXG4gICAgaWNvblN0eWxlOiBzdHJpbmcgfCBvYmplY3Q7XG4gICAgLyoqXG4gICAgICog5Zu+5qCH5YmN5pmv5paH5a2XXG4gICAgICovXG4gICAgaWNvbkxhYmVsOiBzdHJpbmcgfCBvYmplY3Q7XG4gICAgLyoqXG4gICAgICog5piv5ZCm5pi+56S65a6a5L2N54K5XG4gICAgICovXG4gICAgc2hvd1Bvc2l0aW9uUG9pbnQ6IGJvb2xlYW4gfCBvYmplY3Q7XG4gICAgLyoqXG4gICAgICog5YaF5bu655qERG9t5a655Zmo5LiK6ZmE5bim55qEY2xhc3PvvIzlpJrkuKpjbGFzcyBuYW1l55So56m65qC85YiG5byAXG4gICAgICovXG4gICAgY29udGFpbmVyQ2xhc3NOYW1lczogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOWcqOWcsOWbvuS4iuaYvuekuueahOS9jee9rlxuICAgICAqL1xuICAgIHBvc2l0aW9uOiBBTWFwLkxvY2F0aW9uVmFsdWU7XG4gICAgLyoqXG4gICAgICog5qCH6K6w6ZSa54K5XG4gICAgICovXG4gICAgYW5jaG9yOiBBTWFwLk1hcmtlci5BbmNob3I7XG4gICAgLyoqXG4gICAgICog54K55qCH6K6w5pi+56S65L2N572u5YGP56e76YePXG4gICAgICovXG4gICAgb2Zmc2V0OiBBTWFwLlBpeGVsIHwgSVBpeGVsO1xuICAgIC8qKlxuICAgICAqIOmcgOWcqOeCueagh+iusOS4reaYvuekuueahOWbvuagh1xuICAgICAqL1xuICAgIGljb246IHN0cmluZyB8IEFNYXAuSWNvbiB8IElJY29uO1xuICAgIC8qKlxuICAgICAqIOm8oOagh+eCueWHu+aXtm1hcmtlcuaYr+WQpue9rumhtlxuICAgICAqL1xuICAgIHRvcFdoZW5DbGljazogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDmi5bmi73ngrnmoIforrDml7bmmK/lkKblvIDlkK/ngrnmoIforrDnprvlvIDlnLDlm77nmoTmlYjmnpxcbiAgICAgKi9cbiAgICByYWlzZU9uRHJhZzogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDngrnmoIforrDmmK/lkKblj6/op4FcbiAgICAgKi9cbiAgICB2aXNpYmxlOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOeahOWPoOWKoOmhuuW6j1xuICAgICAqL1xuICAgIHpJbmRleDogbnVtYmVyO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOeahOaXi+i9rOinkuW6plxuICAgICAqL1xuICAgIGFuZ2xlOiBudW1iZXI7XG4gICAgLyoqXG4gICAgICog5piv5ZCm6Ieq5Yqo5peL6L2sXG4gICAgICovXG4gICAgYXV0b1JvdGF0aW9uOiBib29sZWFuO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOeahOWKqOeUu+aViOaenFxuICAgICAqL1xuICAgIGFuaW1hdGlvbjogQU1hcC5BbmltYXRpb25OYW1lO1xuICAgIC8qKlxuICAgICAqIOeCueagh+iusOmYtOW9sVxuICAgICAqL1xuICAgIHNoYWRvdzogQU1hcC5JY29uIHwgc3RyaW5nIHwgSUljb247XG4gICAgLyoqXG4gICAgICog6byg5qCH5ruR6L+H54K55qCH6K6w5pe255qE5paH5a2X5o+Q56S6XG4gICAgICovXG4gICAgdGl0bGU6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiDlj6/ngrnlh7vljLrln59cbiAgICAgKi9cbiAgICBzaGFwZTogQU1hcC5NYXJrZXJTaGFwZTtcbiAgICAvKipcbiAgICAgKiDmlofmnKzmoIfms6hcbiAgICAgKi9cbiAgICBsYWJlbDogQU1hcC5NYXJrZXIuTGFiZWwgfCBJTWFya2VyTGFiZWw7XG4gICAgLyoqXG4gICAgICog6aKd5aSWOiDmmK/lkKbnva7pobZcbiAgICAgKi9cbiAgICBpc1RvcDogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDpop3lpJY6IOaYr+WQpumakOiXj1xuICAgICAqL1xuICAgIGhpZGRlbjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDpop3lpJY6IOaYr+WQpuWMheWQq+WcqOeCueiBmuWQiOS4rVxuICAgICAqL1xuICAgIGluQ2x1c3RlcjogYm9vbGVhbjtcbiAgICAvKipcbiAgICAgKiDpop3lpJY6IOeCueWHu+aXtuaYr+WQpuaYvuekuuS/oeaBr+eql+S9k1xuICAgICAqL1xuICAgIG9wZW5JbmZvV2luZG93OiBib29sZWFuO1xuICAgIG5hUmVhZHk6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hTW91c2VPdXQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hRHJhZ1N0YXJ0OiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYURyYWdnaW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYURyYWdFbmQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hTW92aW5nOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYU1vdmVFbmQ6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hTW92ZUFsb25nOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBpbmZvV2luZG93Q29tcG9uZW50OiBRdWVyeUxpc3Q8QW1hcEluZm9XaW5kb3dDb21wb25lbnQ+O1xuICAgIHByb3RlY3RlZCBpbml0ZWQ6IGJvb2xlYW47XG4gICAgcHJvdGVjdGVkIHN1YnNjcmlwdGlvbjogU3Vic2NyaXB0aW9uO1xuICAgIGNvbnN0cnVjdG9yKG9zOiBXaXRoQ3JlYXRlPGFueT4sIGJpbmRlcjogRXZlbnRCaW5kZXJTZXJ2aWNlLCBhbWFwczogQU1hcFNlcnZpY2UsIHBpeGVsczogUGl4ZWxTZXJ2aWNlLCBpY29uczogSWNvblNlcnZpY2UsIG1sYWJlbHM6IE1hcmtlckxhYmVsU2VydmljZSwgbG9nZ2VyOiBMb2dnZXJTZXJ2aWNlLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbiAgICBuZ09uQ2hhbmdlcyhjaGFuZ2VzOiBTaW1wbGVDaGFuZ2VzKTogdm9pZDtcbiAgICBuZ0FmdGVyQ29udGVudEluaXQoKTogdm9pZDtcbiAgICBwcml2YXRlIHVwZGF0ZUluZm9XaW5kb3c7XG4gICAgcHJpdmF0ZSB1cGRhdGVJbmZvV2luZG93UG9zaXRpb247XG4gICAgZ2V0T3B0aW9ucygpOiBBTWFwVUlTaW1wbGVNYXJrZXIuT3B0aW9uczxhbnk+O1xuICAgIC8qKlxuICAgICAqIOiOt+WPluW3suWIm+W7uueahCBBTWFwVUkg5a+56LGhXG4gICAgICovXG4gICAgZ2V0KCk6IGltcG9ydChcInJ4anNcIikuT2JzZXJ2YWJsZTxhbnk+O1xufVxuIl19