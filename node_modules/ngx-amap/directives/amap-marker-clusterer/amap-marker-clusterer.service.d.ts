/// <reference types="@types/amap-js-api" />
import { NgZone } from '@angular/core';
import { AMapService } from '../../shared/amap.service';
import { PluginLoaderService } from '../../shared/plugin-loader.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { Getter } from '../../base/interfaces';
import * as ɵngcc0 from '@angular/core';
export declare namespace AMapMarkerClusterer {
    interface StyleObject {
        url?: string;
        size?: AMap.Size;
        offset?: AMap.Pixel;
        imageOffset?: AMap.Pixel;
        textColor?: string;
        textSize?: number;
    }
    interface Options {
        /**
         * 聚合计算时网格的像素大小，默认60
         */
        gridSize?: number;
        /**
         * 聚合的最小数量。默认值为2，即小于2个点则不能成为一个聚合
         */
        minClusterSize?: number;
        /**
         * 最大的聚合级别，大于该级别就不进行相应的聚合。默认值为18
         */
        maxZoom?: number;
        /**
         * 聚合点的图标位置是否是所有聚合内点的中心点。默认为否
         */
        averageCenter?: boolean;
        /**
         * 指定聚合后的点标记的图标样式，可缺省，缺省时为默认样式
         */
        styles?: StyleObject[];
        /**
         * 该方法用来实现聚合点的自定义绘制
         */
        renderClusterMarker?: (obj: {
            count: number;
            markers: AMap.Marker<any>[];
            marker: AMap.Marker<any>;
        }) => void;
        /**
         * 点击聚合点时，是否散开，默认值为：true
         */
        zoomOnClick?: boolean;
    }
}
export declare class AmapMarkerClustererService implements Getter<any> {
    private amaps;
    private plugins;
    private logger;
    private ngZone;
    private markerClusterer;
    private markerClusterer$;
    constructor(amaps: AMapService, plugins: PluginLoaderService, logger: LoggerService, ngZone: NgZone);
    /**
     * 获取点聚合
     */
    get(): import("rxjs").Observable<any>;
    /**
     * 创建点聚合 AMap.MarkerClusterer
     * @param options 选项
     */
    create(options: AMapMarkerClusterer.Options): import("rxjs").Observable<any>;
    /**
     * 销毁点聚合
     */
    destroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<AmapMarkerClustererService, never>;
    static ɵprov: ɵngcc0.ɵɵInjectableDef<AmapMarkerClustererService>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYW1hcC1tYXJrZXItY2x1c3RlcmVyLnNlcnZpY2UuZC50cyIsInNvdXJjZXMiOlsiYW1hcC1tYXJrZXItY2x1c3RlcmVyLnNlcnZpY2UuZC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyIvLy8gPHJlZmVyZW5jZSB0eXBlcz1cIkB0eXBlcy9hbWFwLWpzLWFwaVwiIC8+XG5pbXBvcnQgeyBOZ1pvbmUgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcbmltcG9ydCB7IEFNYXBTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2FtYXAuc2VydmljZSc7XG5pbXBvcnQgeyBQbHVnaW5Mb2FkZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL3BsdWdpbi1sb2FkZXIuc2VydmljZSc7XG5pbXBvcnQgeyBMb2dnZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2xvZ2dlci9sb2dnZXIuc2VydmljZSc7XG5pbXBvcnQgeyBHZXR0ZXIgfSBmcm9tICcuLi8uLi9iYXNlL2ludGVyZmFjZXMnO1xuZXhwb3J0IGRlY2xhcmUgbmFtZXNwYWNlIEFNYXBNYXJrZXJDbHVzdGVyZXIge1xuICAgIGludGVyZmFjZSBTdHlsZU9iamVjdCB7XG4gICAgICAgIHVybD86IHN0cmluZztcbiAgICAgICAgc2l6ZT86IEFNYXAuU2l6ZTtcbiAgICAgICAgb2Zmc2V0PzogQU1hcC5QaXhlbDtcbiAgICAgICAgaW1hZ2VPZmZzZXQ/OiBBTWFwLlBpeGVsO1xuICAgICAgICB0ZXh0Q29sb3I/OiBzdHJpbmc7XG4gICAgICAgIHRleHRTaXplPzogbnVtYmVyO1xuICAgIH1cbiAgICBpbnRlcmZhY2UgT3B0aW9ucyB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDogZrlkIjorqHnrpfml7bnvZHmoLznmoTlg4/ntKDlpKflsI/vvIzpu5jorqQ2MFxuICAgICAgICAgKi9cbiAgICAgICAgZ3JpZFNpemU/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDogZrlkIjnmoTmnIDlsI/mlbDph4/jgILpu5jorqTlgLzkuLoy77yM5Y2z5bCP5LqOMuS4queCueWImeS4jeiDveaIkOS4uuS4gOS4quiBmuWQiFxuICAgICAgICAgKi9cbiAgICAgICAgbWluQ2x1c3RlclNpemU/OiBudW1iZXI7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDmnIDlpKfnmoTogZrlkIjnuqfliKvvvIzlpKfkuo7or6XnuqfliKvlsLHkuI3ov5vooYznm7jlupTnmoTogZrlkIjjgILpu5jorqTlgLzkuLoxOFxuICAgICAgICAgKi9cbiAgICAgICAgbWF4Wm9vbT86IG51bWJlcjtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIOiBmuWQiOeCueeahOWbvuagh+S9jee9ruaYr+WQpuaYr+aJgOacieiBmuWQiOWGheeCueeahOS4reW/g+eCueOAgum7mOiupOS4uuWQplxuICAgICAgICAgKi9cbiAgICAgICAgYXZlcmFnZUNlbnRlcj86IGJvb2xlYW47XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDmjIflrprogZrlkIjlkI7nmoTngrnmoIforrDnmoTlm77moIfmoLflvI/vvIzlj6/nvLrnnIHvvIznvLrnnIHml7bkuLrpu5jorqTmoLflvI9cbiAgICAgICAgICovXG4gICAgICAgIHN0eWxlcz86IFN0eWxlT2JqZWN0W107XG4gICAgICAgIC8qKlxuICAgICAgICAgKiDor6Xmlrnms5XnlKjmnaXlrp7njrDogZrlkIjngrnnmoToh6rlrprkuYnnu5jliLZcbiAgICAgICAgICovXG4gICAgICAgIHJlbmRlckNsdXN0ZXJNYXJrZXI/OiAob2JqOiB7XG4gICAgICAgICAgICBjb3VudDogbnVtYmVyO1xuICAgICAgICAgICAgbWFya2VyczogQU1hcC5NYXJrZXI8YW55PltdO1xuICAgICAgICAgICAgbWFya2VyOiBBTWFwLk1hcmtlcjxhbnk+O1xuICAgICAgICB9KSA9PiB2b2lkO1xuICAgICAgICAvKipcbiAgICAgICAgICog54K55Ye76IGa5ZCI54K55pe277yM5piv5ZCm5pWj5byA77yM6buY6K6k5YC85Li677yadHJ1ZVxuICAgICAgICAgKi9cbiAgICAgICAgem9vbU9uQ2xpY2s/OiBib29sZWFuO1xuICAgIH1cbn1cbmV4cG9ydCBkZWNsYXJlIGNsYXNzIEFtYXBNYXJrZXJDbHVzdGVyZXJTZXJ2aWNlIGltcGxlbWVudHMgR2V0dGVyPGFueT4ge1xuICAgIHByaXZhdGUgYW1hcHM7XG4gICAgcHJpdmF0ZSBwbHVnaW5zO1xuICAgIHByaXZhdGUgbG9nZ2VyO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHByaXZhdGUgbWFya2VyQ2x1c3RlcmVyO1xuICAgIHByaXZhdGUgbWFya2VyQ2x1c3RlcmVyJDtcbiAgICBjb25zdHJ1Y3RvcihhbWFwczogQU1hcFNlcnZpY2UsIHBsdWdpbnM6IFBsdWdpbkxvYWRlclNlcnZpY2UsIGxvZ2dlcjogTG9nZ2VyU2VydmljZSwgbmdab25lOiBOZ1pvbmUpO1xuICAgIC8qKlxuICAgICAqIOiOt+WPlueCueiBmuWQiFxuICAgICAqL1xuICAgIGdldCgpOiBpbXBvcnQoXCJyeGpzXCIpLk9ic2VydmFibGU8YW55PjtcbiAgICAvKipcbiAgICAgKiDliJvlu7rngrnogZrlkIggQU1hcC5NYXJrZXJDbHVzdGVyZXJcbiAgICAgKiBAcGFyYW0gb3B0aW9ucyDpgInpoblcbiAgICAgKi9cbiAgICBjcmVhdGUob3B0aW9uczogQU1hcE1hcmtlckNsdXN0ZXJlci5PcHRpb25zKTogaW1wb3J0KFwicnhqc1wiKS5PYnNlcnZhYmxlPGFueT47XG4gICAgLyoqXG4gICAgICog6ZSA5q+B54K56IGa5ZCIXG4gICAgICovXG4gICAgZGVzdHJveSgpOiB2b2lkO1xufVxuIl19