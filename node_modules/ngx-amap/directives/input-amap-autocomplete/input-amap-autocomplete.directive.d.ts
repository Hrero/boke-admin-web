import { EventEmitter, ElementRef, SimpleChanges, OnChanges, NgZone } from '@angular/core';
import { AmapAutocompleteService, AMapAutocomplete } from '../../services/amap-autocomplete/amap-autocomplete.service';
import { LoggerService } from '../../shared/logger/logger.service';
import { EventBinderService } from '../../shared/event-binder.service';
import * as ɵngcc0 from '@angular/core';
export declare class InputAmapAutocompleteDirective implements OnChanges {
    protected os: AmapAutocompleteService;
    protected binder: EventBinderService;
    private el;
    private logger;
    private ngZone;
    /**
     * 输入提示时限定POI类型，多个类型用“|”分隔
     */
    type: string;
    /**
     * 输入提示时限定城市
     */
    city: string;
    /**
     * 返回的数据类型
     */
    datatype: AMapAutocomplete.DataType;
    /**
     * 是否强制限制在设置的城市内搜索
     */
    citylimit: boolean;
    naReady: EventEmitter<any>;
    naComplete: EventEmitter<any>;
    naSelect: EventEmitter<any>;
    naChoose: EventEmitter<any>;
    naError: EventEmitter<any>;
    private inited;
    constructor(os: AmapAutocompleteService, binder: EventBinderService, el: ElementRef, logger: LoggerService, ngZone: NgZone);
    ngOnChanges(changes: SimpleChanges): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<InputAmapAutocompleteDirective, never>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<InputAmapAutocompleteDirective, "input[amapAutocomplete]", never, { "type": "type"; "city": "city"; "datatype": "datatype"; "citylimit": "citylimit"; }, { "naReady": "naReady"; "naComplete": "naComplete"; "naSelect": "naSelect"; "naChoose": "naChoose"; "naError": "naError"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiaW5wdXQtYW1hcC1hdXRvY29tcGxldGUuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImlucHV0LWFtYXAtYXV0b2NvbXBsZXRlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBOztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBQ0EiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBFdmVudEVtaXR0ZXIsIEVsZW1lbnRSZWYsIFNpbXBsZUNoYW5nZXMsIE9uQ2hhbmdlcywgTmdab25lIH0gZnJvbSAnQGFuZ3VsYXIvY29yZSc7XG5pbXBvcnQgeyBBbWFwQXV0b2NvbXBsZXRlU2VydmljZSwgQU1hcEF1dG9jb21wbGV0ZSB9IGZyb20gJy4uLy4uL3NlcnZpY2VzL2FtYXAtYXV0b2NvbXBsZXRlL2FtYXAtYXV0b2NvbXBsZXRlLnNlcnZpY2UnO1xuaW1wb3J0IHsgTG9nZ2VyU2VydmljZSB9IGZyb20gJy4uLy4uL3NoYXJlZC9sb2dnZXIvbG9nZ2VyLnNlcnZpY2UnO1xuaW1wb3J0IHsgRXZlbnRCaW5kZXJTZXJ2aWNlIH0gZnJvbSAnLi4vLi4vc2hhcmVkL2V2ZW50LWJpbmRlci5zZXJ2aWNlJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIElucHV0QW1hcEF1dG9jb21wbGV0ZURpcmVjdGl2ZSBpbXBsZW1lbnRzIE9uQ2hhbmdlcyB7XG4gICAgcHJvdGVjdGVkIG9zOiBBbWFwQXV0b2NvbXBsZXRlU2VydmljZTtcbiAgICBwcm90ZWN0ZWQgYmluZGVyOiBFdmVudEJpbmRlclNlcnZpY2U7XG4gICAgcHJpdmF0ZSBlbDtcbiAgICBwcml2YXRlIGxvZ2dlcjtcbiAgICBwcml2YXRlIG5nWm9uZTtcbiAgICAvKipcbiAgICAgKiDovpPlhaXmj5DnpLrml7bpmZDlrppQT0nnsbvlnovvvIzlpJrkuKrnsbvlnovnlKjigJx84oCd5YiG6ZqUXG4gICAgICovXG4gICAgdHlwZTogc3RyaW5nO1xuICAgIC8qKlxuICAgICAqIOi+k+WFpeaPkOekuuaXtumZkOWumuWfjuW4glxuICAgICAqL1xuICAgIGNpdHk6IHN0cmluZztcbiAgICAvKipcbiAgICAgKiDov5Tlm57nmoTmlbDmja7nsbvlnotcbiAgICAgKi9cbiAgICBkYXRhdHlwZTogQU1hcEF1dG9jb21wbGV0ZS5EYXRhVHlwZTtcbiAgICAvKipcbiAgICAgKiDmmK/lkKblvLrliLbpmZDliLblnKjorr7nva7nmoTln47luILlhoXmkJzntKJcbiAgICAgKi9cbiAgICBjaXR5bGltaXQ6IGJvb2xlYW47XG4gICAgbmFSZWFkeTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFDb21wbGV0ZTogRXZlbnRFbWl0dGVyPGFueT47XG4gICAgbmFTZWxlY3Q6IEV2ZW50RW1pdHRlcjxhbnk+O1xuICAgIG5hQ2hvb3NlOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBuYUVycm9yOiBFdmVudEVtaXR0ZXI8YW55PjtcbiAgICBwcml2YXRlIGluaXRlZDtcbiAgICBjb25zdHJ1Y3RvcihvczogQW1hcEF1dG9jb21wbGV0ZVNlcnZpY2UsIGJpbmRlcjogRXZlbnRCaW5kZXJTZXJ2aWNlLCBlbDogRWxlbWVudFJlZiwgbG9nZ2VyOiBMb2dnZXJTZXJ2aWNlLCBuZ1pvbmU6IE5nWm9uZSk7XG4gICAgbmdPbkNoYW5nZXMoY2hhbmdlczogU2ltcGxlQ2hhbmdlcyk6IHZvaWQ7XG59XG4iXX0=