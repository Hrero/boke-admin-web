import { AfterContentInit, ElementRef, EventEmitter, NgZone, OnChanges, OnDestroy } from '@angular/core';
import { Observable } from 'rxjs';
import { ModuleOptions, StateChange } from './types';
import * as ɵngcc0 from '@angular/core';
export declare class LazyLoadImageDirective implements OnChanges, AfterContentInit, OnDestroy {
    lazyImage: string;
    defaultImage?: string;
    errorImage?: string;
    scrollTarget?: any;
    customObservable?: Observable<any>;
    offset?: number;
    useSrcset?: boolean;
    decode?: boolean;
    debug?: boolean;
    onStateChange: EventEmitter<StateChange>;
    onLoad: EventEmitter<boolean>;
    private propertyChanges$;
    private elementRef;
    private ngZone;
    private loadSubscription?;
    private debugSubscription?;
    private hooks;
    private platformId;
    constructor(el: ElementRef, ngZone: NgZone, platformId: Object, options?: ModuleOptions);
    ngOnChanges(): void;
    ngAfterContentInit(): any;
    ngOnDestroy(): void;
    static ɵfac: ɵngcc0.ɵɵFactoryDef<LazyLoadImageDirective, [null, null, null, { optional: true; }]>;
    static ɵdir: ɵngcc0.ɵɵDirectiveDefWithMeta<LazyLoadImageDirective, "[lazyLoad]", never, { "lazyImage": "lazyLoad"; "defaultImage": "defaultImage"; "errorImage": "errorImage"; "scrollTarget": "scrollTarget"; "customObservable": "customObservable"; "offset": "offset"; "useSrcset": "useSrcset"; "decode": "decode"; "debug": "debug"; }, { "onStateChange": "onStateChange"; "onLoad": "onLoad"; }, never>;
}

//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoibGF6eWxvYWQtaW1hZ2UuZGlyZWN0aXZlLmQudHMiLCJzb3VyY2VzIjpbImxhenlsb2FkLWltYWdlLmRpcmVjdGl2ZS5kLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTs7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFDQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEFmdGVyQ29udGVudEluaXQsIEVsZW1lbnRSZWYsIEV2ZW50RW1pdHRlciwgTmdab25lLCBPbkNoYW5nZXMsIE9uRGVzdHJveSB9IGZyb20gJ0Bhbmd1bGFyL2NvcmUnO1xuaW1wb3J0IHsgT2JzZXJ2YWJsZSB9IGZyb20gJ3J4anMnO1xuaW1wb3J0IHsgTW9kdWxlT3B0aW9ucywgU3RhdGVDaGFuZ2UgfSBmcm9tICcuL3R5cGVzJztcbmV4cG9ydCBkZWNsYXJlIGNsYXNzIExhenlMb2FkSW1hZ2VEaXJlY3RpdmUgaW1wbGVtZW50cyBPbkNoYW5nZXMsIEFmdGVyQ29udGVudEluaXQsIE9uRGVzdHJveSB7XG4gICAgbGF6eUltYWdlOiBzdHJpbmc7XG4gICAgZGVmYXVsdEltYWdlPzogc3RyaW5nO1xuICAgIGVycm9ySW1hZ2U/OiBzdHJpbmc7XG4gICAgc2Nyb2xsVGFyZ2V0PzogYW55O1xuICAgIGN1c3RvbU9ic2VydmFibGU/OiBPYnNlcnZhYmxlPGFueT47XG4gICAgb2Zmc2V0PzogbnVtYmVyO1xuICAgIHVzZVNyY3NldD86IGJvb2xlYW47XG4gICAgZGVjb2RlPzogYm9vbGVhbjtcbiAgICBkZWJ1Zz86IGJvb2xlYW47XG4gICAgb25TdGF0ZUNoYW5nZTogRXZlbnRFbWl0dGVyPFN0YXRlQ2hhbmdlPjtcbiAgICBvbkxvYWQ6IEV2ZW50RW1pdHRlcjxib29sZWFuPjtcbiAgICBwcml2YXRlIHByb3BlcnR5Q2hhbmdlcyQ7XG4gICAgcHJpdmF0ZSBlbGVtZW50UmVmO1xuICAgIHByaXZhdGUgbmdab25lO1xuICAgIHByaXZhdGUgbG9hZFN1YnNjcmlwdGlvbj87XG4gICAgcHJpdmF0ZSBkZWJ1Z1N1YnNjcmlwdGlvbj87XG4gICAgcHJpdmF0ZSBob29rcztcbiAgICBwcml2YXRlIHBsYXRmb3JtSWQ7XG4gICAgY29uc3RydWN0b3IoZWw6IEVsZW1lbnRSZWYsIG5nWm9uZTogTmdab25lLCBwbGF0Zm9ybUlkOiBPYmplY3QsIG9wdGlvbnM/OiBNb2R1bGVPcHRpb25zKTtcbiAgICBuZ09uQ2hhbmdlcygpOiB2b2lkO1xuICAgIG5nQWZ0ZXJDb250ZW50SW5pdCgpOiBhbnk7XG4gICAgbmdPbkRlc3Ryb3koKTogdm9pZDtcbn1cbiJdfQ==